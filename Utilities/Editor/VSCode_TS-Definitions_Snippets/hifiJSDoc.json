[
    {
        "kind": "namespace",
        "name": "Agent",
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "isPlayingAvatarSound"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isListeningToAudioStream"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isNoiseGateEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lastReceivedAudioLoudness"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sessionUUID"
            }
        ],
        "longname": "Agent",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "setIsAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isAvatar"
            }
        ],
        "memberof": "Agent",
        "longname": "Agent.setIsAvatar",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isAvatar",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Agent",
        "longname": "Agent.isAvatar",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "playAvatarSound",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "avatarSound"
            }
        ],
        "memberof": "Agent",
        "longname": "Agent.playAvatarSound",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Assignment Client Scripts</td></tr></table><br>The <code>Avatar</code> API is used to manipulate scriptable avatars on the domain. This API is a subset of the \r{@link MyAvatar} API.\r\r<p><strong>Note:</strong> In the examples, use \"<code>Avatar</code>\" instead of \"<code>MyAvatar</code>\".</p>",
        "kind": "namespace",
        "name": "Avatar",
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "handPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation left or right about an axis running from the head to the feet of the avatar. \r    Yaw is sometimes called \"heading\".",
                "name": "bodyYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from shoulder to shoulder of the avatar. Pitch is\r    sometimes called \"elevation\".",
                "name": "bodyPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the chest to the back of the avatar. Roll is\r    sometimes called \"bank\".",
                "name": "bodyRoll"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar's head.",
                "name": "headOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from ear to ear of the avatar's head. Pitch is\r    sometimes called \"elevation\".",
                "name": "headPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation left or right about an axis running from the base to the crown of the avatar's\r    head. Yaw is sometimes called \"heading\".",
                "name": "headYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the nose to the back of the avatar's head. Roll is\r    sometimes called \"bank\".",
                "name": "headRoll"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "audioLoudness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "audioAverageLoudness"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "displayName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Sanitized, defaulted version displayName that is defined by the AvatarMixer\r    rather than by Interface clients. The result is unique among all avatars present at the time.",
                "name": "sessionDisplayName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "lookAtSnappingEnabled"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "skeletonModelURL"
            },
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "name": "attachmentData"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of joints in the current avatar model. <em>Read-only.</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sensorToWorldMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "controllerLeftHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "controllerRightHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sensorToWorldScale"
            }
        ],
        "longname": "Avatar",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "startAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 30,
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "name": "priority"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "hold"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 3.403e+38,
                "name": "lastFrame"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "name": "maskedJoints"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.startAnimation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "stopAnimation",
        "memberof": "Avatar",
        "longname": "Avatar.stopAnimation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAnimationDetails",
        "returns": [
            {
                "type": {
                    "names": [
                        "Avatar.AnimationDetails"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAnimationDetails",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "EntityViewer",
        "hifiAssignmentClient": true,
        "longname": "EntityViewer",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "queryOctree",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.queryOctree",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setOrientation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "orientation"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setOrientation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setCenterRadius",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "radius"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setCenterRadius",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setKeyholeRadius",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "radius"
            }
        ],
        "deprecated": "Use {@link EntityViewer.setCenterRadius|setCenterRadius} instead.",
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setKeyholeRadius",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVoxelSizeScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sizeScale"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setVoxelSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setBoundaryLevelAdjust",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "boundaryLevelAdjust"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setMaxPacketsPerSecond",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "maxPacketsPerSecond"
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.setMaxPacketsPerSecond",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOrientation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getOrientation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getVoxelSizeScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getVoxelSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getBoundaryLevelAdjust",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getMaxPacketsPerSecond",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getMaxPacketsPerSecond",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOctreeElementsCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "EntityViewer",
        "longname": "EntityViewer.getOctreeElementsCount",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "HifiAbout",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "buildDate"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "buildVersion"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "qtVersion"
            }
        ],
        "longname": "HifiAbout",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "openUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "HifiAbout",
        "longname": "HifiAbout.openUrl",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.Application</code> object has properties representing Interface's state. The property\rvalues are integer IDs, uniquely identifying each output. <em>Read-only.</em> These can be mapped to actions or functions or\r<code>Controller.Standard</code> items in a {@link RouteObject} mapping (e.g., using the {@link RouteObject#when} method).\rEach data value is either <code>1.0</code> for \"true\" or <code>0.0</code> for \"false\".</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>CameraFirstPerson</code></td><td>number</td><td>number</td><td>The camera is in first-person mode.\r      </td></tr>\r    <tr><td><code>CameraThirdPerson</code></td><td>number</td><td>number</td><td>The camera is in third-person mode.\r      </td></tr>\r    <tr><td><code>CameraFSM</code></td><td>number</td><td>number</td><td>The camera is in full screen mirror mode.</td></tr>\r    <tr><td><code>CameraIndependent</code></td><td>number</td><td>number</td><td>The camera is in independent mode.</td></tr>\r    <tr><td><code>CameraEntity</code></td><td>number</td><td>number</td><td>The camera is in entity mode.</td></tr>\r    <tr><td><code>InHMD</code></td><td>number</td><td>number</td><td>The user is in HMD mode.</td></tr>\r    <tr><td><code>AdvancedMovement</code></td><td>number</td><td>number</td><td>Advanced movement controls are enabled.\r      </td></tr>\r    <tr><td><code>SnapTurn</code></td><td>number</td><td>number</td><td>Snap turn is enabled.</td></tr>\r    <tr><td><code>Grounded</code></td><td>number</td><td>number</td><td>The user's avatar is on the ground.</td></tr>\r    <tr><td><code>NavigationFocused</code></td><td>number</td><td>number</td><td><em>Not used.</em></td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-Application",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-Application",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>This API helps manage adding and deleting avatar bookmarks.",
        "kind": "namespace",
        "name": "AvatarBookmarks",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "AvatarBookmarks",
        "scope": "global"
    },
    {
        "description": "Add the current Avatar to your avatar bookmarks.",
        "kind": "function",
        "name": "addBookMark",
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.addBookMark",
        "scope": "static"
    },
    {
        "description": "This function gets triggered after avatar loaded from bookmark",
        "kind": "function",
        "name": "bookmarkLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.bookmarkLoaded",
        "scope": "static"
    },
    {
        "description": "This function gets triggered after avatar bookmark deleted",
        "kind": "function",
        "name": "bookmarkDeleted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.bookmarkDeleted",
        "scope": "static"
    },
    {
        "description": "This function gets triggered after avatar bookmark added",
        "kind": "function",
        "name": "bookmarkAdded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "bookmarkName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.bookmarkAdded",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "deleteBookmark",
        "memberof": "AvatarBookmarks",
        "longname": "AvatarBookmarks.deleteBookmark",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "deleteBookmark",
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.deleteBookmark",
        "scope": "static"
    },
    {
        "description": "Get the ID of the entity that the camera is set to use the position and orientation from when it's in entity mode. You can\r    also get the entity ID using the <code>Camera.cameraEntity</code> property.",
        "kind": "function",
        "name": "getCameraEntity",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the camera is set to follow when in entity mode; <code>null</code> if no camera\r    entity has been set."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getCameraEntity",
        "scope": "static"
    },
    {
        "description": "Set the entity that the camera should use the position and orientation from when it's in entity mode. You can also set the\r    entity using the <code>Camera.cameraEntity</code> property.",
        "kind": "function",
        "name": "setCameraEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity that the camera should follow when it's in entity mode.",
                "name": "entityID"
            }
        ],
        "examples": [
            "<caption>Move your camera to the position and orientation of the closest entity.</caption>\rCamera.setModeString(\"entity\");\rvar entity = Entities.findClosestEntity(MyAvatar.position, 100.0);\rCamera.setCameraEntity(entity);\r\n    "
        ],
        "memberof": "Camera",
        "longname": "Camera.setCameraEntity",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "LocationBookmarks",
        "hifiClientEntity": true,
        "hifiInterface": true,
        "longname": "LocationBookmarks",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "addBookmark",
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.addBookmark",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setHomeLocationToAddress",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "address"
            }
        ],
        "memberof": "LocationBookmarks",
        "longname": "LocationBookmarks.setHomeLocationToAddress",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The LOD class manages your Level of Detail functions within Interface.",
        "kind": "namespace",
        "name": "LODManager",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "presentTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "engineRunTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avgRenderTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodLevel"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodDecreaseFPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodIncreaseFPS"
            }
        ],
        "longname": "LODManager",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setAutomaticLODAdjust",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setAutomaticLODAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAutomaticLODAdjust",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getAutomaticLODAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setDesktopLODTargetFPS",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setDesktopLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDesktopLODTargetFPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getDesktopLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setHMDLODTargetFPS",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setHMDLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHMDLODTargetFPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getHMDLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLODFeedbackText",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getLODFeedbackText",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setOctreeSizeScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sizeScale"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setOctreeSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOctreeSizeScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getOctreeSizeScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setBoundaryLevelAdjust",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "boundaryLevelAdjust"
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.setBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getBoundaryLevelAdjust",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getBoundaryLevelAdjust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLODTargetFPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.getLODTargetFPS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "LODIncreased",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.LODIncreased",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "LODDecreased",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "LODManager",
        "longname": "LODManager.LODDecreased",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "SpeechRecognizer",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "SpeechRecognizer",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "setEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.setEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "addCommand",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "command"
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.addCommand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "removeCommand",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "command"
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.removeCommand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "commandRecognized",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "command"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.commandRecognized",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "enabledUpdated",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "SpeechRecognizer",
        "longname": "SpeechRecognizer.enabledUpdated",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The AudioScope API helps control the Audio Scope features in Interface",
        "kind": "namespace",
        "name": "AudioScope",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "scopeInput"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "scopeOutputLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "scopeOutputRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "triggerInput"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "triggerOutputLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "triggerOutputRight"
            }
        ],
        "longname": "AudioScope",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "toggle",
        "memberof": "AudioScope",
        "longname": "AudioScope.toggle",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "togglePause",
        "memberof": "AudioScope",
        "longname": "AudioScope.togglePause",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPause",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "paused"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setPause",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPause",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getPause",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "toggleTrigger",
        "memberof": "AudioScope",
        "longname": "AudioScope.toggleTrigger",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAutoTrigger",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getAutoTrigger",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAutoTrigger",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "autoTrigger"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setAutoTrigger",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setTriggerValues",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setTriggerValues",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setTriggered",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "triggered"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setTriggered",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTriggered",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getTriggered",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFramesPerSecond",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getFramesPerSecond",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFramesPerScope",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getFramesPerScope",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "selectAudioScopeFiveFrames",
        "memberof": "AudioScope",
        "longname": "AudioScope.selectAudioScopeFiveFrames",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "selectAudioScopeTwentyFrames",
        "memberof": "AudioScope",
        "longname": "AudioScope.selectAudioScopeTwentyFrames",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "selectAudioScopeFiftyFrames",
        "memberof": "AudioScope",
        "longname": "AudioScope.selectAudioScopeFiftyFrames",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getScopeInput",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getScopeInput",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getScopeOutputLeft",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getScopeOutputLeft",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getScopeOutputRight",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getScopeOutputRight",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTriggerInput",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getTriggerInput",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTriggerOutputLeft",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getTriggerOutputLeft",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTriggerOutputRight",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.getTriggerOutputRight",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setLocalEcho",
        "tags": [
            {
                "originalTitle": "parm",
                "title": "parm",
                "text": "{boolean} localEcho",
                "value": "{boolean} localEcho"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setLocalEcho",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setServerEcho",
        "tags": [
            {
                "originalTitle": "parm",
                "title": "parm",
                "text": "{boolean} serverEcho",
                "value": "{boolean} serverEcho"
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.setServerEcho",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "pauseChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.pauseChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "triggered",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioScope",
        "longname": "AudioScope.triggered",
        "scope": "static"
    },
    {
        "description": "The <code>\"far-grab\"</code> {@link Entities.ActionType|ActionType} moves and rotates an entity to a target position and \rorientation, optionally relative to another entity. Collisions between the entity and the user's avatar are disabled during \rthe far-grab.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-FarGrab",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target position.",
                "name": "targetPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The target rotation.",
                "name": "targetRotation"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "If an entity ID, the <code>targetPosition</code> and <code>targetRotation</code> are \r    relative to this entity's position and rotation.",
                "name": "otherID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's position to catch up with the\r    target position. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action \r    is applied using an exponential decay.",
                "name": "linearTimeScale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's orientation to catch up with the\r    target orientation. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the \r    action is applied using an exponential decay.",
                "name": "angularTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-FarGrab",
        "scope": "static"
    },
    {
        "description": "The <code>\"hold\"</code> {@link Entities.ActionType|ActionType} positions and rotates an entity relative to an avatar's hand. \rCollisions between the entity and the user's avatar are disabled during the hold.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-Hold",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "MyAvatar.sessionUUID",
                "description": "The ID of the avatar holding the entity.",
                "name": "holderID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target position relative to the avatar's hand.",
                "name": "relativePosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The target rotation relative to the avatar's hand.",
                "name": "relativeRotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's position and rotation to catch up with \r    the target. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action is \r    applied using an exponential decay.",
                "name": "timeScale"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "right",
                "description": "The hand holding the entity: <code>\"left\"</code> or <code>\"right\"</code>.",
                "name": "hand"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the entity is made kinematic during the action; the entity won't \r   lag behind the hand but constraint actions such as <code>\"hinge\"</code> won't act properly.",
                "name": "kinematic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> and <code>kinematic</code> is <code>true</code>, the \r   entity's <code>velocity</code> property will be set during the action, e.g., so that other scripts may use the value.",
                "name": "kinematicSetVelocity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the entity follows the HMD controller rather than the avatar's \r   hand.",
                "name": "ignoreIK"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Hold",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The AvatarManager API has properties and methods which manage Avatars within the same domain.\r\r<p><strong>Note:</strong> This API is also provided to Interface and client entity scripts as the synonym, \r<code>AvatarList</code>. For assignment client scripts, see the separate {@link AvatarList} API.",
        "kind": "namespace",
        "name": "AvatarManager",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "AvatarManager",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "getAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "avatarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarData"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatar",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarDataRate",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarDataRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarUpdateRate",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarUpdateRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarSimulationRate",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarSimulationRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "name": "ray"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "name": "avatarsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "name": "avatarsToDiscard"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayToAvatarIntersectionResult"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.findRayIntersection",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "findRayIntersectionVector",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "name": "ray"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "name": "avatarsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "name": "avatarsToDiscard"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayToAvatarIntersectionResult"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.findRayIntersectionVector",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarSortCoefficient",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarSortCoefficient",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAvatarSortCoefficient",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.setAvatarSortCoefficient",
        "scope": "static"
    },
    {
        "description": "Used in the PAL for getting PAL-related data about avatars nearby. Using this method is faster\rthan iterating over each avatar and obtaining data about them in JavaScript, as that method\rlocks and unlocks each avatar's data structure potentially hundreds of times per update tick.",
        "kind": "function",
        "name": "getPalData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "A list of specific Avatar Identifiers about\rwhich you want to get PAL data",
                "name": "specificAvatarIdentifiers"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getPalData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateAvatarRenderStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "shouldRenderAvatars"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.updateAvatarRenderStatus",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>Your avatar is your in-world representation of you. The <code>MyAvatar</code> API is used to manipulate the avatar.\rFor example, you can customize the avatar's appearance, run custom avatar animations,\rchange the avatar's position within the domain, or manage the avatar's collisions with other objects.",
        "kind": "namespace",
        "name": "MyAvatar",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A synonym for <code>position</code> for use by QML.",
                "name": "qmlPosition"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then your avatar is rendered for you in Interface,\r    otherwise it is not rendered for you (but it is still rendered for other users).",
                "name": "shouldRenderLocally"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "Vec3.ZERO",
                "description": "The target velocity of your avatar to be achieved by a scripted motor.",
                "name": "motorVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000000,
                "description": "The timescale for the scripted motor to achieve the target \r    <code>motorVelocity</code> avatar velocity. Smaller values result in higher acceleration.",
                "name": "motorTimescale"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"camera\"",
                "description": "Reference frame of the <code>motorVelocity</code>. Must be one of the \r    following: <code>\"camera\"</code>, <code>\"avatar\"</code>, and <code>\"world\"</code>.",
                "name": "motorReferenceFrame"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"simple\"",
                "description": "The Type of scripted motor behavior: <code>\"simple\"</code> to use the \r    <code>motorTimescale</code> time scale; <code>\"dynamic\"</code> to use character controller timescales.",
                "name": "motorMode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"Body_Hits_Impact.wav\"",
                "description": "The sound that's played when the avatar experiences a \r    collision. It can be a mono or stereo 16-bit WAV file running at either 24kHz or 48kHz. The latter is down-sampled \r    by the audio mixer, so all audio effectively plays back at a 24khz. 48kHz RAW files are also supported.",
                "name": "collisionSoundURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Specifies the listening position when hearing spatialized audio. Must be one \r    of the following property values:<br />\r    <code>audioListenerModeHead</code><br />\r    <code>audioListenerModeCamera</code><br />\r    <code>audioListenerModeCustom</code>",
                "name": "audioListenerMode"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The audio listening position is at the avatar's head. <em>Read-only.</em>",
                "name": "audioListenerModeHead"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The audio listening position is at the camera. <em>Read-only.</em>",
                "name": "audioListenerModeCamera"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "The audio listening position is at a the position specified by set by the \r    <code>customListenPosition</code> and <code>customListenOrientation</code> property values. <em>Read-only.</em>",
                "name": "audioListenerModeCustom"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Blendshapes will be transmitted over the network if set to true.",
                "name": "hasScriptedBlendshapes"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "procedural blinking will be turned on if set to true.",
                "name": "hasProceduralBlinkFaceMovement"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "procedural eye movement will be turned on if set to true.",
                "name": "hasProceduralEyeFaceMovement"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If set to true, voice audio will move the mouth Blendshapes while MyAvatar.hasScriptedBlendshapes is enabled.",
                "name": "hasAudioEnabledFaceMovement"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "Vec3.ZERO",
                "description": "The listening position used when the <code>audioListenerMode</code>\r    property value is <code>audioListenerModeCustom</code>.",
                "name": "customListenPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "Quat.IDENTITY",
                "description": "The listening orientation used when the \r    <code>audioListenerMode</code> property value is <code>audioListenerModeCustom</code>.",
                "name": "customListenOrientation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the left hand in avatar coordinates if it's being positioned by \r    controllers, otherwise {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "leftHandPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the right hand in avatar coordinates if it's being positioned by\r    controllers, otherwise {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "rightHandPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position 30cm offset from the left hand in avatar coordinates if it's being \r    positioned by controllers, otherwise {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "leftHandTipPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position 30cm offset from the right hand in avatar coordinates if it's being\r    positioned by controllers, otherwise {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "rightHandTipPosition"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the left hand as determined by the hand controllers. <em>Read-only.</em>",
                "name": "leftHandPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose right hand position as determined by the hand controllers. <em>Read-only.</em>",
                "name": "rightHandPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the left hand as determined by the hand controllers, with the position \r    by 30cm. <em>Read-only.</em>",
                "name": "leftHandTipPose"
            },
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The pose of the right hand as determined by the hand controllers, with the position\r    by 30cm. <em>Read-only.</em>",
                "name": "rightHandTipPose"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then the avatar hips are placed according to the center of\r    gravity model that balance the center of gravity over the base of support of the feet.  Setting the value <code>false</code> \r    will result in the default behaviour where the hips are placed under the head.",
                "name": "centerOfGravityModelEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then the avatar is re-centered to be under the \r    head's position. In room-scale VR, this behavior is what causes your avatar to follow your HMD as you walk around \r    the room. Setting the value <code>false</code> is useful if you want to pin the avatar to a fixed position.",
                "name": "hmdLeanRecenterEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to <code>true</code> to enable collisions for the avatar, <code>false</code> \r    to disable collisions. May return <code>true</code> even though the value was set <code>false</code> because the \r    zone may disallow collisionless avatars.",
                "name": "collisionsEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Synonym of <code>collisionsEnabled</code>. \r    <strong>Deprecated:</strong> Use <code>collisionsEnabled</code> instead.",
                "name": "characterControllerEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Returns and sets the value of the Interface setting, Settings > \r    Walking and teleporting. Note: Setting the value has no effect unless Interface is restarted.",
                "name": "useAdvancedMovementControls"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Returns and sets the value of the Interface setting, Settings > Show room boundaries \r    while teleporting. Note: Setting the value has no effect unless Interface is restarted.",
                "name": "showPlayArea"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 75,
                "name": "yawSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "name": "pitchSpeed"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the roll angle of your HMD turns your avatar \r    while flying.",
                "name": "hmdRollControlEnabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 8,
                "description": "The amount of HMD roll, in degrees, required before your avatar turns if \r   <code>hmdRollControlEnabled</code> is enabled.",
                "name": "hmdRollControlDeadZone"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If hmdRollControlEnabled is true, this value determines the maximum turn rate of\r    your avatar when rolling your HMD in degrees per second.",
                "name": "hmdRollControlRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.75,
                "description": "The height of the user in sensor space.",
                "name": "userHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.65,
                "description": "The estimated height of the user's eyes in sensor space. <em>Read-only.</em>",
                "name": "userEyeHeight"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "UUID representing \"my avatar\". Only use for local-only entities and overlays in situations \r    where MyAvatar.sessionUUID is not available (e.g., if not connected to a domain). Note: Likely to be deprecated. \r    <em>Read-only.</em>",
                "name": "SELF_ID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "walkSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "walkBackwardSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sprintSpeed"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Can be used to apply a translation offset between the avatar's position and the\r    registration point of the 3D model.",
                "name": "skeletonOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Returns the clamped scale of the avatar.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "handPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation left or right about an axis running from the head to the feet of the avatar. \r    Yaw is sometimes called \"heading\".",
                "name": "bodyYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from shoulder to shoulder of the avatar. Pitch is \r    sometimes called \"elevation\".",
                "name": "bodyPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the chest to the back of the avatar. Roll is \r    sometimes called \"bank\".",
                "name": "bodyRoll"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the avatar's head.",
                "name": "headOrientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from ear to ear of the avatar's head. Pitch is \r    sometimes called \"elevation\".",
                "name": "headPitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation left or right about an axis running from the base to the crown of the avatar's \r    head. Yaw is sometimes called \"heading\".",
                "name": "headYaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation about an axis running from the nose to the back of the avatar's head. Roll is \r    sometimes called \"bank\".",
                "name": "headRoll"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "audioLoudness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "audioAverageLoudness"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "displayName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Sanitized, defaulted version displayName that is defined by the AvatarMixer \r    rather than by Interface clients. The result is unique among all avatars present at the time.",
                "name": "sessionDisplayName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "lookAtSnappingEnabled"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "skeletonModelURL"
            },
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "name": "attachmentData"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The list of joints in the current avatar model. <em>Read-only.</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sensorToWorldMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "controllerLeftHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "controllerRightHandMatrix"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sensorToWorldScale"
            }
        ],
        "longname": "MyAvatar",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "resetSensorsAndBody",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.resetSensorsAndBody",
        "scope": "static"
    },
    {
        "description": "Moves and orients the avatar, such that it is directly underneath the HMD, with toes pointed forward.",
        "kind": "function",
        "name": "centerBody",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.centerBody",
        "scope": "static"
    },
    {
        "description": "The internal inverse-kinematics system maintains a record of which joints are \"locked\". Sometimes it is useful to forget this history, to prevent\rcontorted joints.",
        "kind": "function",
        "name": "clearIKJointLimitHistory",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearIKJointLimitHistory",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setOrientationVar",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "newOrientationVar"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setOrientationVar",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOrientationVar",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getOrientationVar",
        "scope": "static"
    },
    {
        "description": "Get the position in world coordinates of the point directly between your avatar's eyes assuming your avatar was in its\rdefault pose. This is a reference position; it does not change as your avatar's head moves relative to the avatar \rposition.",
        "kind": "function",
        "name": "getDefaultEyePosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Default position between your avatar's eyes in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report your avatar's default eye position.</caption>\rvar defaultEyePosition = MyAvatar.getDefaultEyePosition();\rprint(JSON.stringify(defaultEyePosition));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultEyePosition",
        "scope": "static"
    },
    {
        "description": "The avatar animation system includes a set of default animations along with rules for how those animations are blended\rtogether with procedural data (such as look at vectors, hand sensors etc.). overrideAnimation() is used to completely\roverride all motion from the default animation system (including inverse kinematics for hand and head controllers) and\rplay a set of specified animations. To end these animations and restore the default animations, use \r{@link MyAvatar.restoreAnimation}.<br />\r<p>Note: When using pre-built animation data, it's critical that the joint orientation of the source animation and target \rrig are equivalent, since the animation data applies absolute values onto the joints. If the orientations are different, \rthe avatar will move in unpredictable ways. For more information about avatar joint orientation standards, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.</p>",
        "kind": "function",
        "name": "overrideAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files need to be .FBX format, but only need to contain the \ravatar skeleton and animation data.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to true if the animation should loop.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should start at.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should end at.",
                "name": "lastFrame"
            }
        ],
        "examples": [
            "<caption> Play a clapping animation on your avatar for three seconds. </caption>\r// Clap your hands for 3 seconds then restore animation back to the avatar.\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreAnimation();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideAnimation",
        "scope": "static"
    },
    {
        "description": "The avatar animation system includes a set of default animations along with rules for how those animations are blended together with\rprocedural data (such as look at vectors, hand sensors etc.). Playing your own custom animations will override the default animations.\rrestoreAnimation() is used to restore all motion from the default animation system including inverse kinematics for hand and head\rcontrollers. If you aren't currently playing an override animation, this function will have no effect.",
        "kind": "function",
        "name": "restoreAnimation",
        "examples": [
            "<caption> Play a clapping animation on your avatar for three seconds. </caption>\r// Clap your hands for 3 seconds then restore animation back to the avatar.\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideAnimation(ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreAnimation();\r}, 3000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreAnimation",
        "scope": "static"
    },
    {
        "description": "Each avatar has an avatar-animation.json file that defines which animations are used and how they are blended together with procedural data\r(such as look at vectors, hand sensors etc.). Each animation specified in the avatar-animation.json file is known as an animation role.\rAnimation roles map to easily understandable actions that the avatar can perform, such as \"idleStand\", \"idleTalk\", or \"walkFwd.\"\rgetAnimationRoles() is used get the list of animation roles defined in the avatar-animation.json.",
        "kind": "function",
        "name": "getAnimationRoles",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array of role strings."
            }
        ],
        "examples": [
            "<caption>Print the list of animation roles defined in the avatar's avatar-animation.json file to the debug log.</caption>\rvar roles = MyAvatar.getAnimationRoles();\rprint(\"Animation Roles:\");\rfor (var i = 0; i < roles.length; i++) {\r    print(roles[i]);\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimationRoles",
        "scope": "static"
    },
    {
        "description": "Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily understandable actions\rthat the avatar can perform, such as \"idleStand\", \"idleTalk\", or \"walkFwd\". To get the full list of roles, use getAnimationRoles().\rFor each role, the avatar-animation.json defines when the animation is used, the animation clip (.FBX) used, and how animations are blended\rtogether with procedural data (such as look at vectors, hand sensors etc.).\roverrideRoleAnimation() is used to change the animation clip (.FBX) associated with a specified animation role. To end \rthe animations and restore the default animations, use {@link MyAvatar.restoreRoleAnimation}.<br />\r<p>Note: Hand roles only affect the hand. Other 'main' roles, like 'idleStand', 'idleTalk', 'takeoffStand' are full body.</p>\r<p>Note: When using pre-built animation data, it's critical that the joint orientation of the source animation and target\rrig are equivalent, since the animation data applies absolute values onto the joints. If the orientations are different,\rthe avatar will move in unpredictable ways. For more information about avatar joint orientation standards, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "overrideRoleAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation role to override",
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to the animation file. Animation files need to be .FBX format, but only need to contain the avatar skeleton and animation data.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frames per second (FPS) rate for the animation playback. 30 FPS is normal speed.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to true if the animation should loop",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should start at",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The frame the animation should end at",
                "name": "lastFrame"
            }
        ],
        "examples": [
            "<caption>The default avatar-animation.json defines an \"idleStand\" animation role. This role specifies that when the avatar is not moving,\ran animation clip of the avatar idling with hands hanging at its side will be used. It also specifies that when the avatar moves, the animation\rwill smoothly blend to the walking animation used by the \"walkFwd\" animation role.\rIn this example, the \"idleStand\" role animation clip has been replaced with a clapping animation clip. Now instead of standing with its arms\rhanging at its sides when it is not moving, the avatar will stand and clap its hands. Note that just as it did before, as soon as the avatar\rstarts to move, the animation will smoothly blend into the walk animation used by the \"walkFwd\" animation role.</caption>\r// An animation of the avatar clapping its hands while standing. Restore default after 30s.\rvar ANIM_URL = \"https://s3.amazonaws.com/hifi-public/animations/ClapAnimations/ClapHands_Standing.fbx\";\rMyAvatar.overrideRoleAnimation(\"idleStand\", ANIM_URL, 30, true, 0, 53);\rScript.setTimeout(function () {\r    MyAvatar.restoreRoleAnimation();\r}, 30000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.overrideRoleAnimation",
        "scope": "static"
    },
    {
        "description": "Each avatar has an avatar-animation.json file that defines a set of animation roles. Animation roles map to easily understandable actions that\rthe avatar can perform, such as \"idleStand\", \"idleTalk\", or \"walkFwd\". To get the full list of roles, use getAnimationRoles(). For each role,\rthe avatar-animation.json defines when the animation is used, the animation clip (.FBX) used, and how animations are blended together with\rprocedural data (such as look at vectors, hand sensors etc.). You can change the animation clip (.FBX) associated with a specified animation\rrole using overrideRoleAnimation().\rrestoreRoleAnimation() is used to restore a specified animation role's default animation clip. If you have not specified an override animation\rfor the specified role, this function will have no effect.",
        "kind": "function",
        "name": "restoreRoleAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The animation role clip to restore.",
                "name": "role"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restoreRoleAnimation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "removeAnimationStateHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "handler"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.removeAnimationStateHandler",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSnapTurn",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSnapTurn",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSnapTurn",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "on"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSnapTurn",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setDominantHand",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "hand"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setDominantHand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDominantHand",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDominantHand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setCenterOfGravityModelEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setCenterOfGravityModelEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getCenterOfGravityModelEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCenterOfGravityModelEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setHMDLeanRecenterEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHMDLeanRecenterEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHMDLeanRecenterEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHMDLeanRecenterEnabled",
        "scope": "static"
    },
    {
        "description": "Request to enable hand touch effect globally",
        "kind": "function",
        "name": "requestEnableHandTouch",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.requestEnableHandTouch",
        "scope": "static"
    },
    {
        "description": "Request to disable hand touch effect globally",
        "kind": "function",
        "name": "requestDisableHandTouch",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.requestDisableHandTouch",
        "scope": "static"
    },
    {
        "description": "Disables hand touch effect on a specific entity",
        "kind": "function",
        "name": "disableHandTouchForID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "ID of the entity that will disable hand touch effect",
                "name": "entityID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.disableHandTouchForID",
        "scope": "static"
    },
    {
        "description": "Enables hand touch effect on a specific entity",
        "kind": "function",
        "name": "enableHandTouchForID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "ID of the entity that will enable hand touch effect",
                "name": "entityID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.enableHandTouchForID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getRawDriveKey",
        "params": [
            {
                "type": {
                    "names": [
                        "DriveKeys"
                    ]
                },
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRawDriveKey",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "disableDriveKey",
        "params": [
            {
                "type": {
                    "names": [
                        "DriveKeys"
                    ]
                },
                "name": "key"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.disableDriveKey",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "enableDriveKey",
        "params": [
            {
                "type": {
                    "names": [
                        "DriveKeys"
                    ]
                },
                "name": "key"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.enableDriveKey",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isDriveKeyDisabled",
        "params": [
            {
                "type": {
                    "names": [
                        "DriveKeys"
                    ]
                },
                "name": "key"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isDriveKeyDisabled",
        "scope": "static"
    },
    {
        "description": "Recenter the avatar in the vertical direction, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is \r<code>false</code>.",
        "kind": "function",
        "name": "triggerVerticalRecenter",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.triggerVerticalRecenter",
        "scope": "static"
    },
    {
        "description": "Recenter the avatar's rotation, if <code>{@link MyAvatar|MyAvatar.hmdLeanRecenterEnabled}</code> is <code>false</code>.",
        "kind": "function",
        "name": "triggerRotationRecenter",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.triggerRotationRecenter",
        "scope": "static"
    },
    {
        "description": "The isRecenteringHorizontally function returns true if MyAvatar\ris translating the root of the Avatar to keep the center of gravity under the head.\risActive(Horizontal) is returned.",
        "kind": "function",
        "name": "isRecenteringHorizontally",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isRecenteringHorizontally",
        "scope": "static"
    },
    {
        "description": "Get the current position of the avatar's \"Head\" joint.",
        "kind": "function",
        "name": "getHeadPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current position of the avatar's \"Head\" joint."
            }
        ],
        "examples": [
            "<caption>Report the current position of your avatar's head.</caption>\rprint(JSON.stringify(MyAvatar.getHeadPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHeadFinalYaw",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadFinalYaw",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHeadFinalRoll",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadFinalRoll",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHeadFinalPitch",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadFinalPitch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHeadDeltaPitch",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeadDeltaPitch",
        "scope": "static"
    },
    {
        "description": "Get the current position of the point directly between the avatar's eyes.",
        "kind": "function",
        "name": "getEyePosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current position of the point directly between the avatar's eyes."
            }
        ],
        "examples": [
            "<caption>Report your avatar's current eye position.</caption>\rvar eyePosition = MyAvatar.getEyePosition();\rprint(JSON.stringify(eyePosition));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEyePosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTargetAvatarPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar you're currently looking at."
            }
        ],
        "examples": [
            "<caption>Report the position of the avatar you're currently looking at.</caption>\rprint(JSON.stringify(MyAvatar.getTargetAvatarPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getTargetAvatarPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTargetAvatar",
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarData"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getTargetAvatar",
        "scope": "static"
    },
    {
        "description": "Get the position of the avatar's left hand as positioned by a hand controller (e.g., Oculus Touch or Vive).<br />\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.)</p>",
        "kind": "function",
        "name": "getLeftHandPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the left hand in avatar coordinates if positioned by a hand controller, otherwise \r    <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "examples": [
            "<caption>Report the position of your left hand relative to your avatar.</caption>\rprint(JSON.stringify(MyAvatar.getLeftHandPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandPosition",
        "scope": "static"
    },
    {
        "description": "Get the position of the avatar's right hand as positioned by a hand controller (e.g., Oculus Touch or Vive).<br />\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.)</p>",
        "kind": "function",
        "name": "getRightHandPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the right hand in avatar coordinates if positioned by a hand controller, otherwise \r    <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "examples": [
            "<caption>Report the position of your right hand relative to your avatar.</caption>\rprint(JSON.stringify(MyAvatar.getLeftHandPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLeftHandTipPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandTipPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getRightHandTipPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandTipPosition",
        "scope": "static"
    },
    {
        "description": "Get the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand as positioned by a \rhand controller (e.g., Oculus Touch or Vive).<br />\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.) If you are using the Leap Motion, the return value's <code>valid</code> property will be \r<code>false</code> and any pose values returned will not be meaningful.</p>",
        "kind": "function",
        "name": "getLeftHandPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the pose of your avatar's left hand.</caption>\rprint(JSON.stringify(MyAvatar.getLeftHandPose()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandPose",
        "scope": "static"
    },
    {
        "description": "Get the pose (position, rotation, velocity, and angular velocity) of the avatar's left hand as positioned by a \rhand controller (e.g., Oculus Touch or Vive).<br />\r<p>Note: The Leap Motion isn't part of the hand controller input system. (Instead, it manipulates the avatar's joints \rfor hand animation.) If you are using the Leap Motion, the return value's <code>valid</code> property will be \r<code>false</code> and any pose values returned will not be meaningful.</p>",
        "kind": "function",
        "name": "getRightHandPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the pose of your avatar's right hand.</caption>\rprint(JSON.stringify(MyAvatar.getRightHandPose()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandPose",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLeftHandTipPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftHandTipPose",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getRightHandTipPose",
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightHandTipPose",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "worldToJointPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.worldToJointPoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "worldToJointDirection",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.worldToJointDirection",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "worldToJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.worldToJointRotation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "jointToWorldPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.jointToWorldPoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "jointToWorldDirection",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.jointToWorldDirection",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "jointToWorldRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.jointToWorldRotation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "pinJoint",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.pinJoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearPinOnJoint",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearPinOnJoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getIKErrorOnLastSolve",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getIKErrorOnLastSolve",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "useFullAvatarURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "fullAvatarURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "modelName"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.useFullAvatarURL",
        "scope": "static"
    },
    {
        "description": "Get the complete URL for the current avatar.",
        "kind": "function",
        "name": "getFullAvatarURLFromPreferences",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The full avatar model name."
            }
        ],
        "examples": [
            "<caption>Report the URL for the current avatar.</caption>\rprint(MyAvatar.getFullAvatarURLFromPreferences());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFullAvatarURLFromPreferences",
        "scope": "static"
    },
    {
        "description": "Get the full avatar model name for the current avatar.",
        "kind": "function",
        "name": "getFullAvatarModelName",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The full avatar model name."
            }
        ],
        "examples": [
            "<caption>Report the current full avatar model name.</caption>\rprint(MyAvatar.getFullAvatarModelName());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFullAvatarModelName",
        "scope": "static"
    },
    {
        "description": "Function returns list of avatar entities",
        "kind": "function",
        "name": "getAvatarEntitiesVariant()",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAvatarEntitiesVariant()",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isFlying",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isFlying",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isInAir",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isInAir",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setFlyingEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setFlyingEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFlyingEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlyingEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setFlyingDesktopPref",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setFlyingDesktopPref",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFlyingDesktopPref",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlyingDesktopPref",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setFlyingDesktopPref",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setFlyingDesktopPref",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFlyingDesktopPref",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getFlyingDesktopPref",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAvatarScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAvatarScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAvatarScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setCollisionsEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setCollisionsEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getCollisionsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCollisionsEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getCollisionCapsule",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCollisionCapsule",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setCharacterControllerEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "deprecated": true,
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setCharacterControllerEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getCharacterControllerEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "deprecated": true,
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getCharacterControllerEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "direction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isUp",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isDown",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "direction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isDown",
        "scope": "static"
    },
    {
        "description": "Increase the avatar's scale by five percent, up to a minimum scale of <code>1000</code>.",
        "kind": "function",
        "name": "increaseSize",
        "examples": [
            "<caption>Reset your avatar's size to default then grow it 5 times.</caption>\rMyAvatar.resetSize();\r\rfor (var i = 0; i < 5; i++){\r    print (\"Growing by 5 percent\");\r    MyAvatar.increaseSize();\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.increaseSize",
        "scope": "static"
    },
    {
        "description": "Decrease the avatar's scale by five percent, down to a minimum scale of <code>0.25</code>.",
        "kind": "function",
        "name": "decreaseSize",
        "examples": [
            "<caption>Reset your avatar's size to default then shrink it 5 times.</caption>\rMyAvatar.resetSize();\r\rfor (var i = 0; i < 5; i++){\r    print (\"Shrinking by 5 percent\");\r    MyAvatar.decreaseSize();\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.decreaseSize",
        "scope": "static"
    },
    {
        "description": "Reset the avatar's scale back to the default scale of <code>1.0</code>.",
        "kind": "function",
        "name": "resetSize",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.resetSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "animGraphLoaded",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.animGraphLoaded",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setGravity",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "gravity"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setGravity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getGravity",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getGravity",
        "scope": "static"
    },
    {
        "description": "Move the avatar to a new position and/or orientation in the domain, while taking into account Avatar leg-length.",
        "kind": "function",
        "name": "goToFeetLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The new position for the avatar, in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to set the orientation of the avatar.",
                "name": "hasOrientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The new orientation for the avatar.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to position the avatar a short distance away from\r     the new position and orientate the avatar to face the position.",
                "name": "shouldFaceLocation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToFeetLocation",
        "scope": "static"
    },
    {
        "description": "Move the avatar to a new position and/or orientation in the domain.",
        "kind": "function",
        "name": "goToLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The new position for the avatar, in world coordinates.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to set the orientation of the avatar.",
                "name": "hasOrientation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The new orientation for the avatar.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Set to <code>true</code> to position the avatar a short distance away from",
                "name": "shouldFaceLocation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Set to <code>false</code> MyAvatar::safeLanding will not be called (used when teleporting).\r    the new position and orientate the avatar to face the position.",
                "name": "withSafeLanding"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToLocation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "goToLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToLocation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "goToLocationAndEnableCollisions",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.goToLocationAndEnableCollisions",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "safeLanding",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.safeLanding",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "restrictScaleFromDomainSettings",
        "params": [
            {
                "type": {
                    "names": [
                        "objecct"
                    ]
                },
                "name": "domainSettingsObject"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.restrictScaleFromDomainSettings",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearScaleRestriction",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearScaleRestriction",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "addThrust",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "thrust"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.addThrust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getThrust",
        "returns": [
            {
                "type": {
                    "names": [
                        "vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getThrust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setThrust",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "thrust"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setThrust",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateMotionBehaviorFromMenu",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.updateMotionBehaviorFromMenu",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setToggleHips",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setToggleHips",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawBaseOfSupport",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawBaseOfSupport",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawDefaultPose",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawDefaultPose",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawAnimPose",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawAnimPose",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawHandControllers",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawHandControllers",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawSensorToWorldMatrix",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawSensorToWorldMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawIKTargets",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawIKTargets",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawIKConstraints",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawIKConstraints",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawIKChains",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawIKChains",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableDebugDrawDetailedCollision",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableDebugDrawDetailedCollision",
        "scope": "static"
    },
    {
        "description": "Get whether or not your avatar mesh is visible.",
        "kind": "function",
        "name": "getEnableMeshVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if your avatar's mesh is visible, otherwise <code>false</code>."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEnableMeshVisible",
        "scope": "static"
    },
    {
        "description": "Set whether or not your avatar mesh is visible.",
        "kind": "function",
        "name": "setEnableMeshVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to set your avatar mesh visible; <code>false</code> to set it invisible.",
                "name": "visible"
            }
        ],
        "examples": [
            "<caption>Make your avatar invisible for 10s.</caption>\rMyAvatar.setEnableMeshVisible(false);\rScript.setTimeout(function () {\r    MyAvatar.setEnableMeshVisible(true);\r}, 10000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableMeshVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setEnableInverseKinematics",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setEnableInverseKinematics",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAnimGraphOverrideUrl",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimGraphOverrideUrl",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAnimGraphOverrideUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAnimGraphOverrideUrl",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAnimGraphUrl",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAnimGraphUrl",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAnimGraphUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAnimGraphUrl",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPositionForAudio",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getPositionForAudio",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOrientationForAudio",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getOrientationForAudio",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setModelScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setModelScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "audioListenerModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.audioListenerModeChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "transformChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.transformChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "newCollisionSoundURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.newCollisionSoundURL",
        "scope": "static"
    },
    {
        "description": "Triggered when the avatar collides with an entity.",
        "kind": "function",
        "name": "collisionWithEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Collision"
                    ]
                },
                "name": "collision"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report each time your avatar collides with an entity.</caption>\rMyAvatar.collisionWithEntity.connect(function (collision) {\r    print(\"Your avatar collided with an entity.\");\r});"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.collisionWithEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when collisions with avatar enabled or disabled",
        "kind": "function",
        "name": "collisionsEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.collisionsEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when avatar's animation url changes",
        "kind": "function",
        "name": "animGraphUrlChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "url"
                    ]
                },
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.animGraphUrlChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "energyChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "energy"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.energyChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "positionGoneTo",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.positionGoneTo",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onLoadComplete",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.onLoadComplete",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "wentAway",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.wentAway",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "wentActive",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.wentActive",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "skeletonChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.skeletonChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dominantHandChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "hand"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.dominantHandChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sensorToWorldScaleChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sensorToWorldScaleChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "attachmentsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.attachmentsChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scaleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.scaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when hand touch is globally enabled or disabled",
        "kind": "function",
        "name": "shouldDisableHandTouchChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "shouldDisable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.shouldDisableHandTouchChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when hand touch is enabled or disabled for an specific entity",
        "kind": "function",
        "name": "disableHandTouchForIDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "ID of the entity that will enable hand touch effect",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "disable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.disableHandTouchForIDChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The FaceTracker API helps manage facial tracking hardware.",
        "kind": "namespace",
        "name": "FaceTracker",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "FaceTracker",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "memberof": "FaceTracker",
        "longname": "FaceTracker.setEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "calibrate",
        "memberof": "FaceTracker",
        "longname": "FaceTracker.calibrate",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>Synonym for {@link Pointers} as used for laser pointers.",
        "kind": "namespace",
        "name": "LaserPointers",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "LaserPointers",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "createLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "Pointers.LaserPointerProperties"
                    ]
                },
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.createLaserPointer",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "enableLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.enableLaserPointer",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "disableLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.disableLaserPointer",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "removeLaserPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.removeLaserPointer",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "editRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerRenderState"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.editRenderState",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setRenderState",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPrevRayPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult"
                    ]
                }
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.getPrevRayPickResult",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "precisionPicking"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setPrecisionPicking",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setLaserLength",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "laserLength"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setLaserLength",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "name": "ignoreItems"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setIgnoreItems",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "name": "includeItems"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setIncludeItems",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setLockEndUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "itemID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isOverlay"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "optional": true,
                "name": "offsetMat"
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.setLockEndUUID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.isLeftHand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.isRightHand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "LaserPointers",
        "longname": "LaserPointers.isMouse",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Picks.createPick} to create a new Ray Pick.",
        "kind": "typedef",
        "name": "RayPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pick should start enabled or not.  Disabled Picks do not updated their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Picks.PICK_NOTHING",
                "description": "The filter for this Pick to use, constructed using filter flags combined using bitwise OR.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The max distance at which this Pick will intersect.  0.0 = no max.  < 0.0 is invalid.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the parent, either an avatar, an entity, an overlay, or a pick.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The joint of the parent to parent to, for example, the joints on the model of an avatar. (default = 0, no joint)",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "If \"Mouse,\" parents the pick to the mouse. If \"Avatar,\" parents the pick to MyAvatar's head. Otherwise, parents to the joint of the given name on MyAvatar.",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "Only for Joint Ray Picks.  A local joint position offset, in meters.  x = upward, y = forward, z = lateral",
                "name": "posOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.UP",
                "description": "Only for Joint Ray Picks.  A local joint direction offset.  x = upward, y = forward, z = lateral",
                "name": "dirOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Only for Static Ray Picks.  The world-space origin of the ray.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "-Vec3.UP",
                "description": "Only for Static Ray Picks.  The world-space direction of the ray.",
                "name": "direction"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.RayPickProperties",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Picks.createPick} to create a new Stylus Pick.",
        "kind": "typedef",
        "name": "StylusPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "description": "An integer.  0 == left, 1 == right.  Invalid otherwise.",
                "name": "hand"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pick should start enabled or not.  Disabled Picks do not updated their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Picks.PICK_NOTHING",
                "description": "The filter for this Pick to use, constructed using filter flags combined using bitwise OR.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The max distance at which this Pick will intersect.  0.0 = no max.  < 0.0 is invalid.",
                "name": "maxDistance"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.StylusPickProperties",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Picks.createPick} to create a new Parabola Pick.",
        "kind": "typedef",
        "name": "ParabolaPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pick should start enabled or not.  Disabled Picks do not updated their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Picks.PICK_NOTHING",
                "description": "The filter for this Pick to use, constructed using filter flags combined using bitwise OR.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The max distance at which this Pick will intersect.  0.0 = no max.  < 0.0 is invalid.",
                "name": "maxDistance"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the parent, either an avatar, an entity, an overlay, or a pick.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The joint of the parent to parent to, for example, the joints on the model of an avatar. (default = 0, no joint)",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "If \"Mouse,\" parents the pick to the mouse. If \"Avatar,\" parents the pick to MyAvatar's head. Otherwise, parents to the joint of the given name on MyAvatar.",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "Only for Joint Parabola Picks.  A local joint position offset, in meters.  x = upward, y = forward, z = lateral",
                "name": "posOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.UP",
                "description": "Only for Joint Parabola Picks.  A local joint direction offset.  x = upward, y = forward, z = lateral",
                "name": "dirOffset"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "description": "Only for Static Parabola Picks.  The world-space origin of the parabola segment.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "-Vec3.FRONT",
                "description": "Only for Static Parabola Picks.  The world-space direction of the parabola segment.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 1,
                "description": "The initial speed of the parabola, i.e. the initial speed of the projectile whose trajectory defines the parabola.",
                "name": "speed"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "-Vec3.UP",
                "description": "The acceleration of the parabola, i.e. the acceleration of the projectile whose trajectory defines the parabola, both magnitude and direction.",
                "name": "accelerationAxis"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "Whether or not the acceleration axis should rotate with the avatar's local Y axis.",
                "name": "rotateAccelerationWithAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the acceleration axis should rotate with the parent's local Y axis, if available.",
                "name": "rotateAccelerationWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If true, the velocity and acceleration of the Pick will scale linearly with the parent, if available. scaleWithAvatar is an alias but is deprecated.",
                "name": "scaleWithParent"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.ParabolaPickProperties",
        "scope": "static"
    },
    {
        "description": "A Shape defines a physical volume.",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of shape to use. Can be one of the following: \"box\", \"sphere\", \"capsule-x\", \"capsule-y\", \"capsule-z\", \"cylinder-x\", \"cylinder-y\", \"cylinder-z\"",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The size to scale the shape to.",
                "name": "dimensions"
            }
        ],
        "longname": "Shape",
        "scope": "global"
    },
    {
        "description": "A set of properties that can be passed to {@link Picks.createPick} to create a new Collision Pick.",
        "kind": "typedef",
        "name": "CollisionPickProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pick should start enabled or not.  Disabled Picks do not updated their pick results.",
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "Picks.PICK_NOTHING",
                "description": "The filter for this Pick to use, constructed using filter flags combined using bitwise OR.",
                "name": "filter"
            },
            {
                "type": {
                    "names": [
                        "Shape"
                    ]
                },
                "description": "The information about the collision region's size and shape. Dimensions are in world space, but will scale with the parent if defined.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the collision region, relative to a parent if defined.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the collision region, relative to a parent if defined.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "The approximate minimum penetration depth for a test object to be considered in contact with the collision region.\rThe depth is measured in world space, but will scale with the parent if defined.",
                "name": "threshold"
            },
            {
                "type": {
                    "names": [
                        "CollisionMask"
                    ]
                },
                "optional": true,
                "defaultvalue": 8,
                "description": "The type of object this collision pick collides as. Objects whose collision masks overlap with the pick's collision group\rwill be considered colliding with the pick.",
                "name": "collisionGroup"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the parent, either an avatar, an entity, an overlay, or a pick.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The joint of the parent to parent to, for example, the joints on the model of an avatar. (default = 0, no joint)",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "If \"Mouse,\" parents the pick to the mouse. If \"Avatar,\" parents the pick to MyAvatar's head. Otherwise, parents to the joint of the given name on MyAvatar.",
                "name": "joint"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If true, the collision pick's dimensions and threshold will adjust according to the scale of the parent.",
                "name": "scaleWithParent"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.CollisionPickProperties",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Picks API lets you create and manage objects for repeatedly calculating intersections in different ways.",
        "kind": "namespace",
        "name": "Picks",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Don't intersect with anything. <em>Read-only.</em>",
                "name": "PICK_NOTHING"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Include entities when intersecting. <em>Read-only.</em>",
                "name": "PICK_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Include overlays when intersecting. <em>Read-only.</em>",
                "name": "PICK_OVERLAYS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Include avatars when intersecting. <em>Read-only.</em>",
                "name": "PICK_AVATARS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Include the HUD sphere when intersecting in HMD mode. <em>Read-only.</em>",
                "name": "PICK_HUD"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Pick against coarse meshes, instead of exact meshes. <em>Read-only.</em>",
                "name": "PICK_COARSE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Include invisible objects when intersecting. <em>Read-only.</em>",
                "name": "PICK_INCLUDE_INVISIBLE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "A filter flag. Include non-collidable objects when intersecting. \r    <em>Read-only.</em>",
                "name": "PICK_INCLUDE_NONCOLLIDABLE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_ALL_INTERSECTIONS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type. Intersected nothing with the given filter flags. \r    <em>Read-only.</em>",
                "name": "INTERSECTED_NONE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type. Intersected an entity. <em>Read-only.</em>",
                "name": "INTERSECTED_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type. Intersected an overlay. <em>Read-only.</em>",
                "name": "INTERSECTED_OVERLAY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type. Intersected an avatar. <em>Read-only.</em>",
                "name": "INTERSECTED_AVATAR"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An intersection type. Intersected the HUD sphere. <em>Read-only.</em>",
                "name": "INTERSECTED_HUD"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The max number of usec to spend per frame updating Pick results. <em>Read-only.</em>",
                "name": "perFrameTimeBudget"
            }
        ],
        "longname": "Picks",
        "scope": "global"
    },
    {
        "description": "Adds a new Pick.\rDifferent {@link PickType}s use different properties, and within one PickType, the properties you choose can lead to a wide range of behaviors.  For example,\r  with PickType.Ray, depending on which optional parameters you pass, you could create a Static Ray Pick, a Mouse Ray Pick, or a Joint Ray Pick.",
        "kind": "function",
        "name": "createPick",
        "params": [
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "A PickType that specifies the method of picking to use",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Picks.RayPickProperties",
                        "Picks.StylusPickProperties",
                        "Picks.ParabolaPickProperties",
                        "Picks.CollisionPickProperties"
                    ]
                },
                "description": "A PickProperties object, containing all the properties for initializing this Pick",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the created Pick.  Used for managing the Pick.  0 if invalid."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.createPick",
        "scope": "static"
    },
    {
        "description": "Enables a Pick.",
        "kind": "function",
        "name": "enablePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.enablePick",
        "scope": "static"
    },
    {
        "description": "Disables a Pick.",
        "kind": "function",
        "name": "disablePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.disablePick",
        "scope": "static"
    },
    {
        "description": "Removes a Pick.",
        "kind": "function",
        "name": "removePick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.removePick",
        "scope": "static"
    },
    {
        "description": "An intersection result for a Ray Pick.",
        "kind": "typedef",
        "name": "RayPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If there was a valid intersection (type != INTERSECTED_NONE)",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object.  Uuid.NULL for the HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance to the intersection point from the origin of the ray.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world-space.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point.  All NANs if type == INTERSECTED_HUD.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Variant"
                    ]
                },
                "description": "Additional intersection details when available for Model objects.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay that was used.  Valid even if there was no intersection.",
                "name": "searchRay"
            }
        ],
        "longname": "RayPickResult",
        "scope": "global"
    },
    {
        "description": "An intersection result for a Stylus Pick.",
        "kind": "typedef",
        "name": "StylusPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If there was a valid intersection (type != INTERSECTED_NONE)",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object.  Uuid.NULL for the HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance to the intersection point from the origin of the ray.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world-space.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point.  All NANs if type == INTERSECTED_HUD.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Variant"
                    ]
                },
                "description": "Additional intersection details when available for Model objects.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "StylusTip"
                    ]
                },
                "description": "The StylusTip that was used.  Valid even if there was no intersection.",
                "name": "stylusTip"
            }
        ],
        "longname": "StylusPickResult",
        "scope": "global"
    },
    {
        "description": "An intersection result for a Parabola Pick.",
        "kind": "typedef",
        "name": "ParabolaPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The intersection type.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If there was a valid intersection (type != INTERSECTED_NONE)",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the intersected object.  Uuid.NULL for the HUD or invalid intersections.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance to the intersection point from the origin of the parabola, not along the parabola.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance to the intersection point from the origin of the parabola, along the parabola.",
                "name": "parabolicDistance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point in world-space.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersected point.  All NANs if type == INTERSECTED_HUD.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Variant"
                    ]
                },
                "description": "Additional intersection details when available for Model objects.",
                "name": "extraInfo"
            },
            {
                "type": {
                    "names": [
                        "PickParabola"
                    ]
                },
                "description": "The PickParabola that was used.  Valid even if there was no intersection.",
                "name": "parabola"
            }
        ],
        "longname": "ParabolaPickResult",
        "scope": "global"
    },
    {
        "description": "An intersection result for a Collision Pick.",
        "kind": "typedef",
        "name": "CollisionPickResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If there was at least one valid intersection (intersectingObjects.length > 0)",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Array.<IntersectingObject>"
                    ]
                },
                "description": "The collision information of each object which intersect with the CollisionRegion.",
                "name": "intersectingObjects"
            },
            {
                "type": {
                    "names": [
                        "CollisionRegion"
                    ]
                },
                "description": "The CollisionRegion that was used. Valid even if there was no intersection.",
                "name": "collisionRegion"
            }
        ],
        "longname": "CollisionPickResult",
        "scope": "global"
    },
    {
        "description": "Information about the Collision Pick's intersection with an object",
        "kind": "typedef",
        "name": "IntersectingObject",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "QUuid"
                    ]
                },
                "description": "The ID of the object.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The type of the object, either Picks.INTERSECTED_ENTITY() or Picks.INTERSECTED_AVATAR()",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Array.<CollisionContact>"
                    ]
                },
                "description": "Pairs of points representing penetration information between the pick and the object",
                "name": "collisionContacts"
            }
        ],
        "longname": "IntersectingObject",
        "scope": "global"
    },
    {
        "description": "A pair of points that represents part of an overlap between a Collision Pick and an object in the physics engine. Points which are further apart represent deeper overlap",
        "kind": "typedef",
        "name": "CollisionContact",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A point representing a penetration of the object's surface into the volume of the pick, in world space.",
                "name": "pointOnPick"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A point representing a penetration of the pick's surface into the volume of the found object, in world space.",
                "name": "pointOnObject"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normalized vector pointing away from the pick, representing the direction of collision.",
                "name": "normalOnPick"
            }
        ],
        "longname": "CollisionContact",
        "scope": "global"
    },
    {
        "description": "Get the most recent pick result from this Pick.  This will be updated as long as the Pick is enabled.",
        "kind": "function",
        "name": "getPrevPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult",
                        "StylusPickResult",
                        "ParabolaPickResult",
                        "CollisionPickResult"
                    ]
                },
                "description": "The most recent intersection result.  This will be different for different PickTypes."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.getPrevPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not to use precision picking.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Whether or not to use precision picking",
                "name": "precisionPicking"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to ignore during intersection.  Not used by Stylus Picks.",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to include during intersection, instead of intersecting with everything.  Stylus\r  Picks <b>only</b> intersect with objects in their include list.",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Check if a Pick is associated with the left hand.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pick is a Joint Ray or Parabola Pick with joint == \"_CONTROLLER_LEFTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\", or a Stylus Pick with hand == 0."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pick is associated with the right hand.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pick is a Joint Ray or Parabola Pick with joint == \"_CONTROLLER_RIGHTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\", or a Stylus Pick with hand == 1."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isRightHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pick is associated with the system mouse.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pick, as returned by {@link Picks.createPick}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pick is a Mouse Ray or Parabola Pick, false otherwise."
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.isMouse",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_NOTHING",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_NOTHING",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ENTITIES",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_OVERLAYS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_OVERLAYS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_AVATARS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_AVATARS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_HUD",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_HUD",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_COARSE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_COARSE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_INVISIBLE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_INCLUDE_INVISIBLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_NONCOLLIDABLE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_INCLUDE_NONCOLLIDABLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ALL_INTERSECTIONS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.PICK_ALL_INTERSECTIONS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_NONE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_NONE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_ENTITY",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_ENTITY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_OVERLAY",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_OVERLAY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_AVATAR",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_AVATAR",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_HUD",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Picks",
        "longname": "Picks.INTERSECTED_HUD",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Pointers.createPointer} to create a new Pointer.  Contains the relevant {@link Picks.PickProperties} to define the underlying Pick.",
        "kind": "typedef",
        "name": "StylusPointerProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this pointer should generate hover events.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "enabled"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.StylusPointerProperties",
        "scope": "static"
    },
    {
        "description": "A set of properties used to define the visual aspect of a Ray Pointer in the case that the Pointer is not intersecting something.  Same as a {@link Pointers.RayPointerRenderState},\rbut with an additional distance field.",
        "kind": "typedef",
        "name": "DefaultRayPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "augments": [
            "Pointers.RayPointerRenderState"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance at which to render the end of this Ray Pointer, if one is defined.",
                "name": "distance"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.DefaultRayPointerRenderState",
        "scope": "static"
    },
    {
        "description": "A set of properties which define the visual aspect of a Ray Pointer in the case that the Pointer is intersecting something.",
        "kind": "typedef",
        "name": "RayPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "When using {@link Pointers.createPointer}, the name of this render state, used by {@link Pointers.setRenderState} and {@link Pointers.editRenderState}",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "QUuid"
                    ]
                },
                "optional": true,
                "description": "When using {@link Pointers.createPointer}, an optionally defined overlay to represent the beginning of the Ray Pointer,\rusing the properties you would normally pass to {@link Overlays.addOverlay}, plus the type (as a <code>type</code> field).\rWhen returned from {@link Pointers.getPointerProperties}, the ID of the created overlay if it exists, or a null ID otherwise.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "QUuid"
                    ]
                },
                "optional": true,
                "description": "When using {@link Pointers.createPointer}, an optionally defined overlay to represent the path of the Ray Pointer,\rusing the properties you would normally pass to {@link Overlays.addOverlay}, plus the type (as a <code>type</code> field), which <b>must</b> be <code>\"line3d\"</code>.\rWhen returned from {@link Pointers.getPointerProperties}, the ID of the created overlay if it exists, or a null ID otherwise.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "QUuid"
                    ]
                },
                "optional": true,
                "description": "When using {@link Pointers.createPointer}, an optionally defined overlay to represent the end of the Ray Pointer,\rusing the properties you would normally pass to {@link Overlays.addOverlay}, plus the type (as a <code>type</code> field).\rWhen returned from {@link Pointers.getPointerProperties}, the ID of the created overlay if it exists, or a null ID otherwise.",
                "name": "end"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.RayPointerRenderState",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Pointers.createPointer} to create a new Pointer. Contains the relevant {@link Picks.PickProperties} to define the underlying Pick.",
        "kind": "typedef",
        "name": "LaserPointerProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the end of the Pointer will always rotate to face the avatar.",
                "name": "faceAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If false, the end of the Pointer will be moved up by half of its height.",
                "name": "centerEndY"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the end of the Pointer will lock on to the center of the object at which the pointer is pointing.",
                "name": "lockEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the dimensions of the end of the Pointer will scale linearly with distance.",
                "name": "distanceScaleEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the width of the Pointer's path will scale linearly with the pick parent's scale. scaleWithAvatar is an alias but is deprecated.",
                "name": "scaleWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the end of the Pointer will rotate to follow the normal of the intersected surface.",
                "name": "followNormal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The strength of the interpolation between the real normal and the visual normal if followNormal is true. <code>0-1</code>.  If 0 or 1,\rthe normal will follow exactly.",
                "name": "followNormalStrength"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.RayPointerRenderState>",
                        "Object.<string, Pointers.RayPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "A collection of different visual states to switch between.\rWhen using {@link Pointers.createPointer}, a list of RayPointerRenderStates.\rWhen returned from {@link Pointers.getPointerProperties}, a map between render state names and RayPointRenderStates.",
                "name": "renderStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.DefaultRayPointerRenderState>",
                        "Object.<string, Pointers.DefaultRayPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "A collection of different visual states to use if there is no intersection.\rWhen using {@link Pointers.createPointer}, a list of DefaultRayPointerRenderStates.\rWhen returned from {@link Pointers.getPointerProperties}, a map between render state names and DefaultRayPointRenderStates.",
                "name": "defaultRenderStates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pointer should generate hover events.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.Trigger>"
                    ]
                },
                "optional": true,
                "description": "A list of different triggers mechanisms that control this Pointer's click event generation.",
                "name": "triggers"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.LaserPointerProperties",
        "scope": "static"
    },
    {
        "description": "The rendering properties of the parabolic path",
        "kind": "typedef",
        "name": "ParabolaProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the parabola.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The alpha of the parabola.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.01,
                "description": "The width of the parabola, in meters.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "The width of the parabola, in meters.",
                "name": "isVisibleInSecondaryCamera"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the parabola is rendered in front of other items in the scene.",
                "name": "drawInFront"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.ParabolaProperties",
        "scope": "static"
    },
    {
        "description": "A set of properties used to define the visual aspect of a Parabola Pointer in the case that the Pointer is not intersecting something.  Same as a {@link Pointers.ParabolaPointerRenderState},\rbut with an additional distance field.",
        "kind": "typedef",
        "name": "DefaultParabolaPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "augments": [
            "Pointers.ParabolaPointerRenderState"
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance along the parabola at which to render the end of this Parabola Pointer, if one is defined.",
                "name": "distance"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.DefaultParabolaPointerRenderState",
        "scope": "static"
    },
    {
        "description": "A set of properties used to define the visual aspect of a Parabola Pointer in the case that the Pointer is intersecting something.",
        "kind": "typedef",
        "name": "ParabolaPointerRenderState",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "When using {@link Pointers.createPointer}, the name of this render state, used by {@link Pointers.setRenderState} and {@link Pointers.editRenderState}",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "QUuid"
                    ]
                },
                "optional": true,
                "description": "When using {@link Pointers.createPointer}, an optionally defined overlay to represent the beginning of the Parabola Pointer,\rusing the properties you would normally pass to {@link Overlays.addOverlay}, plus the type (as a <code>type</code> field).\rWhen returned from {@link Pointers.getPointerProperties}, the ID of the created overlay if it exists, or a null ID otherwise.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Pointers.ParabolaProperties"
                    ]
                },
                "optional": true,
                "description": "When using {@link Pointers.createPointer}, the optionally defined rendering properties of the parabolic path defined by the Parabola Pointer.\rNot defined in {@link Pointers.getPointerProperties}.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties",
                        "QUuid"
                    ]
                },
                "optional": true,
                "description": "When using {@link Pointers.createPointer}, an optionally defined overlay to represent the end of the Parabola Pointer,\rusing the properties you would normally pass to {@link Overlays.addOverlay}, plus the type (as a <code>type</code> field).\rWhen returned from {@link Pointers.getPointerProperties}, the ID of the created overlay if it exists, or a null ID otherwise.",
                "name": "end"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.ParabolaPointerRenderState",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Pointers.createPointer} to create a new Pointer. Contains the relevant {@link Picks.PickProperties} to define the underlying Pick.",
        "kind": "typedef",
        "name": "ParabolaPointerProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the end of the Pointer will always rotate to face the avatar.",
                "name": "faceAvatar"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If false, the end of the Pointer will be moved up by half of its height.",
                "name": "centerEndY"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the end of the Pointer will lock on to the center of the object at which the pointer is pointing.",
                "name": "lockEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the dimensions of the end of the Pointer will scale linearly with distance.",
                "name": "distanceScaleEnd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If true, the width of the Pointer's path will scale linearly with the pick parent's scale. scaleWithAvatar is an alias but is deprecated.",
                "name": "scaleWithParent"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If true, the end of the Pointer will rotate to follow the normal of the intersected surface.",
                "name": "followNormal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "0.0",
                "description": "The strength of the interpolation between the real normal and the visual normal if followNormal is true. <code>0-1</code>.  If 0 or 1,\rthe normal will follow exactly.",
                "name": "followNormalStrength"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.ParabolaPointerRenderState>",
                        "Object.<string, Pointers.ParabolaPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "A collection of different visual states to switch between.\rWhen using {@link Pointers.createPointer}, a list of ParabolaPointerRenderStates.\rWhen returned from {@link Pointers.getPointerProperties}, a map between render state names and ParabolaPointerRenderStates.",
                "name": "renderStates"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.DefaultParabolaPointerRenderState>",
                        "Object.<string, Pointers.DefaultParabolaPointerRenderState>"
                    ]
                },
                "optional": true,
                "description": "A collection of different visual states to use if there is no intersection.\rWhen using {@link Pointers.createPointer}, a list of DefaultParabolaPointerRenderStates.\rWhen returned from {@link Pointers.getPointerProperties}, a map between render state names and DefaultParabolaPointerRenderStates.",
                "name": "defaultRenderStates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If this Pointer should generate hover events.",
                "name": "hover"
            },
            {
                "type": {
                    "names": [
                        "Array.<Pointers.Trigger>"
                    ]
                },
                "optional": true,
                "description": "A list of different triggers mechanisms that control this Pointer's click event generation.",
                "name": "triggers"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.ParabolaPointerProperties",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Pointers API lets you create and manage objects for repeatedly calculating intersections in different ways, as well as the visual representation of those objects.\r Pointers can also be configured to automatically generate {@link PointerEvent}s on {@link Entities} and {@link Overlays}.",
        "kind": "namespace",
        "name": "Pointers",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Pointers",
        "scope": "global"
    },
    {
        "description": "A trigger mechanism for Ray and Parabola Pointers.",
        "kind": "typedef",
        "name": "Trigger",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Actions",
                        "function"
                    ]
                },
                "description": "This can be a built-in Controller action, like Controller.Standard.LTClick, or a function that evaluates to >= 1.0 when you want to trigger <code>button</code>.",
                "name": "action"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Which button to trigger.  \"Primary\", \"Secondary\", \"Tertiary\", and \"Focus\" are currently supported.  Only \"Primary\" will trigger clicks on web surfaces.  If \"Focus\" is triggered,\rit will try to set the entity or overlay focus to the object at which the Pointer is aimed.  Buttons besides the first three will still trigger events, but event.button will be \"None\".",
                "name": "button"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.Trigger",
        "scope": "static"
    },
    {
        "description": "Adds a new Pointer\rDifferent {@link PickType}s use different properties, and within one PickType, the properties you choose can lead to a wide range of behaviors.  For example,\r  with PickType.Ray, depending on which optional parameters you pass, you could create a Static Ray Pointer, a Mouse Ray Pointer, or a Joint Ray Pointer.",
        "kind": "function",
        "name": "createPointer",
        "params": [
            {
                "type": {
                    "names": [
                        "PickType"
                    ]
                },
                "description": "A PickType that specifies the method of picking to use",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Pointers.LaserPointerProperties",
                        "Pointers.StylusPointerProperties",
                        "Pointers.ParabolaPointerProperties"
                    ]
                },
                "description": "A PointerProperties object, containing all the properties for initializing this Pointer <b>and</b> the {@link Picks.PickProperties} for the Pick that\r  this Pointer will use to do its picking.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the created Pointer.  Used for managing the Pointer.  0 if invalid."
            }
        ],
        "examples": [
            "<caption>Create a left hand Ray Pointer that triggers events on left controller trigger click and changes color when it's intersecting something.</caption>\r\rvar end = {\r    type: \"sphere\",\r    dimensions: {x:0.5, y:0.5, z:0.5},\r    solid: true,\r    color: {red:0, green:255, blue:0},\r    ignoreRayIntersection: true\r};\rvar end2 = {\r    type: \"sphere\",\r    dimensions: {x:0.5, y:0.5, z:0.5},\r    solid: true,\r    color: {red:255, green:0, blue:0},\r    ignoreRayIntersection: true\r};\r\rvar renderStates = [ {name: \"test\", end: end} ];\rvar defaultRenderStates = [ {name: \"test\", distance: 10.0, end: end2} ];\rvar pointer = Pointers.createPointer(PickType.Ray, {\r    joint: \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\",\r    filter: Picks.PICK_OVERLAYS | Picks.PICK_ENTITIES | Picks.PICK_INCLUDE_NONCOLLIDABLE,\r    renderStates: renderStates,\r    defaultRenderStates: defaultRenderStates,\r    distanceScaleEnd: true,\r    triggers: [ {action: Controller.Standard.LTClick, button: \"Focus\"}, {action: Controller.Standard.LTClick, button: \"Primary\"} ],\r    hover: true,\r    enabled: true\r});\rPointers.setRenderState(pointer, \"test\");"
        ],
        "memberof": "Pointers",
        "longname": "Pointers.createPointer",
        "scope": "static"
    },
    {
        "description": "Enables a Pointer.",
        "kind": "function",
        "name": "enablePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.enablePointer",
        "scope": "static"
    },
    {
        "description": "Disables a Pointer.",
        "kind": "function",
        "name": "disablePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.disablePointer",
        "scope": "static"
    },
    {
        "description": "Removes a Pointer.",
        "kind": "function",
        "name": "removePointer",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.removePointer",
        "scope": "static"
    },
    {
        "description": "Edit some visual aspect of a Pointer.  Currently only supported for Ray Pointers.",
        "kind": "function",
        "name": "editRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the render state you want to edit.",
                "name": "renderState"
            },
            {
                "type": {
                    "names": [
                        "Pointers.RayPointerRenderState"
                    ]
                },
                "description": "The new properties for <code>renderStates</code> item.",
                "name": "properties"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.editRenderState",
        "scope": "static"
    },
    {
        "description": "Set the render state of a Pointer.  For Ray Pointers, this means switching between their {@link Pointers.RayPointerRenderState}s, or \"\" to turn off rendering and hover/trigger events.\r For Stylus Pointers, there are three built-in options: \"events on\" (render and send events, the default), \"events off\" (render but don't send events), and \"disabled\" (don't render, don't send events).",
        "kind": "function",
        "name": "setRenderState",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the render state to which you want to switch.",
                "name": "renderState"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setRenderState",
        "scope": "static"
    },
    {
        "description": "Get the most recent pick result from this Pointer.  This will be updated as long as the Pointer is enabled, regardless of the render state.",
        "kind": "function",
        "name": "getPrevPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult",
                        "StylusPickResult"
                    ]
                },
                "description": "The most recent intersection result.  This will be slightly different for different PickTypes."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPrevPickResult",
        "scope": "static"
    },
    {
        "description": "Sets whether or not to use precision picking.",
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Whether or not to use precision picking",
                "name": "precisionPicking"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setPrecisionPicking",
        "scope": "static"
    },
    {
        "description": "Sets the length of this Pointer.  No effect on Stylus Pointers.",
        "kind": "function",
        "name": "setLength",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The desired length of the Pointer.",
                "name": "length"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setLength",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to ignore during intersection.  Not used by Stylus Pointers.",
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to ignore.",
                "name": "ignoreItems"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setIgnoreItems",
        "scope": "static"
    },
    {
        "description": "Sets a list of Entity IDs, Overlay IDs, and/or Avatar IDs to include during intersection, instead of intersecting with everything.  Stylus\r  Pointers <b>only</b> intersect with objects in their include list.",
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "A list of IDs to include.",
                "name": "includeItems"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setIncludeItems",
        "scope": "static"
    },
    {
        "description": "Lock a Pointer onto a specific object (overlay, entity, or avatar).  Optionally, provide an offset in object-space, otherwise the Pointer will lock on to the center of the object.\r  Not used by Stylus Pointers.",
        "kind": "function",
        "name": "setLockEndUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the object to which to lock on.",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "False for entities or avatars, true for overlays",
                "name": "isOverlay"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "optional": true,
                "description": "The offset matrix to use if you do not want to lock on to the center of the object.",
                "name": "offsetMat"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.setLockEndUUID",
        "scope": "static"
    },
    {
        "description": "Check if a Pointer is associated with the left hand.",
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pointer is a Joint Ray Pointer with joint == \"_CONTROLLER_LEFTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_LEFTHAND\", or a Stylus Pointer with hand == 0"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isLeftHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pointer is associated with the right hand.",
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pointer is a Joint Ray Pointer with joint == \"_CONTROLLER_RIGHTHAND\" or \"_CAMERA_RELATIVE_CONTROLLER_RIGHTHAND\", or a Stylus Pointer with hand == 1"
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isRightHand",
        "scope": "static"
    },
    {
        "description": "Check if a Pointer is associated with the system mouse.",
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True if the Pointer is a Mouse Ray Pointer, false otherwise."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.isMouse",
        "scope": "static"
    },
    {
        "description": "Returns information about an existing Pointer",
        "kind": "function",
        "name": "getPointerProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the Pointer, as returned by {@link Pointers.createPointer}.",
                "name": "uid"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Pointers.LaserPointerProperties",
                        "Pointers.StylusPointerProperties",
                        "Pointers.ParabolaPointerProperties"
                    ]
                },
                "description": "The information about the Pointer.\rCurrently only includes renderStates and defaultRenderStates with associated overlay IDs."
            }
        ],
        "memberof": "Pointers",
        "longname": "Pointers.getPointerProperties",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>Synonym for {@link Picks} as used for ray picks.",
        "kind": "namespace",
        "name": "RayPick",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_NOTHING"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_ENTITIES"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_OVERLAYS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_AVATARS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_HUD"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_COARSE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_INCLUDE_INVISIBLE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_INCLUDE_NONCOLLIDABLE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "PICK_ALL_INTERSECTIONS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "INTERSECTED_NONE"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "INTERSECTED_ENTITY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "INTERSECTED_OVERLAY"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "INTERSECTED_AVATAR"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "INTERSECTED_HUD"
            }
        ],
        "longname": "RayPick",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "createRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "Picks.RayPickProperties"
                    ]
                }
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.createRayPick",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "enableRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.enableRayPick",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "disableRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.disableRayPick",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "removeRayPick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.removeRayPick",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPrevRayPickResult",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RayPickResult"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.getPrevRayPickResult",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPrecisionPicking",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "precisionPicking"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.setPrecisionPicking",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setIgnoreItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "description": "ignoreEntities",
                "name": "{Uuid[])"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.setIgnoreItems",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setIncludeItems",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            },
            {
                "description": "includeEntities",
                "name": "{Uuid[])"
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.setIncludeItems",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isLeftHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.isLeftHand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isRightHand",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.isRightHand",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isMouse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.isMouse",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_NOTHING",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_NOTHING",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ENTITIES",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_ENTITIES",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_OVERLAYS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_OVERLAYS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_AVATARS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_AVATARS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_HUD",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_HUD",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_COARSE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_COARSE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_INVISIBLE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_INCLUDE_INVISIBLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_INCLUDE_NONCOLLIDABLE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_INCLUDE_NONCOLLIDABLE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "PICK_ALL_INTERSECTIONS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.PICK_ALL_INTERSECTIONS",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_NONE",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_NONE",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_ENTITY",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_ENTITY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_OVERLAY",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_OVERLAY",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_AVATAR",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_AVATAR",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "INTERSECTED_HUD",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "RayPick",
        "longname": "RayPick.INTERSECTED_HUD",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The AccountServices API contains helper functions related to user connectivity",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "kind": "namespace",
        "name": "AccountServices",
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "loggedIn"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "findableBy"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "metaverseServerURL"
            }
        ],
        "longname": "AccountServices",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "getDownloadInfo",
        "returns": [
            {
                "type": {
                    "names": [
                        "DownloadInfoResult"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.getDownloadInfo",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateDownloadInfo",
        "memberof": "AccountServices",
        "longname": "AccountServices.updateDownloadInfo",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isLoggedIn",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.isLoggedIn",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "checkAndSignalForAccessToken",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.checkAndSignalForAccessToken",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "logOut",
        "memberof": "AccountServices",
        "longname": "AccountServices.logOut",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "connected",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.connected",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "disconnected",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "reason"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.disconnected",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "myUsernameChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "username"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.myUsernameChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "downloadInfoChanged",
        "params": [
            {
                "name": "info"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.downloadInfoChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "findableByChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "discoverabilityMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.findableByChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loggedInChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "loggedIn"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AccountServices",
        "longname": "AccountServices.loggedInChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>The <code>Audio</code> API provides facilities to interact with audio inputs and outputs and to play sounds.",
        "kind": "namespace",
        "name": "Audio",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is muted, otherwise <code>false</code>.",
                "name": "muted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if noise reduction is enabled, otherwise <code>false</code>. When \r    enabled, the input audio signal is blocked (fully attenuated) when it falls below an adaptive threshold set just \r    above the noise floor.",
                "name": "noiseReduction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness of the audio input, range <code>0.0</code> (no sound) &ndash; \r    <code>1.0</code> (the onset of clipping). <em>Read-only.</em>",
                "name": "inputLevel"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Adjusts the volume of the input audio; range <code>0.0</code> &ndash; <code>1.0</code>. \r    If set to a value, the resulting value depends on the input device: for example, the volume can't be changed on some \r    devices, and others might only support values of <code>0.0</code> and <code>1.0</code>.",
                "name": "inputVolume"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the input audio is being used in stereo, otherwise \r    <code>false</code>. Some devices do not support stereo, in which case the value is always <code>false</code>.",
                "name": "isStereoInput"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The current context of the audio: either <code>\"Desktop\"</code> or <code>\"HMD\"</code>.\r    <em>Read-only.</em>",
                "name": "context"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<em>Read-only.</em> <strong>Deprecated:</strong> This property is deprecated and will be\r    removed.",
                "name": "devices"
            }
        ],
        "longname": "Audio",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setInputDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isHMD"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.setInputDevice",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setOutputDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isHMD"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.setOutputDevice",
        "scope": "static"
    },
    {
        "description": "Enable or disable reverberation. Reverberation is done by the client, on the post-mix audio. The reverberation options \rcome from either the domain's audio zone if used &mdash; configured on the server &mdash; or as scripted by \r{@link Audio.setReverbOptions|setReverbOptions}.",
        "kind": "function",
        "name": "setReverb",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable reverberation, <code>false</code> to disable.",
                "name": "enable"
            }
        ],
        "examples": [
            "<caption>Enable reverberation for a short while.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () {\r    print(\"Reverb OFF\");\r    Audio.setReverb(false);\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);\r\rScript.setTimeout(function () {\r    var reverbOptions = new AudioEffectOptions();\r    reverbOptions.roomSize = 100;\r    Audio.setReverbOptions(reverbOptions);\r    print(\"Reverb ON\");\r    Audio.setReverb(true);\r}, 4000);\r\rScript.setTimeout(function () {\r    print(\"Reverb OFF\");\r    Audio.setReverb(false);\r}, 8000);"
        ],
        "memberof": "Audio",
        "longname": "Audio.setReverb",
        "scope": "static"
    },
    {
        "description": "Configure reverberation options. Use {@link Audio.setReverb|setReverb} to enable or disable reverberation.",
        "kind": "function",
        "name": "setReverbOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "AudioEffectOptions"
                    ]
                },
                "description": "The reverberation options.",
                "name": "options"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setReverbOptions",
        "scope": "static"
    },
    {
        "description": "Starts making an audio recording of the audio being played in-world (i.e., not local-only audio) to a file in WAV format.",
        "kind": "function",
        "name": "startRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file to make the recording in. Should have a <code>.wav</code> \r    extension. The file is overwritten if it already exists.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the specified file could be opened and audio recording has started, otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Make a 10 second audio recording.</caption>\rvar filename = File.getTempDir() + \"/audio.wav\";\rif (Audio.startRecording(filename)) {\r    Script.setTimeout(function () {\r        Audio.stopRecording();\r        print(\"Audio recording made in: \" + filename);\r    }, 10000);\r\r} else {\r    print(\"Could not make an audio recording in: \" + filename);\r}"
        ],
        "memberof": "Audio",
        "longname": "Audio.startRecording",
        "scope": "static"
    },
    {
        "description": "Finish making an audio recording started with {@link Audio.startRecording|startRecording}.",
        "kind": "function",
        "name": "stopRecording",
        "memberof": "Audio",
        "longname": "Audio.stopRecording",
        "scope": "static"
    },
    {
        "description": "Check whether an audio recording is currently being made.",
        "kind": "function",
        "name": "getRecording",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an audio recording is currently being made, otherwise <code>false</code>."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.getRecording",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "nop",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This signal is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.nop",
        "scope": "static"
    },
    {
        "description": "Triggered when the audio input is muted or unmuted.",
        "kind": "function",
        "name": "mutedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is muted, otherwise <code>false</code>.",
                "name": "isMuted"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when audio input is muted or unmuted</caption>\rAudio.mutedChanged.connect(function (isMuted) {\r    print(\"Audio muted: \" + isMuted);\r});"
        ],
        "memberof": "Audio",
        "longname": "Audio.mutedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the audio input noise reduction is enabled or disabled.",
        "kind": "function",
        "name": "noiseReductionChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if audio input noise reduction is enabled, otherwise <code>false</code>.",
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.noiseReductionChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the input audio volume changes.",
        "kind": "function",
        "name": "inputVolumeChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The requested volume to be applied to the audio input, range <code>0.0</code> &ndash; \r    <code>1.0</code>. The resulting value of <code>Audio.inputVolume</code> depends on the capabilities of the device: \r    for example, the volume can't be changed on some devices, and others might only support values of <code>0.0</code> \r    and <code>1.0</code>.",
                "name": "volume"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.inputVolumeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the input audio level changes.",
        "kind": "function",
        "name": "inputLevelChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness of the input audio, range <code>0.0</code> (no sound) &ndash; <code>1.0</code> (the \r    onset of clipping).",
                "name": "level"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.inputLevelChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the current context of the audio changes.",
        "kind": "function",
        "name": "contextChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The current context of the audio: either <code>\"Desktop\"</code> or <code>\"HMD\"</code>.",
                "name": "context"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.contextChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onContextChanged",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "Audio",
        "longname": "Audio.onContextChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Clipboard API enables you to export and import entities to and from JSON files.",
        "kind": "namespace",
        "name": "Clipboard",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Clipboard",
        "scope": "global"
    },
    {
        "description": "Compute the extents of the contents held in the clipboard.",
        "kind": "function",
        "name": "getContentsDimensions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The extents of the contents held in the clipboard."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.getContentsDimensions",
        "scope": "static"
    },
    {
        "description": "Compute the largest dimension of the extents of the contents held in the clipboard.",
        "kind": "function",
        "name": "getClipboardContentsLargestDimension",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The largest dimension computed."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.getClipboardContentsLargestDimension",
        "scope": "static"
    },
    {
        "description": "Import entities from a JSON file containing entity data into the clipboard.\rYou can generate a JSON file using {@link Clipboard.exportEntities}.",
        "kind": "function",
        "name": "importEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of file to import.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the import was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.importEntities",
        "scope": "static"
    },
    {
        "description": "Export the entities specified to a JSON file.",
        "kind": "function",
        "name": "exportEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of the file to export the entities to. Should have the extension \".json\".",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Array of IDs of the entities to export.",
                "name": "entityIDs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the export was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.exportEntities",
        "scope": "static"
    },
    {
        "description": "Export the entities with centers within a cube to a JSON file.",
        "kind": "function",
        "name": "exportEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Path and name of the file to export the entities to. Should have the extension \".json\".",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the cube center.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the cube center.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the cube center.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Half dimension of the cube.",
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the export was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.exportEntities",
        "scope": "static"
    },
    {
        "description": "Paste the contents of the clipboard into the world.",
        "kind": "function",
        "name": "pasteEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position to paste the clipboard contents at.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "Array of entity IDs for the new entities that were created as a result of the paste operation."
            }
        ],
        "memberof": "Clipboard",
        "longname": "Clipboard.pasteEntities",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Controller API provides facilities to interact with computer and controller hardware.\r\r<h5>Functions</h5>\r\r<p>Properties</p>\r<ul>\r  <li>{@link Controller.getActions|getActions}</li>\r  <li>{@link Controller.getHardware|getHardware}</li>\r  <li>{@link Controller.getStandard|getStandard}</li>\r</ul>\r\r<p>Mappings</p>\r<ul>\r  <li>{@link Controller.disableMapping|disableMapping}</li>\r  <li>{@link Controller.enableMapping|enableMapping}</li>\r  <li>{@link Controller.loadMapping|loadMapping}</li>\r  <li>{@link Controller.newMapping|newMapping}</li>\r  <li>{@link Controller.parseMapping|parseMapping}</li>\r</ul>\r\r<p>Input, Hardware, and Action Reflection</p>\r<ul>\r  <li>{@link Controller.findAction|findAction}</li>\r  <li>{@link Controller.findDevice|findDevice}</li>\r  <li>{@link Controller.getActionNames|getActionNames}</li>\r  <li>{@link Controller.getAllActions|getAllActions}</li>\r  <li>{@link Controller.getAvailableInputs|getAvailableInputs}</li>\r  <li>{@link Controller.getDeviceName|getDeviceName}</li>\r  <li>{@link Controller.getDeviceNames|getDeviceNames}</li>\r</ul>\r\r<p>Input, Hardware, and Action Events</p>\r<ul>\r  <li>{@link Controller.actionEvent|actionEvent}</li>\r  <li>{@link Controller.hardwareChanged|hardwareChanged}</li>\r  <li>{@link Controller.inputEvent|inputEvent}</li>\r</ul>\r\r<p>Mouse, Keyboard, and Touch Events</p>\r<ul>\r  <li>{@link Controller.keyPressEvent|keyPressEvent}</li>\r  <li>{@link Controller.keyReleaseEvent|keyReleaseEvent}</li>\r  <li>{@link Controller.mouseDoublePressEvent|mouseDoublePressEvent}</li>\r  <li>{@link Controller.mouseMoveEvent|mouseMoveEvent}</li>\r  <li>{@link Controller.mousePressEvent|mousePressEvent}</li>\r  <li>{@link Controller.mouseReleaseEvent|mouseReleaseEvent}</li>\r  <li>{@link Controller.touchBeginEvent|touchBeginEvent}</li>\r  <li>{@link Controller.touchEndEvent|touchEndEvent}</li>\r  <li>{@link Controller.touchUpdateEvent|touchUpdateEvent}</li>\r  <li>{@link Controller.wheelEvent|wheelEvent}</li>\r</ul>\r\r<p>Control Capturing</p>\r<ul>\r  <li>{@link Controller.captureMouseEvents|captureMouseEvents}</li>\r  <li>{@link Controller.captureTouchEvents|captureTouchEvents}</li>\r  <li>{@link Controller.captureWheelEvents|captureWheelEvents}</li>\r  <li>{@link Controller.releaseMouseEvents|releaseMouseEvents}</li>\r  <li>{@link Controller.releaseTouchEvents|releaseTouchEvents}</li>\r  <li>{@link Controller.releaseWheelEvents|releaseWheelEvents}</li>\r</ul>\r\r<p>Action Capturing</p>\r<ul>\r  <li>{@link Controller.captureActionEvents|captureActionEvents}</li>\r  <li>{@link Controller.captureEntityClickEvents|captureEntityClickEvents}</li>\r  <li>{@link Controller.captureJoystick|captureJoystick}</li>\r  <li>{@link Controller.captureKeyEvents|captureKeyEvents}</li>\r  <li>{@link Controller.releaseActionEvents|releaseActionEvents}</li>\r  <li>{@link Controller.releaseEntityClickEvents|releaseEntityClickEvents}</li>\r  <li>{@link Controller.releaseJoystick|releaseJoystick}</li>\r  <li>{@link Controller.releaseKeyEvents|releaseKeyEvents}</li>\r</ul>\r\r<p>Controller and Action Values</p>\r<ul>\r  <li>{@link Controller.getValue|getValue}</li>\r  <li>{@link Controller.getAxisValue|getAxisValue}</li>\r  <li>{@link Controller.getPoseValue|getgetPoseValue}</li>\r  <li>{@link Controller.getActionValue|getActionValue}</li>\r</ul>\r\r<p>Haptics</p>\r<ul>\r  <li>{@link Controller.triggerHapticPulse|triggerHapticPulse}</li>\r  <li>{@link Controller.triggerHapticPulseOnDevice|triggerHapticPulseOnDevice}</li>\r  <li>{@link Controller.triggerShortHapticPulse|triggerShortHapticPulse}</li>\r  <li>{@link Controller.triggerShortHapticPulseOnDevice|triggerShortHapticPulseOnDevice}</li>\r</ul>\r\r<p>Display Information</p>\r<ul>\r  <li>{@link Controller.getViewportDimensions|getViewportDimensions}</li>\r  <li>{@link Controller.getRecommendedHUDRect|getRecommendedHUDRect}</li>\r</ul>\r\r<p>Virtual Game Pad</p>\r<ul>\r  <li>{@link Controller.setVPadEnabled|setVPadEnabled}</li>\r  <li>{@link Controller.setVPadHidden|setVPadHidden}</li>\r  <li>{@link Controller.setVPadExtraBottomMargin|setVPadExtraBottomMargin}</li>\r</ul>\r\r<p>Input Recordings</p>\r<ul>\r  <li>{@link Controller.startInputRecording|startInputRecording}</li>\r  <li>{@link Controller.stopInputRecording|stopInputRecording}</li>\r  <li>{@link Controller.saveInputRecording|saveInputRecording}</li>\r  <li>{@link Controller.getInputRecorderSaveDirectory|getInputRecorderSaveDirectory}</li>\r  <li>{@link Controller.loadInputRecording|loadInputRecording}</li>\r  <li>{@link Controller.startInputPlayback|startInputPlayback}</li>\r  <li>{@link Controller.stopInputPlayback|stopInputPlayback}</li>\r</ul>\r\r<h5>Entity Methods:</h5>\r\r<p>The default scripts implement hand controller actions that use {@link Entities.callEntityMethod} to call entity script \rmethods, if present in the entity being interacted with.</p>\r\r<table>\r  <thead>\r    <tr><th>Method Name</th><th>Description</th><th>Example</th></tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><code>startFarTrigger</code><br /><code>continueFarTrigger</code><br /><code>stopFarTrigger</code></td>\r      <td>These methods are called when a user is more than 0.3m away from the entity, the entity is triggerable, and the \r        user starts, continues, or stops squeezing the trigger.</td>\r      </td>\r      <td>A light switch that can be toggled on and off from a distance.</td>\r    </tr>\r    <tr>\r      <td><code>startNearTrigger</code><br /><code>continueNearTrigger</code><br /><code>stopNearTrigger</code></td>\r      <td>These methods are called when a user is less than 0.3m away from the entity, the entity is triggerable, and the \r        user starts, continues, or stops squeezing the trigger.</td>\r      <td>A doorbell that can be rung when a user is near.</td>\r    </tr>\r    <tr>\r      <td><code>startDistanceGrab</code><br /><code>continueDistanceGrab</code><br /></td>\r      <td>These methods are called when a user is more than 0.3m away from the entity, the entity is either cloneable, or\r        grabbable and not locked, and the user starts or continues to squeeze the trigger.</td>\r      <td>A comet that emits icy particle trails when a user is dragging it through the sky.</td>\r    </tr>\r    <tr>\r      <td><code>startNearGrab</code><br /><code>continueNearGrab</code><br /></td>\r      <td>These methods are called when a user is less than 0.3m away from the entity, the entity is either cloneable, or \r        grabbable and not locked, and the user starts or continues to squeeze the trigger.</td>\r      <td>A ball that glows when it's being held close.</td>\r    </tr>\r    <tr>\r      <td><code>releaseGrab</code></td>\r      <td>This method is called when a user releases the trigger when having been either distance or near grabbing an \r        entity.</td>\r      <td>Turn off the ball glow or comet trail with the user finishes grabbing it.</td>\r    </tr>\r    <tr>\r      <td><code>startEquip</code><br /><code>continueEquip</code><br /><code>releaseEquip</code></td>\r      <td>These methods are called when a user starts, continues, or stops equipping an entity.</td>\r      <td>A glass that stays in the user's hand after the trigger is clicked.</td>\r    </tr>\r  </tbody>\r</table>\r<p>All the entity methods are called with the following two arguments:</p>\r<ul>\r  <li>The entity ID.</li>\r  <li>A string, <code>\"hand,userID\"</code> &mdash; where \"hand\" is <code>\"left\"</code> or <code>\"right\"</code>, and \"userID\"\r    is the user's {@link MyAvatar|MyAvatar.sessionUUID}.</li>\r</ul>",
        "kind": "namespace",
        "name": "Controller",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Controller.Actions"
                    ]
                },
                "description": "Predefined actions on Interface and the user's avatar. These can be used as end\r    points in a {@link RouteObject} mapping. A synonym for <code>Controller.Hardware.Actions</code>.\r    <em>Read-only.</em><br />\r    Default mappings are provided from the <code>Controller.Hardware.Keyboard</code> and <code>Controller.Standard</code> to \r    actions in \r    <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/keyboardMouse.json\">\r    keyboardMouse.json</a> and \r    <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/standard.json\">\r    standard.json</a>, respectively.",
                "name": "Actions"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "Standard and hardware-specific controller and computer outputs, plus predefined \r    actions on Interface and the user's avatar. The outputs can be mapped to <code>Actions</code> or functions in a \r    {@link RouteObject} mapping. Additionally, hardware-specific controller outputs can be mapped to <code>Standard</code> \r    controller outputs. <em>Read-only.</em>",
                "name": "Hardware"
            },
            {
                "type": {
                    "names": [
                        "Controller.Standard"
                    ]
                },
                "description": "Standard controller outputs that can be mapped to <code>Actions</code> or \r    functions in a {@link RouteObject} mapping. <em>Read-only.</em><br />\r    Each hardware device has a mapping from its outputs to <code>Controller.Standard</code> items, specified in a JSON file. \r    For example, <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/leapmotion.json\">\r    leapmotion.json</a> and \r    <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/vive.json\">vive.json</a>.",
                "name": "Standard"
            }
        ],
        "longname": "Controller",
        "scope": "global"
    },
    {
        "description": "Disable default Interface actions for a particular key event.",
        "kind": "function",
        "name": "captureKeyEvents",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key event to be captured. The <code>key</code> property must be specified. The \r    <code>text</code> property is ignored. The other properties default to <code>false</code>.",
                "name": "event"
            }
        ],
        "examples": [
            "<caption>Disable left and right strafing.</caption>\rvar STRAFE_LEFT = { \"key\": 16777234, isShifted: true };\rvar STRAFE_RIGHT = { \"key\": 16777236, isShifted: true };\r\rController.captureKeyEvents(STRAFE_LEFT);\rController.captureKeyEvents(STRAFE_RIGHT);\r\rScript.scriptEnding.connect(function () {\r    Controller.releaseKeyEvents(STRAFE_LEFT);\r    Controller.releaseKeyEvents(STRAFE_RIGHT);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureKeyEvents",
        "scope": "static"
    },
    {
        "description": "Re-enable default Interface actions for a particular key event that has been disabled using \r{@link Controller.captureKeyEvents|captureKeyEvents}.",
        "kind": "function",
        "name": "releaseKeyEvents",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key event to release from capture. The <code>key</code> property must be \r    specified. The <code>text</code> property is ignored. The other properties default to <code>false</code>.",
                "name": "event"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.releaseKeyEvents",
        "scope": "static"
    },
    {
        "description": "Disable default Interface actions for a joystick.",
        "kind": "function",
        "name": "captureJoystick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the joystick.",
                "name": "joystickID"
            }
        ],
        "deprecated": "This function no longer has any effect.",
        "memberof": "Controller",
        "longname": "Controller.captureJoystick",
        "scope": "static"
    },
    {
        "description": "Re-enable default Interface actions for a joystick that has been disabled using \r{@link Controller.captureJoystick|captureJoystick}.",
        "kind": "function",
        "name": "releaseJoystick",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the joystick.",
                "name": "joystickID"
            }
        ],
        "deprecated": "This function no longer has any effect.",
        "memberof": "Controller",
        "longname": "Controller.releaseJoystick",
        "scope": "static"
    },
    {
        "description": "Disable {@link Entities.mousePressOnEntity} and {@link Entities.mouseDoublePressOnEntity} events on entities.",
        "kind": "function",
        "name": "captureEntityClickEvents",
        "examples": [
            "<caption>Disable entity click events for a short period.</caption>\rEntities.mousePressOnEntity.connect(function (entityID, event) {\r    print(\"Clicked on entity: \" + entityID);\r});\r\rScript.setTimeout(function () {\r    Controller.captureEntityClickEvents();\r}, 5000);\r\rScript.setTimeout(function () {\r    Controller.releaseEntityClickEvents();\r}, 10000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureEntityClickEvents",
        "scope": "static"
    },
    {
        "description": "Re-enable {@link Entities.mousePressOnEntity} and {@link Entities.mouseDoublePressOnEntity} events on entities that were \rdisabled using {@link Controller.captureEntityClickEvents|captureEntityClickEvents}.",
        "kind": "function",
        "name": "releaseEntityClickEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseEntityClickEvents",
        "scope": "static"
    },
    {
        "description": "Get the dimensions of the Interface window's interior if in desktop mode or the HUD surface if in HMD mode.",
        "kind": "function",
        "name": "getViewportDimensions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The dimensions of the Interface window interior if in desktop mode or HUD surface if in HMD mode."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getViewportDimensions",
        "scope": "static"
    },
    {
        "description": "Get the recommended area to position UI on the HUD surface if in HMD mode or Interface's window interior if in desktop \rmode.",
        "kind": "function",
        "name": "getRecommendedHUDRect",
        "returns": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The recommended area in which to position UI."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getRecommendedHUDRect",
        "scope": "static"
    },
    {
        "description": "Enables or disables the virtual game pad that is displayed on certain devices (e.g., Android).",
        "kind": "function",
        "name": "setVPadEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the virtual game pad doesn't work, otherwise it does work provided \r    that it is not hidden by {@link Controller.setVPadHidden|setVPadHidden}.",
                "name": "enable"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.setVPadEnabled",
        "scope": "static"
    },
    {
        "description": "Shows or hides the virtual game pad that is displayed on certain devices (e.g., Android).",
        "kind": "function",
        "name": "setVPadHidden",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the virtual game pad is hidden, otherwise it is shown.",
                "name": "hidden"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.setVPadHidden",
        "scope": "static"
    },
    {
        "description": "Sets the amount of extra margin between the virtual game pad that is displayed on certain devices (e.g., Android) and \rthe bottom of the display.",
        "kind": "function",
        "name": "setVPadExtraBottomMargin",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of pixels in the extra margin.",
                "name": "margin"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.setVPadExtraBottomMargin",
        "scope": "static"
    },
    {
        "description": "Triggered when a keyboard key is pressed.",
        "kind": "function",
        "name": "keyPressEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key press.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the KeyEvent details for each key press.</caption>\rController.keyPressEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.keyPressEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a keyboard key is released from being pressed.",
        "kind": "function",
        "name": "keyReleaseEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "description": "Details of the key release.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.keyReleaseEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse moves.",
        "kind": "function",
        "name": "mouseMoveEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the mouse movement.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the MouseEvent details for each mouse move.</caption>\rController.mouseMoveEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.mouseMoveEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is pressed.",
        "kind": "function",
        "name": "mousePressEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the button press.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.mousePressEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is double-pressed.",
        "kind": "function",
        "name": "mouseDoublePressEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the button double-press.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.mouseDoublePressEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is released from being pressed.",
        "kind": "function",
        "name": "mouseReleaseEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "MouseEvent"
                    ]
                },
                "description": "Details of the button release.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.mouseReleaseEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a touch event starts in the Interface window on a touch-enabled display or device.",
        "kind": "function",
        "name": "touchBeginEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "TouchEvent"
                    ]
                },
                "description": "Details of the touch begin.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the TouchEvent details when a touch event starts.</caption>\rController.touchBeginEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.touchBeginEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a touch event ends in the Interface window on a touch-enabled display or device.",
        "kind": "function",
        "name": "touchEndEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "TouchEvent"
                    ]
                },
                "description": "Details of the touch end.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.touchEndEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a touch event update occurs in the Interface window on a touch-enabled display or device.",
        "kind": "function",
        "name": "touchUpdateEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "TouchEvent"
                    ]
                },
                "description": "Details of the touch update.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.touchUpdateEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse wheel is rotated.",
        "kind": "function",
        "name": "wheelEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "WheelEvent"
                    ]
                },
                "description": "Details of the wheel movement.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the WheelEvent details for each wheel rotation.</caption>\rController.wheelEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n     "
        ],
        "memberof": "Controller",
        "longname": "Controller.wheelEvent",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Desktop",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "InteractiveWindow flag for always showing a window on top",
                "name": "ALWAYS_ON_TOP"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "InteractiveWindow flag for hiding the window instead of closing on window close by user",
                "name": "CLOSE_BUTTON_HIDES"
            }
        ],
        "longname": "Desktop",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The GooglePoly API allows you to interact with Google Poly models direct from inside High Fidelity.",
        "kind": "namespace",
        "name": "GooglePoly",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "GooglePoly",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "setAPIKey",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "key"
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.setAPIKey",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAssetList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "format"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getAssetList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFBX",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getFBX",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getOBJ",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getOBJ",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getBlocks",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getBlocks",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getGLTF",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getGLTF",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getGLTF2",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getGLTF2",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTilt",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "keyword"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "category"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getTilt",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getModelInfo",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "GooglePoly",
        "longname": "GooglePoly.getModelInfo",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The HMD API provides access to the HMD used in VR display mode.",
        "kind": "namespace",
        "name": "HMD",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the HMD if currently in VR display mode, otherwise\r    {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the HMD if currently in VR display mode, otherwise \r    {@link Quat(0)|Quat.IDENTITY}. <em>Read-only.</em>",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display mode is HMD, otherwise <code>false</code>. <em>Read-only.</em>",
                "name": "active"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if currently in VR display mode and the HMD is being worn, otherwise\r    <code>false</code>. <em>Read-only.</em>",
                "name": "mounted"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The real-world height of the user. <em>Read-only.</em> <em>Currently always returns a\r    value of <code>1.755</code>.</em>",
                "name": "playerHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The real-world height of the user's eyes. <em>Read-only.</em> <em>Currently always returns a\r    value of <code>1.655</code>.</em>",
                "name": "eyeHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The inter-pupillary distance (distance between eyes) of the user, used for rendering. Defaults to\r    the human average of <code>0.064</code> unless set by the HMD. <em>Read-only.</em>",
                "name": "ipd"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "A scale factor applied to the <code>ipd</code> property value.",
                "name": "ipdScale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet is being displayed, <code>false</code> otherwise.\r    <em>Read-only.</em>",
                "name": "showTablet"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tablet has been opened in contextual mode, otherwise \r    <code>false</code>. In contextual mode, the tablet has been opened at a specific world position and orientation rather \r    than at a position and orientation relative to the user. <em>Read-only.</em>",
                "name": "tabletContextualMode"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet body model overlay.",
                "name": "tabletID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet's screen overlay.",
                "name": "tabletScreenID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet's \"home\" button overlay.",
                "name": "homeButtonID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the tablet's \"home\" button highlight overlay.",
                "name": "homeButtonHighlightID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the mini tablet's body model overlay. <code>null</code> if not in HMD mode.",
                "name": "miniTabletID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the mini tablet's screen overlay. <code>null</code> if not in HMD mode.",
                "name": "miniTabletScreenID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The hand that the mini tablet is displayed on: <code>0</code> for left hand, \r    <code>1</code> for right hand, <code>-1</code> if not in HMD mode.",
                "name": "miniTabletHand"
            },
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "defaultvalue": "0,0,0,0",
                "description": "The size and position of the HMD play area in sensor coordinates. <em>Read-only.</em>",
                "name": "playArea"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The positions of the VR system sensors in sensor coordinates. <em>Read-only.</em>",
                "name": "sensorPositions"
            }
        ],
        "longname": "HMD",
        "scope": "global"
    },
    {
        "description": "Calculate the intersection of a ray with the HUD overlay.",
        "kind": "function",
        "name": "calculateRayUICollisionPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The origin of the ray.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction of the ray.",
                "name": "direction"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point of intersection with the HUD overlay if it intersects, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Draw a square on the HUD overlay in the direction you're looking.</caption>\rvar hudIntersection = HMD.calculateRayUICollisionPoint(MyAvatar.getHeadPosition(),\r    Quat.getForward(MyAvatar.headOrientation));\rvar hudPoint = HMD.overlayFromWorldPoint(hudIntersection);\r\rvar DIMENSIONS = { x: 50, y: 50 };\rvar square = Overlays.addOverlay(\"rectangle\", {\r    x: hudPoint.x - DIMENSIONS.x / 2,\r    y: hudPoint.y - DIMENSIONS.y / 2,\r    width: DIMENSIONS.x,\r    height: DIMENSIONS.y,\r    color: { red: 255, green: 0, blue: 0 }\r});\r\rScript.scriptEnding.connect(function () {\r    Overlays.deleteOverlay(square);\r});"
        ],
        "memberof": "HMD",
        "longname": "HMD.calculateRayUICollisionPoint",
        "scope": "static"
    },
    {
        "description": "Get the 2D HUD overlay coordinates of a 3D point on the HUD overlay.\r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.",
        "kind": "function",
        "name": "overlayFromWorldPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point on the HUD overlay in world coordinates.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates."
            }
        ],
        "examples": [
            "<caption>Draw a square on the HUD overlay in the direction you're looking.</caption>\rvar hudIntersection = HMD.calculateRayUICollisionPoint(MyAvatar.getHeadPosition(),\r    Quat.getForward(MyAvatar.headOrientation));\rvar hudPoint = HMD.overlayFromWorldPoint(hudIntersection);\r\rvar DIMENSIONS = { x: 50, y: 50 };\rvar square = Overlays.addOverlay(\"rectangle\", {\r    x: hudPoint.x - DIMENSIONS.x / 2,\r    y: hudPoint.y - DIMENSIONS.y / 2,\r    width: DIMENSIONS.x,\r    height: DIMENSIONS.y,\r    color: { red: 255, green: 0, blue: 0 }\r});\r\rScript.scriptEnding.connect(function () {\r    Overlays.deleteOverlay(square);\r});"
        ],
        "memberof": "HMD",
        "longname": "HMD.overlayFromWorldPoint",
        "scope": "static"
    },
    {
        "description": "Get the 3D world coordinates of a 2D point on the HUD overlay.\r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.",
        "kind": "function",
        "name": "worldPointFromOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates.",
                "name": "coordinates"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point on the HUD overlay in world coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.worldPointFromOverlay",
        "scope": "static"
    },
    {
        "description": "Get the 2D point on the HUD overlay represented by given spherical coordinates. \r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.\rSpherical coordinates are polar coordinates in radians with <code>{ x: 0, y: 0 }</code> being the center of the HUD \roverlay.",
        "kind": "function",
        "name": "sphericalToOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in spherical coordinates.",
                "name": "sphericalPos"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.sphericalToOverlay",
        "scope": "static"
    },
    {
        "description": "Get the spherical coordinates of a 2D point on the HUD overlay.\r2D HUD overlay coordinates are pixels with the origin at the top left of the overlay.\rSpherical coordinates are polar coordinates in radians with <code>{ x: 0, y: 0 }</code> being the center of the HUD\roverlay.",
        "kind": "function",
        "name": "overlayToSpherical",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in HUD coordinates.",
                "name": "overlayPos"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point on the HUD overlay in spherical coordinates."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.overlayToSpherical",
        "scope": "static"
    },
    {
        "description": "Recenter the HMD HUD to the current HMD position and orientation.",
        "kind": "function",
        "name": "centerUI",
        "memberof": "HMD",
        "longname": "HMD.centerUI",
        "scope": "static"
    },
    {
        "description": "Get the name of the HMD audio input device.",
        "kind": "function",
        "name": "preferredAudioInput",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the HMD audio input device if in HMD mode, otherwise an empty string."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.preferredAudioInput",
        "scope": "static"
    },
    {
        "description": "Get the name of the HMD audio output device.",
        "kind": "function",
        "name": "preferredAudioOutput",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the HMD audio output device if in HMD mode, otherwise an empty string."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.preferredAudioOutput",
        "scope": "static"
    },
    {
        "description": "Check whether there is an HMD available.",
        "kind": "function",
        "name": "isHMDAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the HMD to check for, e.g., <code>\"Oculus Rift\"</code>. The name is the same as \r    may be displayed in Interface's \"Display\" menu. If no name is specified then any HMD matches.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD of the specified <code>name</code> is available, otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report on HMD availability.</caption>\rprint(\"Is any HMD available: \" + HMD.isHMDAvailable());\rprint(\"Is an Oculus Rift HMD available: \" + HMD.isHMDAvailable(\"Oculus Rift\"));\rprint(\"Is a Vive HMD available: \" + HMD.isHMDAvailable(\"OpenVR (Vive)\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isHMDAvailable",
        "scope": "static"
    },
    {
        "description": "Check whether there is an HMD head controller available.",
        "kind": "function",
        "name": "isHeadControllerAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the HMD head controller to check for, e.g., <code>\"Oculus\"</code>. If no name is \r    specified then any HMD head controller matches.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD head controller of the specified <code>name</code> is available, \r    otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report HMD head controller availability.</caption>\rprint(\"Is any HMD head controller available: \" + HMD.isHeadControllerAvailable());\rprint(\"Is an Oculus head controller available: \" + HMD.isHeadControllerAvailable(\"Oculus\"));\rprint(\"Is a Vive head controller available: \" + HMD.isHeadControllerAvailable(\"OpenVR\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isHeadControllerAvailable",
        "scope": "static"
    },
    {
        "description": "Check whether there are HMD hand controllers available.",
        "kind": "function",
        "name": "isHandControllerAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the HMD hand controller to check for, e.g., <code>\"Oculus\"</code>. If no name is \r    specified then any HMD hand controller matches.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD hand controller of the specified <code>name</code> is available, \r    otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report HMD hand controller availability.</caption>\rprint(\"Are any HMD hand controllers available: \" + HMD.isHandControllerAvailable());\rprint(\"Are Oculus hand controllers available: \" + HMD.isHandControllerAvailable(\"Oculus\"));\rprint(\"Are Vive hand controllers available: \" + HMD.isHandControllerAvailable(\"OpenVR\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isHandControllerAvailable",
        "scope": "static"
    },
    {
        "description": "Check whether there are specific HMD controllers available.",
        "kind": "function",
        "name": "isSubdeviceContainingNameAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the HMD controller to check for, e.g., <code>\"OculusTouch\"</code>.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an HMD controller with a name containing the specified <code>name</code> is \r    available, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report if particular Oculus controllers are available.</caption>\rprint(\"Is an Oculus Touch controller available: \" + HMD.isSubdeviceContainingNameAvailable(\"Touch\"));\rprint(\"Is an Oculus Remote controller available: \" + HMD.isSubdeviceContainingNameAvailable(\"Remote\"));"
        ],
        "memberof": "HMD",
        "longname": "HMD.isSubdeviceContainingNameAvailable",
        "scope": "static"
    },
    {
        "description": "Signal that models of the HMD hand controllers being used should be displayed. The models are displayed at their actual, \rreal-world locations.",
        "kind": "function",
        "name": "requestShowHandControllers",
        "examples": [
            "<caption>Show your hand controllers for 10 seconds.</caption>\rHMD.requestShowHandControllers();\rScript.setTimeout(function () {\r    HMD.requestHideHandControllers();\r}, 10000);"
        ],
        "memberof": "HMD",
        "longname": "HMD.requestShowHandControllers",
        "scope": "static"
    },
    {
        "description": "Signal that it is no longer necessary to display models of the HMD hand controllers being used. If no other scripts \rwant the models displayed then they are no longer displayed.",
        "kind": "function",
        "name": "requestHideHandControllers",
        "memberof": "HMD",
        "longname": "HMD.requestHideHandControllers",
        "scope": "static"
    },
    {
        "description": "Check whether any script wants models of the HMD hand controllers displayed. Requests are made and canceled using \r{@link HMD.requestShowHandControllers|requestShowHandControllers} and \r{@link HMD.requestHideHandControllers|requestHideHandControllers}.",
        "kind": "function",
        "name": "shouldShowHandControllers",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if any script is requesting that HMD hand controller models be displayed."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.shouldShowHandControllers",
        "scope": "static"
    },
    {
        "description": "Causes the borders in HUD windows to be enlarged when the laser intersects them in HMD mode. By default, borders are not \renlarged.",
        "kind": "function",
        "name": "activateHMDHandMouse",
        "memberof": "HMD",
        "longname": "HMD.activateHMDHandMouse",
        "scope": "static"
    },
    {
        "description": "Causes the border in HUD windows to no longer be enlarged when the laser intersects them in HMD mode. By default, \rborders are not enlarged.",
        "kind": "function",
        "name": "deactivateHMDHandMouse",
        "memberof": "HMD",
        "longname": "HMD.deactivateHMDHandMouse",
        "scope": "static"
    },
    {
        "description": "Suppress the activation of the HMD-provided keyboard, if any. Successful calls should be balanced with a call to \r{@link HMD.unspressKeyboard|unspressKeyboard} within a reasonable amount of time.",
        "kind": "function",
        "name": "suppressKeyboard",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the current HMD provides a keyboard and it was successfully suppressed (e.g., it \risn't being displayed), otherwise <code>false</code>."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.suppressKeyboard",
        "scope": "static"
    },
    {
        "description": "Unsuppress the activation of the HMD-provided keyboard, if any.",
        "kind": "function",
        "name": "unsuppressKeyboard",
        "memberof": "HMD",
        "longname": "HMD.unsuppressKeyboard",
        "scope": "static"
    },
    {
        "description": "Check whether the HMD-provided keyboard, if any, is visible.",
        "kind": "function",
        "name": "isKeyboardVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the current HMD provides a keyboard and it is visible, otherwise \r<code>false</code>."
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.isKeyboardVisible",
        "scope": "static"
    },
    {
        "description": "Closes the tablet if it is open.",
        "kind": "function",
        "name": "closeTablet",
        "memberof": "HMD",
        "longname": "HMD.closeTablet",
        "scope": "static"
    },
    {
        "description": "Opens the tablet if the tablet is used in the current display mode and it isn't already showing, and sets the tablet to \rcontextual mode if requested. In contextual mode, the page displayed on the tablet is wholly controlled by script (i.e., \rthe user cannot navigate to another).",
        "kind": "function",
        "name": "openTablet",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then the tablet is opened at a specific position and \r    orientation already set by the script, otherwise it opens at a position and orientation relative to the user. For \r    contextual mode, set the world or local position and orientation of the <code>HMD.tabletID</code> overlay.",
                "name": "contextualMode"
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.openTablet",
        "scope": "static"
    },
    {
        "description": "Triggered when a request to show or hide models of the HMD hand controllers is made using \r{@link HMD.requestShowHandControllers|requestShowHandControllers} or\r{@link HMD.requestHideHandControllers|requestHideHandControllers}.",
        "kind": "function",
        "name": "shouldShowHandControllersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when showing of hand controllers changes.</caption>\rfunction onShouldShowHandControllersChanged() {\r    print(\"Should show hand controllers: \" + HMD.shouldShowHandControllers());\r}\rHMD.shouldShowHandControllersChanged.connect(onShouldShowHandControllersChanged);\r\rHMD.requestShowHandControllers();\rScript.setTimeout(function () {\r    HMD.requestHideHandControllers();\r}, 10000);\r\n     "
        ],
        "memberof": "HMD",
        "longname": "HMD.shouldShowHandControllersChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Menu API provides access to the menu that is displayed at the top of the window\ron a user's desktop and in the tablet when the \"MENU\" button is pressed.\r\r<p />\r\r<h3>Groupings</h3>\r\rA \"grouping\" provides a way to group a set of menus or menu items together so \rthat they can all be set visible or invisible as a group. \rThere are two available groups: <code>\"Advanced\"</code> and <code>\"Developer\"</code>.\rThese groupings can be toggled in the \"Settings\" menu.\rIf a menu item doesn't belong to a group it is always displayed.",
        "kind": "namespace",
        "name": "Menu",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Menu",
        "scope": "global"
    },
    {
        "description": "Add a new top-level menu.",
        "kind": "function",
        "name": "addMenu",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name that will be displayed for the menu. Nested menus can be described using the \">\" symbol.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Name of the grouping, if any, to add this menu to.",
                "name": "grouping"
            }
        ],
        "examples": [
            "<caption>Add a menu and a nested submenu.</caption>\rMenu.addMenu(\"Test Menu\");\rMenu.addMenu(\"Test Menu > Test Sub Menu\");",
            "<caption>Add a menu to the Settings menu that is only visible if Settings > Advanced is enabled.</caption>\rMenu.addMenu(\"Settings > Test Grouping Menu\", \"Advanced\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenu",
        "scope": "static"
    },
    {
        "description": "Remove a top-level menu.",
        "kind": "function",
        "name": "removeMenu",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove.",
                "name": "menuName"
            }
        ],
        "examples": [
            "<caption>Remove a menu and nested submenu.</caption>\rMenu.removeMenu(\"Test Menu > Test Sub Menu\");\rMenu.removeMenu(\"Test Menu\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeMenu",
        "scope": "static"
    },
    {
        "description": "Check whether a top-level menu exists.",
        "kind": "function",
        "name": "menuExists",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to check for existence.",
                "name": "menuName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu exists, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Check if the \"Developer\" menu exists.</caption>\rif (Menu.menuExists(\"Developer\")) {\r    print(\"Developer menu exists.\");\r}"
        ],
        "memberof": "Menu",
        "longname": "Menu.menuExists",
        "scope": "static"
    },
    {
        "description": "Add a separator with an unclickable label below it. The separator will be placed at the bottom of the menu.\rIf you want to add a separator at a specific point in the menu, use {@link Menu.addMenuItem} with\r{@link Menu.MenuItemProperties} instead.",
        "kind": "function",
        "name": "addSeparator",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to add a separator to.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the separator that will be displayed as the label below the separator line.",
                "name": "separatorName"
            }
        ],
        "examples": [
            "<caption>Add a separator.</caption>\rMenu.addSeparator(\"Developer\",\"Test Separator\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addSeparator",
        "scope": "static"
    },
    {
        "description": "Remove a separator from a menu.",
        "kind": "function",
        "name": "removeSeparator",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove the separator from.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the separator to remove.",
                "name": "separatorName"
            }
        ],
        "examples": [
            "<caption>Remove a separator.</caption>\rMenu.removeSeparator(\"Developer\",\"Test Separator\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.removeSeparator",
        "scope": "static"
    },
    {
        "description": "Add a new menu item to a menu.",
        "kind": "function",
        "name": "addMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "Menu.MenuItemProperties"
                    ]
                },
                "description": "Properties of the menu item to create.",
                "name": "properties"
            }
        ],
        "examples": [
            "<caption>Add a menu item using {@link Menu.MenuItemProperties}.</caption>\rMenu.addMenuItem({\r    menuName:     \"Developer\",\r    menuItemName: \"Test\",\r    afterItem:    \"Log\",\r    shortcutKey:  \"Ctrl+Shift+T\",\r    grouping:     \"Advanced\"\r});"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenuItem",
        "scope": "static"
    },
    {
        "description": "Add a new menu item to a menu. The new item is added at the end of the menu.",
        "kind": "function",
        "name": "addMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to add a menu item to.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item. This is what will be displayed in the menu.",
                "name": "menuItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A shortcut key that can be used to trigger the menu item.",
                "name": "shortcutKey"
            }
        ],
        "examples": [
            "<caption>Add a menu item to the end of the \"Developer\" menu.</caption>\rMenu.addMenuItem(\"Developer\", \"Test\", \"Ctrl+Shift+T\");"
        ],
        "memberof": "Menu",
        "longname": "Menu.addMenuItem",
        "scope": "static"
    },
    {
        "description": "Remove a menu item from a menu.",
        "kind": "function",
        "name": "removeMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu to remove a menu item from.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item to remove.\rMenu.removeMenuItem(\"Developer\", \"Test\");",
                "name": "menuItem"
            }
        ],
        "memberof": "Menu",
        "longname": "Menu.removeMenuItem",
        "scope": "static"
    },
    {
        "description": "Check if a menu item exists.",
        "kind": "function",
        "name": "menuItemExists",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu that the menu item is in.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item to check for existence of.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu item exists, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Determine if the Developer &gt; Stats menu exists.</caption>\rif (Menu.menuItemExists(\"Developer\", \"Stats\")) {\r    print(\"Developer > Stats menu item exists.\");\r}"
        ],
        "memberof": "Menu",
        "longname": "Menu.menuItemExists",
        "scope": "static"
    },
    {
        "description": "Check whether a checkable menu item is checked.",
        "kind": "function",
        "name": "isOptionChecked",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item.",
                "name": "menuOption"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the option is checked, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report whether the Settings > Advanced menu item is turned on.</caption>\rprint(Menu.isOptionChecked(\"Advanced Menus\")); // true or false"
        ],
        "memberof": "Menu",
        "longname": "Menu.isOptionChecked",
        "scope": "static"
    },
    {
        "description": "Set a checkable menu item as checked or unchecked.",
        "kind": "function",
        "name": "setIsOptionChecked",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item to modify.",
                "name": "menuOption"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the menu item will be checked, otherwise it will not be checked.",
                "name": "isChecked"
            }
        ],
        "examples": [
            "<caption>Turn on Settings > Advanced Menus.</caption>\rMenu.setIsOptionChecked(\"Advanced Menus\", true);\rprint(Menu.isOptionChecked(\"Advanced Menus\")); // true"
        ],
        "memberof": "Menu",
        "longname": "Menu.setIsOptionChecked",
        "scope": "static"
    },
    {
        "description": "Trigger the menu item as if the user clicked on it.",
        "kind": "function",
        "name": "triggerOption",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu item to trigger.",
                "name": "menuOption"
            }
        ],
        "examples": [
            "<caption>Open the help window.</caption>\rMenu.triggerOption('Help...');"
        ],
        "memberof": "Menu",
        "longname": "Menu.triggerOption",
        "scope": "static"
    },
    {
        "description": "Check whether a menu or menu item is enabled. If disabled, the item is grayed out and unusable.\rMenus are enabled by default.",
        "kind": "function",
        "name": "isMenuEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu or menu item to check.",
                "name": "menuName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the menu is enabled, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Report with the Settings > Advanced Menus menu item is enabled.</caption>\rprint(Menu.isMenuEnabled(\"Settings > Advanced Menus\")); // true or false"
        ],
        "memberof": "Menu",
        "longname": "Menu.isMenuEnabled",
        "scope": "static"
    },
    {
        "description": "Set a menu or menu item to be enabled or disabled. If disabled, the item is grayed out and unusable.",
        "kind": "function",
        "name": "setMenuEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the menu or menu item to modify.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the menu will be enabled, otherwise it will be disabled.",
                "name": "isEnabled"
            }
        ],
        "examples": [
            "<caption>Disable the Settings > Advanced Menus menu item.</caption>\rMenu.setMenuEnabled(\"Settings > Advanced Menus\", false);\rprint(Menu.isMenuEnabled(\"Settings > Advanced Menus\")); // false"
        ],
        "memberof": "Menu",
        "longname": "Menu.setMenuEnabled",
        "scope": "static"
    },
    {
        "description": "Triggered when a menu item is clicked (or triggered by {@link Menu.triggerOption}).",
        "kind": "function",
        "name": "menuItemEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item that was clicked.",
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Detect menu item events.</caption>\rfunction onMenuItemEvent(menuItem) {\r    print(\"You clicked on \" + menuItem);\r}\r\rMenu.menuItemEvent.connect(onMenuItemEvent);\r\n     "
        ],
        "memberof": "Menu",
        "longname": "Menu.menuItemEvent",
        "scope": "static"
    },
    {
        "description": "<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"avatar\"</code></td><td></td></tr>\r    <tr><td><code>\"entity\"</code></td><td></td></tr>\r    <tr><td><code>\"overlay\"</code></td><td></td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ItemType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Selection",
        "longname": "Selection.ItemType",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "SelectedItemsList",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the avatars in the selection.",
                "name": "avatars"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the entities in the selection.",
                "name": "entities"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the overlays in the selection.",
                "name": "overlays"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.SelectedItemsList",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "HighlightStyle",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Color of the specified highlight region.",
                "name": "outlineUnoccludedColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "\"\"",
                "name": "outlineOccludedColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "\"\"",
                "name": "fillUnoccludedColor-"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "\"\"",
                "name": "fillOccludedColor-"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Alpha value ranging from <code>0.0</code> (not visible) to <code>1.0</code> \r    (fully opaque) for the specified highlight region.",
                "name": "outlineUnoccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "\"\"",
                "name": "outlineOccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "\"\"",
                "name": "fillUnoccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "\"\"",
                "name": "fillOccludedAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Width of the outline, in pixels.",
                "name": "outlineWidth"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> to enable outline smooth fall-off.",
                "name": "isOutlineSmooth"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.HighlightStyle",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The <code>Selection</code> API provides a means of grouping together avatars, entities, and overlays in named lists.",
        "kind": "namespace",
        "name": "Selection",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "examples": [
            "<caption>Outline an entity when it is grabbed by a controller.</caption>\r// Create a box and copy the following text into the entity's \"Script URL\" field.\r(function () {\r    print(\"Starting highlight script...............\");\r    var _this = this;\r    var prevID = 0;\r    var listName = \"contextOverlayHighlightList\";\r    var listType = \"entity\";\r\r    _this.startNearGrab = function(entityID){\r        if (prevID !== entityID) {\r            Selection.addToSelectedItemsList(listName, listType, entityID);\r            prevID = entityID;\r        }\r    };\r\r    _this.releaseGrab = function(entityID){\r        if (prevID !== 0) {\r            Selection.removeFromSelectedItemsList(\"contextOverlayHighlightList\", listType, prevID);\r            prevID = 0;\r        }\r    };\r\r    var cleanup = function(){\r        Entities.findEntities(MyAvatar.position, 1000).forEach(function(entity) {\r            try {\r                Selection.removeListFromMap(listName);\r            } catch (e) {\r                print(\"Error cleaning up.\");\r            }\r        });\r    };\r\r    Script.scriptEnding.connect(cleanup);\r});"
        ],
        "longname": "Selection",
        "scope": "global"
    },
    {
        "description": "Get the names of all the selection lists.",
        "kind": "function",
        "name": "getListNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<list>"
                    ]
                },
                "description": "An array of names of all the selection lists."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getListNames",
        "scope": "static"
    },
    {
        "description": "Delete a named selection list.",
        "kind": "function",
        "name": "removeListFromMap",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the selection existed and was successfully removed, otherwise <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.removeListFromMap",
        "scope": "static"
    },
    {
        "description": "Add an item to a selection list.",
        "kind": "function",
        "name": "addToSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list to add the item to.",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "Selection.ItemType"
                    ]
                },
                "description": "The type of the item being added.",
                "name": "itemType"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the item to add to the selection.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item was successfully added, otherwise <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.addToSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Remove an item from a selection list.",
        "kind": "function",
        "name": "removeFromSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list to remove the item from.",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "Selection.ItemType"
                    ]
                },
                "description": "The type of the item being removed.",
                "name": "itemType"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the item to remove.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item was successfully removed, otherwise <code>false</code>.\r    <codefalse</code> is returned if the list doesn't contain any data."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.removeFromSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Remove all items from a selection.",
        "kind": "function",
        "name": "clearSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the item was successfully cleared, otherwise <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.clearSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Print out the list of avatars, entities, and overlays in a selection to the <em>debug log</em> (not the script log).",
        "kind": "function",
        "name": "printList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.printList",
        "scope": "static"
    },
    {
        "description": "Get the list of avatars, entities, and overlays stored in a selection list.",
        "kind": "function",
        "name": "getSelectedItemsList",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Selection.SelectedItemsList"
                    ]
                },
                "description": "The content of a selection list. If the list name doesn't exist, the function \r    returns an empty object with no properties."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getSelectedItemsList",
        "scope": "static"
    },
    {
        "description": "Get the names of the highlighted selection lists.",
        "kind": "function",
        "name": "getHighlightedListNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of names of the selection list currently highlight enabled."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getHighlightedListNames",
        "scope": "static"
    },
    {
        "description": "Enable highlighting for a selection list.\rIf the selection list doesn't exist, it will be created.\rAll objects in the list will be displayed with the highlight effect specified.\rThe function can be called several times with different values in the style to modify it.<br />\rNote: This function implicitly calls {@link Selection.enableListToScene}.",
        "kind": "function",
        "name": "enableListHighlight",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            },
            {
                "type": {
                    "names": [
                        "Selection.HighlightStyle"
                    ]
                },
                "description": "The highlight style.",
                "name": "highlightStyle"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "true if the selection was successfully enabled for highlight."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.enableListHighlight",
        "scope": "static"
    },
    {
        "description": "Disable highlighting for the selection list.\rIf the selection list doesn't exist or wasn't enabled for highlighting then nothing happens and <code>false</code> is\rreturned.<br />\rNote: This function implicitly calls {@link Selection.disableListToScene}.",
        "kind": "function",
        "name": "disableListHighlight",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the selection was successfully disabled for highlight, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.disableListHighlight",
        "scope": "static"
    },
    {
        "description": "Enable scene selection for the selection list.\rIf the Selection doesn't exist, it will be created.\rAll objects in the list will be sent to a scene selection.",
        "kind": "function",
        "name": "enableListToScene",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the selection was successfully enabled on the scene, otherwise <code>false</code>."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.enableListToScene",
        "scope": "static"
    },
    {
        "description": "Disable scene selection for the named selection.\rIf the selection list doesn't exist or wasn't enabled on the scene then nothing happens and <code>false</code> is\rreturned.",
        "kind": "function",
        "name": "disableListToScene",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "true if the selection was successfully disabled on the scene, false otherwise."
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.disableListToScene",
        "scope": "static"
    },
    {
        "description": "Get the highlight style values for the a selection list.\rIf the selection doesn't exist or hasn't been highlight enabled yet, an empty object is returned.",
        "kind": "function",
        "name": "getListHighlightStyle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Selection.HighlightStyle"
                    ]
                },
                "description": "highlight style"
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.getListHighlightStyle",
        "scope": "static"
    },
    {
        "description": "Triggered when a list's content changes.",
        "kind": "function",
        "name": "selectedItemsListChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the selection list that changed.",
                "name": "listName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Selection",
        "longname": "Selection.selectedItemsListChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Settings API provides a facility to store and retrieve values that persist between Interface runs.",
        "kind": "namespace",
        "name": "Settings",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Settings",
        "scope": "global"
    },
    {
        "description": "Retrieve the value from a named setting.",
        "kind": "function",
        "name": "getValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the setting.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The value to return if the setting doesn't exist.",
                "name": "defaultValue"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "object"
                    ]
                },
                "description": "The value stored in the named setting if it exists, otherwise the \r    <code>defaultValue</code>."
            }
        ],
        "examples": [
            "<caption>Retrieve non-existent setting values.</caption>\rvar value1 = Settings.getValue(\"Script Example/Nonexistent Key\");\rprint(\"Value: \" + (typeof value1) + \" \" + JSON.stringify(value1));  // string \"\"\r\rvar value2 = Settings.getValue(\"Script Example/Nonexistent Key\", true);\rprint(\"Value: \" + (typeof value2) + \" \" + JSON.stringify(value2));  // boolean true"
        ],
        "memberof": "Settings",
        "longname": "Settings.getValue",
        "scope": "static"
    },
    {
        "description": "Store a value in a named setting. If the setting already exists its value is overwritten, otherwise a new setting is \rcreated. If the value is set to <code>null</code> or <code>undefined</code>, the setting is deleted.",
        "kind": "function",
        "name": "setValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the setting. Be sure to use a unique name if creating a new setting.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number",
                        "boolean",
                        "object",
                        "undefined"
                    ]
                },
                "description": "The value to store in the setting. If <code>null</code> or \r    <code>undefined</code> is specified, the setting is deleted.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Store and retrieve an object value.</caption>\rSettings.setValue(\"Script Example/My Key\", { x: 0, y: 10, z: 0 });\r\rvar value = Settings.getValue(\"Script Example/My Key\");\rprint(\"Value: \" + (typeof value) + \" \" + JSON.stringify(value));  // object {\"x\":0,\"y\":10,\"z\":0}\r\n     "
        ],
        "memberof": "Settings",
        "longname": "Settings.setValue",
        "scope": "static"
    },
    {
        "description": "Exits the application",
        "kind": "function",
        "name": "quit",
        "memberof": "Test",
        "longname": "Test.quit",
        "scope": "static"
    },
    {
        "description": "Waits for all texture transfers to be complete",
        "kind": "function",
        "name": "waitForTextureIdle",
        "memberof": "Test",
        "longname": "Test.waitForTextureIdle",
        "scope": "static"
    },
    {
        "description": "Waits for all pending downloads to be complete",
        "kind": "function",
        "name": "waitForDownloadIdle",
        "memberof": "Test",
        "longname": "Test.waitForDownloadIdle",
        "scope": "static"
    },
    {
        "description": "Waits for all file parsing operations to be complete",
        "kind": "function",
        "name": "waitForProcessingIdle",
        "memberof": "Test",
        "longname": "Test.waitForProcessingIdle",
        "scope": "static"
    },
    {
        "description": "Waits for all pending downloads, parsing and texture transfers to be complete",
        "kind": "function",
        "name": "waitIdle",
        "memberof": "Test",
        "longname": "Test.waitIdle",
        "scope": "static"
    },
    {
        "description": "Waits for establishment of connection to server",
        "kind": "function",
        "name": "waitForConnection",
        "params": [
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "[default=10000] - Number of milliseconds to wait",
                "name": "maxWaitMs"
            }
        ],
        "memberof": "Test",
        "longname": "Test.waitForConnection",
        "scope": "static"
    },
    {
        "description": "Waits a specific number of milliseconds",
        "kind": "function",
        "name": "wait",
        "params": [
            {
                "type": {
                    "names": [
                        "int"
                    ]
                },
                "description": "Number of milliseconds to wait",
                "name": "milliseconds"
            }
        ],
        "memberof": "Test",
        "longname": "Test.wait",
        "scope": "static"
    },
    {
        "description": "Waits for all pending downloads, parsing and texture transfers to be complete",
        "kind": "function",
        "name": "loadTestScene",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of scene to load",
                "name": "sceneFile"
            }
        ],
        "memberof": "Test",
        "longname": "Test.loadTestScene",
        "scope": "static"
    },
    {
        "description": "Clears all caches",
        "kind": "function",
        "name": "clear",
        "memberof": "Test",
        "longname": "Test.clear",
        "scope": "static"
    },
    {
        "description": "Start recording Chrome compatible tracing events\rlogRules can be used to specify a set of logging category rules to limit what gets captured",
        "kind": "function",
        "name": "startTracing",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "[defaultValue=\"\"] - See implementation for explanation",
                "name": "logrules"
            }
        ],
        "memberof": "Test",
        "longname": "Test.startTracing",
        "scope": "static"
    },
    {
        "description": "Stop recording Chrome compatible tracing events and serialize recorded events to a file\rUsing a filename with a .gz extension will automatically compress the output file",
        "kind": "function",
        "name": "stopTracing",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of file to save to",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "bool"
                    ]
                },
                "description": "True if successful."
            }
        ],
        "memberof": "Test",
        "longname": "Test.stopTracing",
        "scope": "static"
    },
    {
        "description": "Starts a specific trace event",
        "kind": "function",
        "name": "startTraceEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of event",
                "name": "name"
            }
        ],
        "memberof": "Test",
        "longname": "Test.startTraceEvent",
        "scope": "static"
    },
    {
        "description": "Stop a specific name event\rUsing a filename with a .gz extension will automatically compress the output file",
        "kind": "function",
        "name": "endTraceEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of event",
                "name": "filename"
            }
        ],
        "memberof": "Test",
        "longname": "Test.endTraceEvent",
        "scope": "static"
    },
    {
        "description": "Write detailed timing stats of next physics stepSimulation() to filename",
        "kind": "function",
        "name": "savePhysicsSimulationStats",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of file to save to",
                "name": "filename"
            }
        ],
        "memberof": "Test",
        "longname": "Test.savePhysicsSimulationStats",
        "scope": "static"
    },
    {
        "description": "Profiles a specific function",
        "kind": "function",
        "name": "savePhysicsSimulationStats",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name used to reference the function",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Function to profile",
                "name": "function"
            }
        ],
        "memberof": "Test",
        "longname": "Test.savePhysicsSimulationStats",
        "scope": "static"
    },
    {
        "description": "Clear all caches (menu command Reload Content)",
        "kind": "function",
        "name": "clearCaches",
        "memberof": "Test",
        "longname": "Test.clearCaches",
        "scope": "static"
    },
    {
        "description": "Save a JSON object to a file in the test results location",
        "kind": "function",
        "name": "saveObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the object",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of file to save to",
                "name": "filename"
            }
        ],
        "memberof": "Test",
        "longname": "Test.saveObject",
        "scope": "static"
    },
    {
        "description": "Maximizes the window",
        "kind": "function",
        "name": "showMaximized",
        "memberof": "Test",
        "longname": "Test.showMaximized",
        "scope": "static"
    },
    {
        "description": "Values higher than 0 will create replicas of other-avatars when entering a domain for testing purpouses",
        "kind": "function",
        "name": "setOtherAvatarsReplicaCount",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of replicas we want to create",
                "name": "count"
            }
        ],
        "memberof": "Test",
        "longname": "Test.setOtherAvatarsReplicaCount",
        "scope": "static"
    },
    {
        "description": "Return the number of replicas that are being created of other-avatars when entering a domain",
        "kind": "function",
        "name": "getOtherAvatarsReplicaCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Current number of replicas of other-avatars."
            }
        ],
        "memberof": "Test",
        "longname": "Test.getOtherAvatarsReplicaCount",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Wallet",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "walletStatus"
            }
        ],
        "longname": "Wallet",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "refreshWalletStatus",
        "memberof": "Wallet",
        "longname": "Wallet.refreshWalletStatus",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getWalletStatus",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Wallet",
        "longname": "Wallet.getWalletStatus",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "proveAvatarEntityOwnershipVerification",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            }
        ],
        "memberof": "Wallet",
        "longname": "Wallet.proveAvatarEntityOwnershipVerification",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "walletStatusChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Wallet",
        "longname": "Wallet.walletStatusChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "walletNotSetup",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Wallet",
        "longname": "Wallet.walletNotSetup",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "ownershipVerificationSuccess",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Wallet",
        "longname": "Wallet.ownershipVerificationSuccess",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "ownershipVerificationFailed",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Wallet",
        "longname": "Wallet.ownershipVerificationFailed",
        "scope": "static"
    },
    {
        "description": "<p>The buttons that may be included in a message box created by {@link Window.openMessageBox|openMessageBox} are defined by\rnumeric values:\r<table>\r  <thead>\r    <tr>\r      <th>Button</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr> <td><strong>NoButton</strong></td> <td><code>0x0</code></td> <td>An invalid button.</td> </tr>\r    <tr> <td><strong>Ok</strong></td> <td><code>0x400</code></td> <td>\"OK\"</td> </tr>\r    <tr> <td><strong>Save</strong></td> <td><code>0x800</code></td> <td>\"Save\"</td> </tr>\r    <tr> <td><strong>SaveAll</strong></td> <td><code>0x1000</code></td> <td>\"Save All\"</td> </tr>\r    <tr> <td><strong>Open</strong></td> <td><code>0x2000</code></td> <td>\"Open\"</td> </tr>\r    <tr> <td><strong>Yes</strong></td> <td><code>0x4000</code></td> <td>\"Yes\"</td> </tr>\r    <tr> <td><strong>YesToAll</strong></td> <td><code>0x8000</code></td> <td>\"Yes to All\"</td> </tr>\r    <tr> <td><strong>No</strong></td> <td><code>0x10000</code></td> <td>\"No\"</td> </tr>\r    <tr> <td><strong>NoToAll</strong></td> <td><code>0x20000</code></td> <td>\"No to All\"</td> </tr>\r    <tr> <td><strong>Abort</strong></td> <td><code>0x40000</code></td> <td>\"Abort\"</td> </tr>\r    <tr> <td><strong>Retry</strong></td> <td><code>0x80000</code></td> <td>\"Retry\"</td> </tr>\r    <tr> <td><strong>Ignore</strong></td> <td><code>0x100000</code></td> <td>\"Ignore\"</td> </tr>\r    <tr> <td><strong>Close</strong></td> <td><code>0x200000</code></td> <td>\"Close\"</td> </tr>\r    <tr> <td><strong>Cancel</strong></td> <td><code>0x400000</code></td> <td>\"Cancel\"</td> </tr>\r    <tr> <td><strong>Discard</strong></td> <td><code>0x800000</code></td> <td>\"Discard\" or \"Don't Save\"</td> </tr>\r    <tr> <td><strong>Help</strong></td> <td><code>0x1000000</code></td> <td>\"Help\"</td> </tr>\r    <tr> <td><strong>Apply</strong></td> <td><code>0x2000000</code></td> <td>\"Apply\"</td> </tr>\r    <tr> <td><strong>Reset</strong></td> <td><code>0x4000000</code></td> <td>\"Reset\"</td> </tr>\r    <tr> <td><strong>RestoreDefaults</strong></td> <td><code>0x8000000</code></td> <td>\"Restore Defaults\"</td> </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "MessageBoxButton",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Window",
        "longname": "Window.MessageBoxButton",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Window API provides various facilities not covered elsewhere: window dimensions, window focus, normal or entity camera\rview, clipboard, announcements, user connections, common dialog boxes, snapshots, file import, domain changes, domain \rphysics.",
        "kind": "namespace",
        "name": "Window",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width of the drawable area of the Interface window (i.e., without borders or other\r    chrome), in pixels. <em>Read-only.</em>",
                "name": "innerWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height of the drawable area of the Interface window (i.e., without borders or other\r    chrome), in pixels. <em>Read-only.</em>",
                "name": "innerHeight"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Provides facilities for working with your current metaverse location. See {@link location}.",
                "name": "location"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The x display coordinate of the top left corner of the drawable area of the Interface window. \r    <em>Read-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The y display coordinate of the top left corner of the drawable area of the Interface window. \r    <em>Read-only.</em>",
                "name": "y"
            }
        ],
        "longname": "Window",
        "scope": "global"
    },
    {
        "description": "Check if the Interface window has focus.",
        "kind": "function",
        "name": "hasFocus",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Interface window has focus, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.hasFocus",
        "scope": "static"
    },
    {
        "description": "Make the Interface window have focus. On Windows, if Interface doesn't already have focus, the task bar icon flashes to \rindicate that Interface wants attention but focus isn't taken away from the application that the user is using.",
        "kind": "function",
        "name": "setFocus",
        "memberof": "Window",
        "longname": "Window.setFocus",
        "scope": "static"
    },
    {
        "description": "Raise the Interface window if it is minimized. If raised, the window gains focus.",
        "kind": "function",
        "name": "raise",
        "memberof": "Window",
        "longname": "Window.raise",
        "scope": "static"
    },
    {
        "description": "Display a dialog with the specified message and an \"OK\" button. The dialog is non-modal; the script continues without\rwaiting for a user response.",
        "kind": "function",
        "name": "alert",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The message to display.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Display a friendly greeting.</caption>\rWindow.alert(\"Welcome!\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.alert",
        "scope": "static"
    },
    {
        "description": "Prompt the user to confirm something. Displays a modal dialog with a message plus \"Yes\" and \"No\" buttons.\rresponds.",
        "kind": "function",
        "name": "confirm",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The question to display.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the user selects \"Yes\", otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a yes/no answer.</caption>\rvar answer = Window.confirm(\"Are you sure?\");\rprint(answer);  // true or false"
        ],
        "memberof": "Window",
        "longname": "Window.confirm",
        "scope": "static"
    },
    {
        "description": "Prompt the user to enter some text. Displays a modal dialog with a message and a text box, plus \"OK\" and \"Cancel\" \rbuttons.",
        "kind": "function",
        "name": "prompt",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The question to display.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The default answer text.",
                "name": "defaultText"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text that the user entered if they select \"OK\", otherwise \"\"."
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a text answer.</caption>\rvar answer = Window.prompt(\"Question\", \"answer\");\rif (answer === \"\") {\r    print(\"User canceled\");\r} else {\r    print(\"User answer: \" + answer);\r}"
        ],
        "memberof": "Window",
        "longname": "Window.prompt",
        "scope": "static"
    },
    {
        "description": "Prompt the user to enter some text. Displays a non-modal dialog with a message and a text box, plus \"OK\" and \"Cancel\" \rbuttons. A {@link Window.promptTextChanged|promptTextChanged} signal is emitted when the user OKs the dialog; no signal \ris emitted if the user cancels the dialog.",
        "kind": "function",
        "name": "promptAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The question to display.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The default answer text.",
                "name": "defaultText"
            }
        ],
        "examples": [
            "<caption>Ask the user a question requiring a text answer without waiting for the answer.</caption>\rfunction onPromptTextChanged(text) {\r    print(\"User answer: \" + text);\r}\rWindow.promptTextChanged.connect(onPromptTextChanged);\r\rWindow.promptAsync(\"Question\", \"answer\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.promptAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a directory. Displays a modal dialog that navigates the directory tree.",
        "kind": "function",
        "name": "browseDir",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path of the directory if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to choose a directory.</caption>\rvar directory = Window.browseDir(\"Select Directory\", Paths.resources);\rprint(\"Directory: \" + directory);"
        ],
        "memberof": "Window",
        "longname": "Window.browseDir",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a directory. Displays a non-modal dialog that navigates the directory tree. A\r{@link Window.browseDirChanged|browseDirChanged} signal is emitted when a directory is chosen; no signal is emitted if\rthe user cancels the dialog.",
        "kind": "function",
        "name": "browseDirAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            }
        ],
        "examples": [
            "<caption>Ask the user to choose a directory without waiting for the answer.</caption>\rfunction onBrowseDirChanged(directory) {\r    print(\"Directory: \" + directory);\r}\rWindow.browseDirChanged.connect(onBrowseDirChanged);\r\rWindow.browseDirAsync(\"Select Directory\", Paths.resources);\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseDirAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a file. Displays a modal dialog that navigates the directory tree.",
        "kind": "function",
        "name": "browse",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and \r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to choose an image file.</caption>\rvar filename = Window.browse(\"Select Image File\", Paths.resources, \"Images (*.png *.jpg *.svg)\");\rprint(\"File: \" + filename);"
        ],
        "memberof": "Window",
        "longname": "Window.browse",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose a file. Displays a non-modal dialog that navigates the directory tree. A\r{@link Window.browseChanged|browseChanged} signal is emitted when a file is chosen; no signal is emitted if the user\rcancels the dialog.",
        "kind": "function",
        "name": "browseAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "<caption>Ask the user to choose an image file without waiting for the answer.</caption>\rfunction onBrowseChanged(filename) {\r    print(\"File: \" + filename);\r}\rWindow.browseChanged.connect(onBrowseChanged);\r\rWindow.browseAsync(\"Select Image File\", Paths.resources, \"Images (*.png *.jpg *.svg)\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to specify the path and name of a file to save to. Displays a model dialog that navigates the directory\rtree and allows the user to type in a file name.",
        "kind": "function",
        "name": "save",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file if one is specified, otherwise <code>null</code>. If a single file type\r    is specified in the nameFilter, that file type extension is automatically appended to the result when appropriate."
            }
        ],
        "examples": [
            "<caption>Ask the user to specify a file to save to.</caption>\rvar filename = Window.save(\"Save to JSON file\", Paths.resources, \"*.json\");\rprint(\"File: \" + filename);"
        ],
        "memberof": "Window",
        "longname": "Window.save",
        "scope": "static"
    },
    {
        "description": "Prompt the user to specify the path and name of a file to save to. Displays a non-model dialog that navigates the\rdirectory tree and allows the user to type in a file name. A {@link Window.saveFileChanged|saveFileChanged} signal is\remitted when a file is specified; no signal is emitted if the user cancels the dialog.",
        "kind": "function",
        "name": "saveAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "<caption>Ask the user to specify a file to save to without waiting for an answer.</caption>\rfunction onSaveFileChanged(filename) {\r    print(\"File: \" + filename);\r}\rWindow.saveFileChanged.connect(onSaveFileChanged);\r\rWindow.saveAsync(\"Save to JSON file\", Paths.resources, \"*.json\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.saveAsync",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose an Asset Server item. Displays a modal dialog that navigates the tree of assets on the Asset\rServer.",
        "kind": "function",
        "name": "browseAssets",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and \r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the asset if one is chosen, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Ask the user to select an FBX asset.</caption>\rvar asset = Window.browseAssets(\"Select FBX File\", \"/\", \"*.fbx\");\rprint(\"FBX file: \" + asset);"
        ],
        "memberof": "Window",
        "longname": "Window.browseAssets",
        "scope": "static"
    },
    {
        "description": "Prompt the user to choose an Asset Server item. Displays a non-modal dialog that navigates the tree of assets on the \rAsset Server. A {@link Window.assetsDirChanged|assetsDirChanged} signal is emitted when an asset is chosen; no signal is\remitted if the user cancels the dialog.",
        "kind": "function",
        "name": "browseAssetsAsync",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The title to display at the top of the dialog.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The initial directory to start browsing at.",
                "name": "directory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The types of files to display. Examples: <code>\"*.json\"</code> and\r    <code>\"Images (*.png *.jpg *.svg)\"</code>. All files are displayed if a filter isn't specified.",
                "name": "nameFilter"
            }
        ],
        "examples": [
            "function onAssetsDirChanged(asset) {\r    print(\"FBX file: \" + asset);\r}\rWindow.assetsDirChanged.connect(onAssetsDirChanged);\r\rWindow.browseAssetsAsync(\"Select FBX File\", \"/\", \"*.fbx\");\rprint(\"Script continues without waiting\");"
        ],
        "memberof": "Window",
        "longname": "Window.browseAssetsAsync",
        "scope": "static"
    },
    {
        "description": "Open the Asset Browser dialog. If a file to upload is specified, the user is prompted to enter the folder and name to\rmap the file to on the asset server.",
        "kind": "function",
        "name": "showAssetServer",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The path and name of a file to upload to the asset server.",
                "name": "uploadFile"
            }
        ],
        "examples": [
            "<caption>Upload a file to the asset server.</caption>\rvar filename = Window.browse(\"Select File to Add to Asset Server\", Paths.resources);\rprint(\"File: \" + filename);\rWindow.showAssetServer(filename);"
        ],
        "memberof": "Window",
        "longname": "Window.showAssetServer",
        "scope": "static"
    },
    {
        "description": "Get Interface's build number.",
        "kind": "function",
        "name": "checkVersion",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Interface's build number."
            }
        ],
        "memberof": "Window",
        "longname": "Window.checkVersion",
        "scope": "static"
    },
    {
        "description": "Get the signature for Interface's protocol version.",
        "kind": "function",
        "name": "protocolSignature",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string uniquely identifying the version of the metaverse protocol that Interface is using."
            }
        ],
        "memberof": "Window",
        "longname": "Window.protocolSignature",
        "scope": "static"
    },
    {
        "description": "Copies text to the operating system's clipboard.",
        "kind": "function",
        "name": "copyToClipboard",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text to copy to the operating system's clipboard.",
                "name": "text"
            }
        ],
        "memberof": "Window",
        "longname": "Window.copyToClipboard",
        "scope": "static"
    },
    {
        "description": "Takes a snapshot of the current Interface view from the primary camera. When a still image only is captured, \r{@link Window.stillSnapshotTaken|stillSnapshotTaken} is emitted; when a still image plus moving images are captured, \r{@link Window.processingGifStarted|processingGifStarted} and {@link Window.processingGifCompleted|processingGifCompleted}\rare emitted. The path to store the snapshots and the length of the animated GIF to capture are specified in Settings >\rGeneral > Snapshots.\r\rIf user has supplied a specific filename for the snapshot:\r    If the user's requested filename has a suffix that's contained within SUPPORTED_IMAGE_FORMATS,\r        DON'T append \".jpg\" to the filename. QT will save the image in the format associated with the\r        filename's suffix.\r        If you want lossless Snapshots, supply a `.png` filename. Otherwise, use `.jpeg` or `.jpg`.\r    Otherwise, \".jpg\" is appended to the user's requested filename so that the image is saved in JPG format.\rIf the user hasn't supplied a specific filename for the snapshot:\r    Save the snapshot in JPG format according to FILENAME_PATH_FORMAT",
        "kind": "function",
        "name": "takeSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code>, a moving image is captured as an animated GIF in addition \r    to a still image.",
                "name": "includeAnimated"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "The width/height ratio of the snapshot required. If the value is <code>0</code> the\r    full resolution is used (window dimensions in desktop mode; HMD display dimensions in HMD mode), otherwise one of the\r    dimensions is adjusted in order to match the aspect ratio.",
                "name": "aspectRatio"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "If this parameter is not given, the image will be saved as \"hifi-snap-by-&lt;user name&gt-YYYY-MM-DD_HH-MM-SS\".\r    If this parameter is <code>\"\"</code> then the image will be saved as \".jpg\".\r    Otherwise, the image will be saved to this filename, with an appended \".jpg\".",
                "name": "filename"
            }
        ],
        "examples": [
            "<caption>Using the snapshot function and signals.</caption>\rfunction onStillSnapshotTaken(path, notify) {\r    print(\"Still snapshot taken: \" + path);\r    print(\"Notify: \" + notify);\r}\r\rfunction onProcessingGifStarted(stillPath) {\r    print(\"Still snapshot taken: \" + stillPath);\r}\r\rfunction onProcessingGifCompleted(animatedPath) {\r    print(\"Animated snapshot taken: \" + animatedPath);\r}\r\rWindow.stillSnapshotTaken.connect(onStillSnapshotTaken);\rWindow.processingGifStarted.connect(onProcessingGifStarted);\rWindow.processingGifCompleted.connect(onProcessingGifCompleted);\r\rvar notify = true;\rvar animated = true;\rvar aspect = 1920 / 1080;\rvar filename = \"\";\rWindow.takeSnapshot(notify, animated, aspect, filename);"
        ],
        "memberof": "Window",
        "longname": "Window.takeSnapshot",
        "scope": "static"
    },
    {
        "description": "Takes a still snapshot of the current view from the secondary camera that can be set up through the {@link Render} API.",
        "kind": "function",
        "name": "takeSecondaryCameraSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "If this parameter is not given, the image will be saved as \"hifi-snap-by-&lt;user name&gt;-YYYY-MM-DD_HH-MM-SS\".\r    If this parameter is <code>\"\"</code> then the image will be saved as \".jpg\".\r    Otherwise, the image will be saved to this filename, with an appended \".jpg\".",
                "name": "filename"
            }
        ],
        "memberof": "Window",
        "longname": "Window.takeSecondaryCameraSnapshot",
        "scope": "static"
    },
    {
        "description": "Takes a 360&deg; snapshot at a given position for the secondary camera. The secondary camera does not need to have been \r    set up.",
        "kind": "function",
        "name": "takeSecondaryCamera360Snapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the camera for the snapshot.",
                "name": "cameraPosition"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then the snapshot is saved as a cube map image, \r    otherwise is saved as an equirectangular image.",
                "name": "cubemapOutputFormat"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "This value is passed on through the {@link Window.stillSnapshotTaken|stillSnapshotTaken}\r    signal.",
                "name": "notify"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "If this parameter is not supplied, the image will be saved as \"hifi-snap-by-&lt;user name&gt;-YYYY-MM-DD_HH-MM-SS\".\r    If this parameter is <code>\"\"</code> then the image will be saved as \".jpg\".\r    Otherwise, the image will be saved to this filename, with an appended \".jpg\".",
                "name": "filename"
            }
        ],
        "memberof": "Window",
        "longname": "Window.takeSecondaryCamera360Snapshot",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Window.connectionAdded|connectionAdded} or a {@link Window.connectionError|connectionError} signal that\rindicates whether or not a user connection was successfully made using the Web API.",
        "kind": "function",
        "name": "makeConnection",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then {@link Window.connectionAdded|connectionAdded} is emitted, otherwise\r    {@link Window.connectionError|connectionError} is emitted.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Descriptive text about the connection success or error. This is sent in the signal emitted.",
                "name": "description"
            }
        ],
        "memberof": "Window",
        "longname": "Window.makeConnection",
        "scope": "static"
    },
    {
        "description": "Display a notification message. Notifications are displayed in panels by the default script, nofications.js. An\r{@link Window.announcement|announcement} signal is emitted when this function is called.",
        "kind": "function",
        "name": "displayAnnouncement",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The announcement message.",
                "name": "message"
            }
        ],
        "examples": [
            "<caption>Send and capture an announcement message.</caption>\rfunction onAnnouncement(message) {\r    // The message is also displayed as a notification by notifications.js.\r    print(\"Announcement: \" + message);\r}\rWindow.announcement.connect(onAnnouncement);\r\rWindow.displayAnnouncement(\"Hello\");"
        ],
        "memberof": "Window",
        "longname": "Window.displayAnnouncement",
        "scope": "static"
    },
    {
        "description": "Prepare a snapshot ready for sharing. A {@link Window.snapshotShared|snapshotShared} signal is emitted when the snapshot\rhas been prepared.",
        "kind": "function",
        "name": "shareSnapshot",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the image file to share.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The metaverse location where the snapshot was taken.",
                "name": "href"
            }
        ],
        "memberof": "Window",
        "longname": "Window.shareSnapshot",
        "scope": "static"
    },
    {
        "description": "Check to see if physics is active for you in the domain you're visiting - there is a delay between your arrival at a\rdomain and physics becoming active for you in that domain.",
        "kind": "function",
        "name": "isPhysicsEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if physics is currently active for you, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Wait for physics to be enabled when you change domains.</caption>\rfunction checkForPhysics() {\r    var isPhysicsEnabled = Window.isPhysicsEnabled();\r    print(\"Physics enabled: \" + isPhysicsEnabled);\r    if (!isPhysicsEnabled) {\r        Script.setTimeout(checkForPhysics, 1000);\r    }\r}\r\rfunction onDomainChanged(domain) {\r    print(\"Domain changed: \" + domain);\r    Script.setTimeout(checkForPhysics, 1000);\r}\r\rWindow.domainChanged.connect(onDomainChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.isPhysicsEnabled",
        "scope": "static"
    },
    {
        "description": "Set what to show on the PC display: normal view or entity camera view. The entity camera is configured using\r{@link Camera.setCameraEntity} and {@link Camera|Camera.mode}.",
        "kind": "function",
        "name": "setDisplayTexture",
        "params": [
            {
                "type": {
                    "names": [
                        "Window.DisplayTexture"
                    ]
                },
                "description": "The view to display.",
                "name": "texture"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display texture was successfully set, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.setDisplayTexture",
        "scope": "static"
    },
    {
        "description": "<p>The views that may be displayed on the PC display.</p>\r<table>\r  <thead>\r    <tr>\r      <th>Value</th>\r      <th>View Displayed</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><code>\"\"</code></td>\r      <td>Normal view.</td>\r    </tr>\r    <tr>\r      <td><code>\"resource://spectatorCameraFrame\"</code></td>\r      <td>Entity camera view.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "DisplayTexture",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Window",
        "longname": "Window.DisplayTexture",
        "scope": "static"
    },
    {
        "description": "Check if a 2D point is within the desktop window if in desktop mode, or the drawable area of the HUD overlay if in HMD\rmode.",
        "kind": "function",
        "name": "isPointOnDesktopWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point to check.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the point is within the window or HUD, otherwise <code>false</code>."
            }
        ],
        "memberof": "Window",
        "longname": "Window.isPointOnDesktopWindow",
        "scope": "static"
    },
    {
        "description": "Get the size of the drawable area of the Interface window if in desktop mode or the HMD rendering surface if in HMD mode.",
        "kind": "function",
        "name": "getDeviceSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The width and height of the Interface window or HMD rendering surface, in pixels."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getDeviceSize",
        "scope": "static"
    },
    {
        "description": "Gets the last domain connection error when a connection is refused.",
        "kind": "function",
        "name": "getLastDomainConnectionError",
        "returns": [
            {
                "type": {
                    "names": [
                        "Window.ConnectionRefusedReason"
                    ]
                },
                "description": "Integer number that enumerates the last domain connection refused."
            }
        ],
        "memberof": "Window",
        "longname": "Window.getLastDomainConnectionError",
        "scope": "static"
    },
    {
        "description": "Open a non-modal message box that can have a variety of button combinations. See also, \r{@link Window.updateMessageBox|updateMessageBox} and {@link Window.closeMessageBox|closeMessageBox}.",
        "kind": "function",
        "name": "openMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title to display for the message box.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Text to display in the message box.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The buttons to display on the message box; one or more button values added\r    together.",
                "name": "buttons"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The button that has focus when the message box is opened.",
                "name": "defaultButton"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box created."
            }
        ],
        "examples": [
            "<caption>Ask the user whether that want to reset something.</caption>\rvar messageBox;\rvar resetButton = 0x4000000;\rvar cancelButton = 0x400000;\r\rfunction onMessageBoxClosed(id, button) {\r    if (id === messageBox) {\r        if (button === resetButton) {\r            print(\"Reset\");\r        } else {\r            print(\"Don't reset\");\r        }\r    }\r}\rWindow.messageBoxClosed.connect(onMessageBoxClosed);\r\rmessageBox = Window.openMessageBox(\"Reset Something\", \r    \"Do you want to reset something?\",\r    resetButton + cancelButton, cancelButton);"
        ],
        "memberof": "Window",
        "longname": "Window.openMessageBox",
        "scope": "static"
    },
    {
        "description": "Open a URL in the Interface window or other application, depending on the URL's scheme. If the URL starts with \r<code>hifi://</code> then that URL is navigated to in Interface, otherwise the URL is opened in the application the OS \rassociates with the URL's scheme (e.g., a Web browser for <code>http://</code>).",
        "kind": "function",
        "name": "openUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL to open.",
                "name": "url"
            }
        ],
        "memberof": "Window",
        "longname": "Window.openUrl",
        "scope": "static"
    },
    {
        "description": "Open an Android activity and optionally return back to the scene when the activity is completed. <em>Android only.</em>",
        "kind": "function",
        "name": "openAndroidActivity",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the activity to open: one of <code>\"Home\"</code>, <code>\"Login\"</code>, or \r    <code>\"Privacy Policy\"</code>.",
                "name": "activityName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the user is automatically returned back to the scene when the \r    activity is completed.",
                "name": "backToScene"
            }
        ],
        "memberof": "Window",
        "longname": "Window.openAndroidActivity",
        "scope": "static"
    },
    {
        "description": "Update the content of a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "updateMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The title to display for the message box.",
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Text to display in the message box.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The buttons to display on the message box; one or more button values added\r    together.",
                "name": "buttons"
            },
            {
                "type": {
                    "names": [
                        "Window.MessageBoxButton"
                    ]
                },
                "description": "The button that has focus when the message box is opened.",
                "name": "defaultButton"
            }
        ],
        "memberof": "Window",
        "longname": "Window.updateMessageBox",
        "scope": "static"
    },
    {
        "description": "Close a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "closeMessageBox",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box.",
                "name": "id"
            }
        ],
        "memberof": "Window",
        "longname": "Window.closeMessageBox",
        "scope": "static"
    },
    {
        "description": "Triggered when you change the domain you're visiting. <strong>Warning:</strong> Is not emitted if you go to a domain \rthat isn't running.",
        "kind": "function",
        "name": "domainChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The domain's URL.",
                "name": "domainURL"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when you change domains.</caption>\rfunction onDomainChanged(domain) {\r    print(\"Domain changed: \" + domain);\r}\r\rWindow.domainChanged.connect(onDomainChanged);"
        ],
        "memberof": "Window",
        "longname": "Window.domainChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to navigate to a *.json, *.svo, or *.svo.json URL in a Web browser within Interface.",
        "kind": "function",
        "name": "svoImportRequested",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the file to import.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.svoImportRequested",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to visit a domain but are refused connection.",
        "kind": "function",
        "name": "domainConnectionRefused",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the refusal.",
                "name": "reasonMessage"
            },
            {
                "type": {
                    "names": [
                        "Window.ConnectionRefusedReason"
                    ]
                },
                "description": "Integer number that enumerates the reason for the refusal.",
                "name": "reasonCode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Extra information about the refusal.",
                "name": "extraInfo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.domainConnectionRefused",
        "scope": "static"
    },
    {
        "description": "Triggered when you try to visit a domain but are redirected into the error state.",
        "kind": "function",
        "name": "redirectErrorStateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the user has been redirected to the error URL.",
                "name": "isInErrorState"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.redirectErrorStateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when a still snapshot has been taken by calling {@link Window.takeSnapshot|takeSnapshot} with \r    <code>includeAnimated = false</code> or {@link Window.takeSecondaryCameraSnapshot|takeSecondaryCameraSnapshot}.",
        "kind": "function",
        "name": "stillSnapshotTaken",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the snapshot image file.",
                "name": "pathStillSnapshot"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value of the <code>notify</code> parameter that {@link Window.takeSnapshot|takeSnapshot}\r    was called with.",
                "name": "notify"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.stillSnapshotTaken",
        "scope": "static"
    },
    {
        "description": "Triggered when a still 360&deg; snapshot has been taken by calling \r    {@link Window.takeSecondaryCamera360Snapshot|takeSecondaryCamera360Snapshot}.",
        "kind": "function",
        "name": "snapshot360Taken",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the snapshot image file.",
                "name": "pathStillSnapshot"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "The value of the <code>notify</code> parameter that {@link Window.takeSecondaryCamera360Snapshot|takeSecondaryCamera360Snapshot}\r    was called with.",
                "name": "notify"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.snapshot360Taken",
        "scope": "static"
    },
    {
        "description": "Triggered when a snapshot submitted via {@link Window.shareSnapshot|shareSnapshot} is ready for sharing. The snapshot\rmay then be shared via the {@link Account.metaverseServerURL} Web API.",
        "kind": "function",
        "name": "snapshotShared",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an error was encountered preparing the snapshot for sharing, otherwise\r    <code>false</code>.",
                "name": "isError"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "JSON-formatted information about the snapshot.",
                "name": "reply"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.snapshotShared",
        "scope": "static"
    },
    {
        "description": "Triggered when the snapshot images have been captured by {@link Window.takeSnapshot|takeSnapshot} and the GIF is\r    starting to be processed.",
        "kind": "function",
        "name": "processingGifStarted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the still snapshot image file.",
                "name": "pathStillSnapshot"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.processingGifStarted",
        "scope": "static"
    },
    {
        "description": "Triggered when a GIF has been prepared of the snapshot images captured by {@link Window.takeSnapshot|takeSnapshot}.",
        "kind": "function",
        "name": "processingGifCompleted",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the moving snapshot GIF file.",
                "name": "pathAnimatedSnapshot"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.processingGifCompleted",
        "scope": "static"
    },
    {
        "description": "Triggered when you've successfully made a user connection.",
        "kind": "function",
        "name": "connectionAdded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the success.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.connectionAdded",
        "scope": "static"
    },
    {
        "description": "Triggered when you failed to make a user connection.",
        "kind": "function",
        "name": "connectionError",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A description of the error.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.connectionError",
        "scope": "static"
    },
    {
        "description": "Triggered when a message is announced by {@link Window.displayAnnouncement|displayAnnouncement}.",
        "kind": "function",
        "name": "announcement",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message text.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.announcement",
        "scope": "static"
    },
    {
        "description": "Triggered when the user closes a message box that was opened with {@link Window.openMessageBox|openMessageBox}.",
        "kind": "function",
        "name": "messageBoxClosed",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the message box that was closed.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The button that the user clicked. If the user presses Esc, the Cancel button value is returned,\r   whether or not the Cancel button is displayed in the message box.",
                "name": "button"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.messageBoxClosed",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a directory in a {@link Window.browseDirAsync|browseDirAsync} dialog.",
        "kind": "function",
        "name": "browseDirChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The directory the user chose in the dialog.",
                "name": "directory"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.browseDirChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses an asset in a {@link Window.browseAssetsAsync|browseAssetsAsync} dialog.",
        "kind": "function",
        "name": "assetsDirChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the asset the user chose in the dialog.",
                "name": "asset"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.assetsDirChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user specifies a file in a {@link Window.saveAsync|saveAsync} dialog.",
        "kind": "function",
        "name": "saveFileChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file that the user specified in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.saveFileChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user chooses a file in a {@link Window.browseAsync|browseAsync} dialog.",
        "kind": "function",
        "name": "browseChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path and name of the file the user chose in the dialog.",
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.browseChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the user OKs a {@link Window.promptAsync|promptAsync} dialog.",
        "kind": "function",
        "name": "promptTextChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text the user entered in the dialog.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Window",
        "longname": "Window.promptTextChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the position or size of the Interface window changes.",
        "kind": "function",
        "name": "geometryChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the drawable area of the Interface window.",
                "name": "geometry"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report the position of size of the Interface window when it changes.</caption>\rfunction onWindowGeometryChanged(rect) {\r    print(\"Window geometry: \" + JSON.stringify(rect));\r}\r\rWindow.geometryChanged.connect(onWindowGeometryChanged);\r\n     "
        ],
        "memberof": "Window",
        "longname": "Window.geometryChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>API to help manage your Avatar's input",
        "kind": "namespace",
        "name": "AvatarInputs",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "cameraEnabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "cameraMuted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "isHMD"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "showAudioTools"
            }
        ],
        "longname": "AvatarInputs",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "loudnessToAudioLevel",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "loudness"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.loudnessToAudioLevel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setShowAudioTools",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "showAudioTools"
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.setShowAudioTools",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "cameraEnabledChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.cameraEnabledChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "cameraMutedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.cameraMutedChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isHMDChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.isHMDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "showAudioToolsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "show"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.showAudioToolsChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetSensors",
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.resetSensors",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "toggleCameraMute",
        "memberof": "AvatarInputs",
        "longname": "AvatarInputs.toggleCameraMute",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Snapshot",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Snapshot",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "snapshotLocationSet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "location"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Snapshot",
        "longname": "Snapshot.snapshotLocationSet",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSnapshotsLocation",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Snapshot",
        "longname": "Snapshot.getSnapshotsLocation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSnapshotsLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "String"
                    ]
                },
                "name": "location"
            }
        ],
        "memberof": "Snapshot",
        "longname": "Snapshot.setSnapshotsLocation",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Stats",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "expanded"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timingExpanded"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "monospaceFont"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "How often the app is creating new gpu::Frames. <em>Read-only.</em>",
                "name": "renderrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "How often the display plugin is presenting to the device. <em>Read-only.</em>",
                "name": "presentrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "How often the display device is reprojecting old frames. <em>Read-only.</em>",
                "name": "stutterrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "appdropped"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "longsubmits"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "longrenders"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "longframes"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "presentnewrate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "presentdroprate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gameLoopRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "physicsObjectCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "updatedAvatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "notUpdatedAvatarCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "packetInCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "packetOutCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "mbpsIn"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "mbpsOut"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "assetMbpsIn"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "assetMbpsOut"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "entitiesPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "assetPing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "messagePing"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "speed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerInKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerInPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerOutKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarMixerOutPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "myAvatarSendRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerInKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerInPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerOutKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerOutPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioMixerPps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioOutboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioSilentOutboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioAudioInboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioSilentInboundPPS"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioPacketLoss"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioCodec"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "audioNoiseGate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "entityPacketsInKbps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloads"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloadLimit"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloadsPending"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "downloadUrls"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "processing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "processingPending"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "triangles"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "materialSwitches"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemConsidered"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemOutOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemTooSmall"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "itemRendered"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowConsidered"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowOutOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowTooSmall"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "shadowRendered"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sendingMode"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "packetStats"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lodStatus"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timingStats"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gameUpdateStats"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverElements"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverInternal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "serverLeaves"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "localElements"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "localInternal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "localLeaves"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "rectifiedTextureCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "decimatedTextureCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuBuffers"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuBufferMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextures"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "glContextSwapchainMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "qmlTextureMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "texturePendingTransfers"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResidentMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureFramebufferMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResourceMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResourceIdealMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureResourcePopulatedMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureExternalMemory"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuTextureMemoryPressureState"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuFreeMemory"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "gpuFrameTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "batchFrameTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "engineFrameTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "avatarSimulationTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "opacity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "state"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "anchors"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "baselineOffset"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "clip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "focus"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "activeFocus"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "activeFocusOnTab"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "transformOrigin"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "smooth"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "antialiasing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "implicitWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "implicitHeight"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "layer"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "stylusPicksCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "rayPicksCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "parabolaPicksCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "collisionPicksCount"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "stylusPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "rayPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "parabolaPicksUpdated"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "collisionPicksUpdated"
            }
        ],
        "longname": "Stats",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "description": "Triggered when the value of the <code>longsubmits</code> property changes.",
        "kind": "function",
        "name": "longsubmitsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.longsubmitsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>longrenders</code> property changes.",
        "kind": "function",
        "name": "longrendersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.longrendersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>longframes</code> property changes.",
        "kind": "function",
        "name": "longframesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.longframesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>appdropped</code> property changes.",
        "kind": "function",
        "name": "appdroppedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.appdroppedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>expanded</code> property changes.",
        "kind": "function",
        "name": "expandedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.expandedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>timingExpanded</code> property changes.",
        "kind": "function",
        "name": "timingExpandedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.timingExpandedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverCount</code> property changes.",
        "kind": "function",
        "name": "serverCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>renderrate</code> property changes.",
        "kind": "function",
        "name": "renderrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.renderrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>presentrate</code> property changes.",
        "kind": "function",
        "name": "presentrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.presentrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>presentnewrate</code> property changes.",
        "kind": "function",
        "name": "presentnewrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.presentnewrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>presentdroprate</code> property changes.",
        "kind": "function",
        "name": "presentdroprateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.presentdroprateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>stutterrate</code> property changes.",
        "kind": "function",
        "name": "stutterrateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stutterrateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gameLoopRate</code> property changes.",
        "kind": "function",
        "name": "gameLoopRateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gameLoopRateChanged",
        "scope": "static"
    },
    {
        "description": "Trigered when",
        "kind": "function",
        "name": "numPhysicsBodiesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.numPhysicsBodiesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarCount</code> property changes.",
        "kind": "function",
        "name": "avatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>updatedAvatarCount</code> property changes.",
        "kind": "function",
        "name": "updatedAvatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.updatedAvatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>notUpdatedAvatarCount</code> property changes.",
        "kind": "function",
        "name": "notUpdatedAvatarCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.notUpdatedAvatarCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>packetInCount</code> property changes.",
        "kind": "function",
        "name": "packetInCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.packetInCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>packetOutCount</code> property changes.",
        "kind": "function",
        "name": "packetOutCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.packetOutCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>mbpsIn</code> property changes.",
        "kind": "function",
        "name": "mbpsInChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mbpsInChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>mbpsOut</code> property changes.",
        "kind": "function",
        "name": "mbpsOutChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mbpsOutChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>assetMbpsIn</code> property changes.",
        "kind": "function",
        "name": "assetMbpsInChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.assetMbpsInChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>assetMbpsOut</code> property changes.",
        "kind": "function",
        "name": "assetMbpsOutChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.assetMbpsOutChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioPing</code> property changes.",
        "kind": "function",
        "name": "audioPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarPing</code> property changes.",
        "kind": "function",
        "name": "avatarPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>entitiesPing</code> property changes.",
        "kind": "function",
        "name": "entitiesPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.entitiesPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>assetPing</code> property changes.",
        "kind": "function",
        "name": "assetPingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.assetPingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>messagePing</code> property changes.",
        "kind": "function",
        "name": "messagePingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.messagePingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>position</code> property changes.",
        "kind": "function",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.positionChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>speed</code> property changes.",
        "kind": "function",
        "name": "speedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.speedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>yaw</code> property changes.",
        "kind": "function",
        "name": "yawChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.yawChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerInKbps</code> property changes.",
        "kind": "function",
        "name": "avatarMixerInKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerInKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerInPps</code> property changes.",
        "kind": "function",
        "name": "avatarMixerInPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerInPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerOutKbps</code> property changes.",
        "kind": "function",
        "name": "avatarMixerOutKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerOutKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarMixerOutPps</code> property changes.",
        "kind": "function",
        "name": "avatarMixerOutPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarMixerOutPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>myAvatarSendRate</code> property changes.",
        "kind": "function",
        "name": "myAvatarSendRateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.myAvatarSendRateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerInKbps</code> property changes.",
        "kind": "function",
        "name": "audioMixerInKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerInKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerInPps</code> property changes.",
        "kind": "function",
        "name": "audioMixerInPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerInPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerOutKbps</code> property changes.",
        "kind": "function",
        "name": "audioMixerOutKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerOutKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerOutPps</code> property changes.",
        "kind": "function",
        "name": "audioMixerOutPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerOutPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerKbps</code> property changes.",
        "kind": "function",
        "name": "audioMixerKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioMixerPps</code> property changes.",
        "kind": "function",
        "name": "audioMixerPpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioMixerPpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioOutboundPPS</code> property changes.",
        "kind": "function",
        "name": "audioOutboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioOutboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioSilentOutboundPPS</code> property changes.",
        "kind": "function",
        "name": "audioSilentOutboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioSilentOutboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioAudioInboundPPS</code> property changes.",
        "kind": "function",
        "name": "audioAudioInboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioAudioInboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioSilentInboundPPS</code> property changes.",
        "kind": "function",
        "name": "audioSilentInboundPPSChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioSilentInboundPPSChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioPacketLoss</code> property changes.",
        "kind": "function",
        "name": "audioPacketLossChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioPacketLossChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioCodec</code> property changes.",
        "kind": "function",
        "name": "audioCodecChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioCodecChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>audioNoiseGate</code> property changes.",
        "kind": "function",
        "name": "audioNoiseGateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.audioNoiseGateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>entityPacketsInKbps</code> property changes.",
        "kind": "function",
        "name": "entityPacketsInKbpsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.entityPacketsInKbpsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloads</code> property changes.",
        "kind": "function",
        "name": "downloadsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloadLimit</code> property changes.",
        "kind": "function",
        "name": "downloadLimitChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadLimitChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloadsPending</code> property changes.",
        "kind": "function",
        "name": "downloadsPendingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadsPendingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>downloadUrls</code> property changes.",
        "kind": "function",
        "name": "downloadUrlsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.downloadUrlsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>processing</code> property changes.",
        "kind": "function",
        "name": "processingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.processingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>processingPending</code> property changes.",
        "kind": "function",
        "name": "processingPendingChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.processingPendingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>triangles</code> property changes.",
        "kind": "function",
        "name": "trianglesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.trianglesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>drawcalls</code> property changes.\rThis",
        "kind": "function",
        "name": "drawcallsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.drawcallsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>materialSwitches</code> property changes.",
        "kind": "function",
        "name": "materialSwitchesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.materialSwitchesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemConsidered</code> property changes.",
        "kind": "function",
        "name": "itemConsideredChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemConsideredChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemOutOfView</code> property changes.",
        "kind": "function",
        "name": "itemOutOfViewChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemOutOfViewChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemTooSmall</code> property changes.",
        "kind": "function",
        "name": "itemTooSmallChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemTooSmallChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>itemRendered</code> property changes.",
        "kind": "function",
        "name": "itemRenderedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.itemRenderedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowConsidered</code> property changes.",
        "kind": "function",
        "name": "shadowConsideredChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowConsideredChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowOutOfView</code> property changes.",
        "kind": "function",
        "name": "shadowOutOfViewChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowOutOfViewChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowTooSmall</code> property changes.",
        "kind": "function",
        "name": "shadowTooSmallChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowTooSmallChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>shadowRendered</code> property changes.",
        "kind": "function",
        "name": "shadowRenderedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.shadowRenderedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>sendingMode</code> property changes.",
        "kind": "function",
        "name": "sendingModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.sendingModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>packetStats</code> property changes.",
        "kind": "function",
        "name": "packetStatsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.packetStatsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>lodStatus</code> property changes.",
        "kind": "function",
        "name": "lodStatusChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.lodStatusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverElements</code> property changes.",
        "kind": "function",
        "name": "serverElementsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverElementsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverInternal</code> property changes.",
        "kind": "function",
        "name": "serverInternalChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverInternalChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>serverLeaves</code> property changes.",
        "kind": "function",
        "name": "serverLeavesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.serverLeavesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>localElements</code> property changes.",
        "kind": "function",
        "name": "localElementsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.localElementsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>localInternal</code> property changes.",
        "kind": "function",
        "name": "localInternalChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.localInternalChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>localLeaves</code> property changes.",
        "kind": "function",
        "name": "localLeavesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.localLeavesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>timingStats</code> property changes.",
        "kind": "function",
        "name": "timingStatsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.timingStatsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gameUpdateStats</code> property changes.",
        "kind": "function",
        "name": "gameUpdateStatsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gameUpdateStatsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>glContextSwapchainMemory</code> property changes.",
        "kind": "function",
        "name": "glContextSwapchainMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.glContextSwapchainMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>qmlTextureMemory</code> property changes.",
        "kind": "function",
        "name": "qmlTextureMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.qmlTextureMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>texturePendingTransfers</code> property changes.",
        "kind": "function",
        "name": "texturePendingTransfersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.texturePendingTransfersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuBuffers</code> property changes.",
        "kind": "function",
        "name": "gpuBuffersChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuBuffersChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuBufferMemory</code> property changes.",
        "kind": "function",
        "name": "gpuBufferMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuBufferMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextures</code> property changes.",
        "kind": "function",
        "name": "gpuTexturesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTexturesChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResidentMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureResidentMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResidentMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureFramebufferMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureFramebufferMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureFramebufferMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResourceMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureResourceMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResourceMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResourceIdealMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureResourceIdealMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResourceIdealMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureResourcePopulatedMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureResourcePopulatedMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureResourcePopulatedMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureExternalMemory</code> property changes.",
        "kind": "function",
        "name": "gpuTextureExternalMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureExternalMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuTextureMemoryPressureState</code> property changes.",
        "kind": "function",
        "name": "gpuTextureMemoryPressureStateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuTextureMemoryPressureStateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFreeMemory</code> property changes.",
        "kind": "function",
        "name": "gpuFreeMemoryChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFreeMemoryChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFrameTime</code> property changes.",
        "kind": "function",
        "name": "gpuFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFrameTime</code> property changes.",
        "kind": "function",
        "name": "gpuFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>gpuFrameTime</code> property changes.",
        "kind": "function",
        "name": "gpuFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.gpuFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>batchFrameTime</code> property changes.",
        "kind": "function",
        "name": "batchFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.batchFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>engineFrameTime</code> property changes.",
        "kind": "function",
        "name": "engineFrameTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.engineFrameTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>avatarSimulationTime</code> property changes.",
        "kind": "function",
        "name": "avatarSimulationTimeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.avatarSimulationTimeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rectifiedTextureCount</code> property changes.",
        "kind": "function",
        "name": "rectifiedTextureCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rectifiedTextureCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>decimatedTextureCount</code> property changes.",
        "kind": "function",
        "name": "decimatedTextureCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.decimatedTextureCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the parent item changes.",
        "kind": "function",
        "name": "parentChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.parentChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>x</code> property changes.",
        "kind": "function",
        "name": "xChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.xChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>y</code> property changes.",
        "kind": "function",
        "name": "yChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.yChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>z</code> property changes.",
        "kind": "function",
        "name": "zChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.zChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>width</code> property changes.",
        "kind": "function",
        "name": "widthChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.widthChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>height</code> property changes.",
        "kind": "function",
        "name": "heightChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.heightChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>opacity</code> property changes.",
        "kind": "function",
        "name": "opacityChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.opacityChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>enabled</code> property changes.",
        "kind": "function",
        "name": "enabledChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.enabledChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>visibleChanged</code> property changes.",
        "kind": "function",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.visibleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the list of visible children changes.",
        "kind": "function",
        "name": "visibleChildrenChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.visibleChildrenChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>state</code> property changes.",
        "kind": "function",
        "name": "stateChanged",
        "tags": [
            {
                "originalTitle": "paramm",
                "title": "paramm",
                "text": "{string} state",
                "value": "{string} state"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stateChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the position and size of the rectangle containing the children changes.",
        "kind": "function",
        "name": "childrenRectChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "name": "childrenRect"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.childrenRectChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>baselineOffset</code> property changes.",
        "kind": "function",
        "name": "baselineOffsetChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "baselineOffset"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.baselineOffsetChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>clip</code> property changes.",
        "kind": "function",
        "name": "clipChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "clip"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.clipChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>focus</code> property changes.",
        "kind": "function",
        "name": "focusChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "focus"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.focusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>activeFocus</code> property changes.",
        "kind": "function",
        "name": "activeFocusChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "activeFocus"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.activeFocusChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>activeFocusOnTab</code> property changes.",
        "kind": "function",
        "name": "activeFocusOnTabChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "activeFocusOnTab"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.activeFocusOnTabChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rotation</code> property changes.",
        "kind": "function",
        "name": "rotationChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rotationChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>scaleChanged</code> property changes.",
        "kind": "function",
        "name": "scaleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.scaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>transformOrigin</code> property changes.",
        "kind": "function",
        "name": "transformOriginChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "transformOrigin"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.transformOriginChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>smooth</code> property changes.",
        "kind": "function",
        "name": "smoothChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "smooth"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.smoothChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>antialiasing</code> property changes.",
        "kind": "function",
        "name": "antialiasingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "antialiasing"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.antialiasingChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>implicitWidth</code> property changes.",
        "kind": "function",
        "name": "implicitWidthChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.implicitWidthChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>implicitHeight</code> property changes.",
        "kind": "function",
        "name": "implicitHeightChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.implicitHeightChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "windowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "window"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.windowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "grabToImage",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "callback"
            },
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "optional": true,
                "defaultvalue": "0,0",
                "name": "targetSize"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.grabToImage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "contains",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.contains",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapFromItem",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "item"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapFromItem",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapToItem",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "item"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapToItem",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapFromGlobal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "global"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapFromGlobal",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mapToGlobal",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "global"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.mapToGlobal",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "forceActiveFocus",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 7,
                "name": "reason"
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.forceActiveFocus",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "nextItemInFocusChain",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "name": "forward"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.nextItemInFocusChain",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "childAt",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.childAt",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "update",
        "memberof": "Stats",
        "longname": "Stats.update",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>stylusPicksCount</code> property changes.",
        "kind": "function",
        "name": "stylusPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stylusPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rayPicksCount</code> property changes.",
        "kind": "function",
        "name": "rayPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rayPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>parabolaPicksCount</code> property changes.",
        "kind": "function",
        "name": "parabolaPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.parabolaPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>collisionPicksCount</code> property changes.",
        "kind": "function",
        "name": "collisionPicksCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.collisionPicksCountChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>stylusPicksUpdated</code> property changes.",
        "kind": "function",
        "name": "stylusPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.stylusPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>rayPicksUpdated</code> property changes.",
        "kind": "function",
        "name": "rayPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.rayPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>parabolaPicksUpdated</code> property changes.",
        "kind": "function",
        "name": "parabolaPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.parabolaPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the value of the <code>collisionPicksUpdated</code> property changes.",
        "kind": "function",
        "name": "collisionPicksUpdatedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Stats",
        "longname": "Stats.collisionPicksUpdatedChanged",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>circle3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Circle3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "circle3d",
                "description": "Has the value <code>\"circle3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.\r    <em>Not used.</em>",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The counter-clockwise angle from the overlay's x-axis that drawing starts at, in degrees.",
                "name": "startAt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 360,
                "description": "The counter-clockwise angle from the overlay's x-axis that drawing ends at, in degrees.",
                "name": "endAt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The outer radius of the overlay, in meters. Synonym: <code>radius</code>.",
                "name": "outerRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The inner radius of the overlay, in meters.",
                "name": "innerRadius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay. Setting this value also sets the values of \r    <code>innerStartColor</code>, <code>innerEndColor</code>, <code>outerStartColor</code>, and <code>outerEndColor</code>.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerStartColor</code> and <code>outerStartColor</code>.\r    <em>Write-only.</em>",
                "name": "startColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerEndColor</code> and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "endColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>innerStartColor</code> and <code>innerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "innerColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "Sets the values of <code>outerStartColor</code> and <code>outerEndColor</code>.\r    <em>Write-only.</em>",
                "name": "outerColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the inner start point of the overlay.",
                "name": "innerStartcolor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the inner end point of the overlay.",
                "name": "innerEndColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the outer start point of the overlay.",
                "name": "outerStartColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "description": "The color at the outer end point of the overlay.",
                "name": "outerEndColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>. Setting this value also sets\r    the values of <code>innerStartAlpha</code>, <code>innerEndAlpha</code>, <code>outerStartAlpha</code>, and \r    <code>outerEndAlpha</code>. Synonym: <code>Alpha</code>; <em>write-only</em>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerStartAlpha</code> and <code>outerStartAlpha</code>.\r    <em>Write-only.</em>",
                "name": "startAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerEndAlpha</code> and <code>outerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "endAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>innerStartAlpha</code> and <code>innerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "innerAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Sets the values of <code>outerStartAlpha</code> and <code>outerEndAlpha</code>.\r    <em>Write-only.</em>",
                "name": "outerAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the inner start point of the overlay.",
                "name": "innerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the inner end point of the overlay.",
                "name": "innerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the outer start point of the overlay.",
                "name": "outerStartAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The alpha at the outer end point of the overlay.",
                "name": "outerEndAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, tick marks are drawn.",
                "name": "hasTickMarks"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between major tick marks, in degrees.",
                "name": "majorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle between minor tick marks, in degrees.",
                "name": "minorTickMarksAngle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the major tick marks, in meters. A positive value draws tick marks\r    outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "majorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The length of the minor tick marks, in meters. A positive value draws tick marks\r    outwards from the inner radius; a negative value draws tick marks inwards from the outer radius.",
                "name": "minorTickMarksLength"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the major tick marks.",
                "name": "majorTickMarksColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the minor tick marks.",
                "name": "minorTickMarksColor"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Circle3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>cube</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "CubeProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "cube",
                "description": "Has the value <code>\"cube\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.CubeProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>grid</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "GridProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "grid",
                "description": "Has the value <code>\"grid\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the grid is always visible even as the camera moves to another\r    position.",
                "name": "followCamera"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 5,
                "description": "Integer number of <code>minorGridEvery</code> intervals at which to draw a thick grid \r    line. Minimum value = <code>1</code>.",
                "name": "majorGridEvery"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "Real number of meters at which to draw thin grid lines. Minimum value = \r    <code>0.001</code>.",
                "name": "minorGridEvery"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.GridProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of an <code>image3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Image3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "image3d",
                "description": "Has the value <code>\"image3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and \r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is rotated to face the user's camera about an axis\r    parallel to the user's avatar's \"up\" direction.",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the PNG or JPG image to display.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The portion of the image to display. Defaults to the full image.",
                "name": "subImage"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is displayed at full brightness, otherwise it is rendered\r    with scene lighting.",
                "name": "emissive"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Image3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of an <code>image</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "ImageProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the image display area, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value of the image display area = <code>bounds.x</code>.\r    <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value of the image display area = <code>bounds.y</code>.\r    <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the image display area = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the image display area = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the image file to display. The image is scaled to fit to the <code>bounds</code>.\r    <em>Write-only.</em>",
                "name": "imageURL"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "0,0",
                "description": "Integer coordinates of the top left pixel to start using image content from.\r    <em>Write-only.</em>",
                "name": "subImage"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color to apply over the top of the image to colorize it. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The opacity of the color applied over the top of the image, <code>0.0</code> - \r    <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.\r    <em>Write-only.</em>",
                "name": "visible"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.ImageProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>line3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Line3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "line3d",
                "description": "Has the value <code>\"line3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the end point of the line is parented to.",
                "name": "endParentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the end point of the line is\r    attached to if <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "endParentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The start point of the line. Synonyms: <code>startPoint</code>, <code>p1</code>, and\r    <code>position</code>.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The end point of the line. Synonyms: <code>endPoint</code> and <code>p2</code>.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>start</code>. Synonym: <code>localPosition</code>.",
                "name": "localStart"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>endParentID</code> set, otherwise the same value as <code>end</code>.",
                "name": "localEnd"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The length of the line, in meters. This can be set after creating a line with start and end\r    points.",
                "name": "length"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If <code>glow > 0</code>, the line is rendered with a glow.",
                "name": "glow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.02,
                "description": "If <code>glow > 0</code>, this is the width of the glow, in meters.",
                "name": "lineWidth"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Line3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>model</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "ModelProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "sphere",
                "description": "Has the value <code>\"model\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the mesh parts of the model are LOD culled as a group.\r    If <code>false</code>, separate mesh parts will be LOD culled individually.",
                "name": "isGroupCulled"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the FBX or OBJ model used for the overlay.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "0.0",
                "description": "The priority for loading and displaying the overlay. Overlays with higher values load \r    first.",
                "name": "loadPriority"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonym: <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The scale factor applied to the model's dimensions.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "object.<name, url>"
                    ]
                },
                "description": "Maps the named textures in the model to the JPG or PNG images in the urls.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of the joints - if any - in the model. <em>Read-only.</em>",
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The relative rotations of the model's joints. <em>Not copied if overlay is \r    cloned.</em>",
                "name": "jointRotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The relative translations of the model's joints. <em>Not copied if overlay is \r    cloned.</em>",
                "name": "jointTranslations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The absolute orientations of the model's joints, in world coordinates.\r    <em>Read-only.</em>",
                "name": "jointOrientations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The absolute positions of the model's joints, in world coordinates.\r    <em>Read-only.</em>",
                "name": "jointPositions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of an FBX file containing an animation to play.",
                "name": "animationSettings.url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The frame rate (frames/sec) to play the animation at.",
                "name": "animationSettings.fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The frame to start playing at.",
                "name": "animationSettings.firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The frame to finish playing at.",
                "name": "animationSettings.lastFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current frame being played.",
                "name": "animationSettings.currentFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the animation is playing.",
                "name": "animationSettings.running"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the animation should repeat in a loop.",
                "name": "animationSettings.loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not when the animation finishes, the rotations and \r    translations of the last frame played should be maintained.",
                "name": "animationSettings.hold"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not translations contained in the animation should\r    be played.",
                "name": "animationSettings.allowTranslation"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.ModelProperties",
        "scope": "static"
    },
    {
        "description": "<p>An overlay may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>2D/3D</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>circle3d</code></td><td>3D</td><td>A circle.</td></tr>\r    <tr><td><code>cube</code></td><td>3D</td><td>A cube. Can also use a <code>shape</code> overlay to create a \r    cube.</td></tr>\r    <tr><td><code>grid</code></td><td>3D</td><td>A grid of lines in a plane.</td></tr>\r    <tr><td><code>image</code></td><td>2D</td><td>An image. Synonym: <code>billboard</code>.</td></tr>\r    <tr><td><code>image3d</code></td><td>3D</td><td>An image.</td></tr>\r    <tr><td><code>line3d</code></td><td>3D</td><td>A line.</td></tr>\r    <tr><td><code>model</code></td><td>3D</td><td>A model.</td></tr>\r    <tr><td><code>rectangle</code></td><td>2D</td><td>A rectangle.</td></tr>\r    <tr><td><code>rectangle3d</code></td><td>3D</td><td>A rectangle.</td></tr>\r    <tr><td><code>shape</code></td><td>3D</td><td>A geometric shape, such as a cube, sphere, or cylinder.</td></tr>\r    <tr><td><code>sphere</code></td><td>3D</td><td>A sphere. Can also use a <code>shape</code> overlay to create a \r    sphere.</td></tr>\r    <tr><td><code>text</code></td><td>2D</td><td>Text.</td></tr>\r    <tr><td><code>text3d</code></td><td>3D</td><td>Text.</td></tr>\r    <tr><td><code>web3d</code></td><td>3D</td><td>Web content.</td></tr>\r  </tbody>\r</table>\r<p>2D overlays are rendered on the display surface in desktop mode and on the HUD surface in HMD mode. 3D overlays are\rrendered at a position and orientation in-world.<p>\r<p>Each overlay type has different {@link Overlays.OverlayProperties|OverlayProperties}.</p>",
        "kind": "typedef",
        "name": "OverlayType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.OverlayType",
        "scope": "static"
    },
    {
        "description": "<p>Different overlay types have different properties:</p>\r<table>\r  <thead>\r    <tr><th>{@link Overlays.OverlayType|OverlayType}</th><th>Overlay Properties</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>circle3d</code></td><td>{@link Overlays.Circle3DProperties|Circle3DProperties}</td></tr>\r    <tr><td><code>cube</code></td><td>{@link Overlays.CubeProperties|CubeProperties}</td></tr>\r    <tr><td><code>grid</code></td><td>{@link Overlays.GridProperties|GridProperties}</td></tr>\r    <tr><td><code>image</code></td><td>{@link Overlays.ImageProperties|ImageProperties}</td></tr>\r    <tr><td><code>image3d</code></td><td>{@link Overlays.Image3DProperties|Image3DProperties}</td></tr>\r    <tr><td><code>line3d</code></td><td>{@link Overlays.Line3DProperties|Line3DProperties}</td></tr>\r    <tr><td><code>model</code></td><td>{@link Overlays.ModelProperties|ModelProperties}</td></tr>\r    <tr><td><code>rectangle</code></td><td>{@link Overlays.RectangleProperties|RectangleProperties}</td></tr>\r    <tr><td><code>rectangle3d</code></td><td>{@link Overlays.Rectangle3DProperties|Rectangle3DProperties}</td></tr>\r    <tr><td><code>shape</code></td><td>{@link Overlays.ShapeProperties|ShapeProperties}</td></tr>\r    <tr><td><code>sphere</code></td><td>{@link Overlays.SphereProperties|SphereProperties}</td></tr>\r    <tr><td><code>text</code></td><td>{@link Overlays.TextProperties|TextProperties}</td></tr>\r    <tr><td><code>text3d</code></td><td>{@link Overlays.Text3DProperties|Text3DProperties}</td></tr>\r    <tr><td><code>web3d</code></td><td>{@link Overlays.Web3DProperties|Web3DProperties}</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "OverlayProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.OverlayProperties",
        "scope": "static"
    },
    {
        "description": "The result of a {@link PickRay} search using {@link Overlays.findRayIntersection|findRayIntersection} or \r{@link Overlays.findRayIntersectionVector|findRayIntersectionVector}.",
        "kind": "typedef",
        "name": "RayToOverlayIntersectionResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link PickRay} intersected with a 3D overlay, otherwise\r    <code>false</code>.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the overlay that was intersected.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the {@link PickRay} origin to the intersection point.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal of the overlay surface at the intersection point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the intersection point.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Additional intersection details, if available.",
                "name": "extraInfo"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.RayToOverlayIntersectionResult",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Overlays API provides facilities to create and interact with overlays. Overlays are 2D and 3D objects visible only to\ryourself and that aren't persisted to the domain. They are used for UI.",
        "kind": "namespace",
        "name": "Overlays",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Get or set the {@link Overlays.OverlayType|web3d} overlay that has keyboard focus.\r    If no overlay has keyboard focus, get returns <code>null</code>; set to <code>null</code> or {@link Uuid|Uuid.NULL} to \r    clear keyboard focus.",
                "name": "keyboardFocusOverlay"
            }
        ],
        "longname": "Overlays",
        "scope": "global"
    },
    {
        "description": "Add an overlay to the scene.",
        "kind": "function",
        "name": "addOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The type of the overlay to add.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The properties of the overlay to add.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the newly created overlay if successful, otherwise {@link Uuid|Uuid.NULL}."
            }
        ],
        "examples": [
            "<caption>Add a cube overlay in front of your avatar.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.addOverlay",
        "scope": "static"
    },
    {
        "description": "Create a clone of an existing overlay.",
        "kind": "function",
        "name": "cloneOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to clone.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the new overlay if successful, otherwise {@link Uuid|Uuid.NULL}."
            }
        ],
        "examples": [
            "<caption>Add an overlay in front of your avatar, clone it, and move the clone to be above the \r    original.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 }));\rvar original = Overlays.addOverlay(\"cube\", {\r    position: position,\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar clone = Overlays.cloneOverlay(original);\rOverlays.editOverlay(clone, {\r    position: Vec3.sum({ x: 0, y: 0.5, z: 0}, position)\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.cloneOverlay",
        "scope": "static"
    },
    {
        "description": "Edit an overlay's properties.",
        "kind": "function",
        "name": "editOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to edit.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The properties changes to make.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the overlay was found and edited, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Add an overlay in front of your avatar then change its color.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar success = Overlays.editOverlay(overlay, {\r    color: { red: 255, green: 0, blue: 0 }\r});\rprint(\"Success: \" + success);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.editOverlay",
        "scope": "static"
    },
    {
        "description": "Edit multiple overlays' properties.",
        "kind": "function",
        "name": "editOverlays",
        "params": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Overlays.OverlayProperties>"
                    ]
                },
                "description": "An object with overlay IDs as keys and\r    {@link Overlays.OverlayProperties|OverlayProperties} edits to make as values.",
                "name": "propertiesById"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if all overlays were found and edited, otherwise <code>false</code> (some may have\r    been found and edited)."
            }
        ],
        "examples": [
            "<caption>Create two overlays in front of your avatar then change their colors.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rvar overlayEdits = {};\roverlayEdits[overlayA] = { color: { red: 255, green: 0, blue: 0 } };\roverlayEdits[overlayB] = { color: { red: 0, green: 255, blue: 0 } };\rvar success = Overlays.editOverlays(overlayEdits);\rprint(\"Success: \" + success);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.editOverlays",
        "scope": "static"
    },
    {
        "description": "Delete an overlay.",
        "kind": "function",
        "name": "deleteOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to delete.",
                "name": "overlayID"
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then delete it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\rOverlays.deleteOverlay(overlay);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.deleteOverlay",
        "scope": "static"
    },
    {
        "description": "Get the type of an overlay.",
        "kind": "function",
        "name": "getOverlayType",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to get the type of.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayType"
                    ]
                },
                "description": "The type of the overlay if found, otherwise an empty string."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then get and report its type.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar type = Overlays.getOverlayType(overlay);\rprint(\"Type: \" + type);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayType",
        "scope": "static"
    },
    {
        "description": "Get the overlay script object. In particular, this is useful for accessing the event bridge for a <code>web3d</code> \roverlay.",
        "kind": "function",
        "name": "getOverlayObject",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to get the script object of.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The script object for the overlay if found."
            }
        ],
        "examples": [
            "<caption>Receive \"hello\" messages from a <code>web3d</code> overlay.</caption>\r// HTML file: name \"web3d.html\".\r<!DOCTYPE html>\r<html>\r<head>\r    <title>HELLO</title>\r</head>\r<body>\r    <h1>HELLO</h1></h1>\r    <script>\r        setInterval(function () {\r            EventBridge.emitWebEvent(\"hello\");\r        }, 2000);\r    </script>\r</body>\r</html>\r\r// Script file.\rvar web3dOverlay = Overlays.addOverlay(\"web3d\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, {x: 0, y: 0.5, z: -3 })),\r    rotation: MyAvatar.orientation,\r    url: Script.resolvePath(\"web3d.html\"),\r    alpha: 1.0\r});\r\rfunction onWebEventReceived(event) {\r    print(\"onWebEventReceived() : \" + JSON.stringify(event));\r}\r\roverlayObject = Overlays.getOverlayObject(web3dOverlay);\roverlayObject.webEventReceived.connect(onWebEventReceived);\r\rScript.scriptEnding.connect(function () {\r    Overlays.deleteOverlay(web3dOverlay);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayObject",
        "scope": "static"
    },
    {
        "description": "Get the ID of the 2D overlay at a particular point on the screen or HUD.",
        "kind": "function",
        "name": "getOverlayAtPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The point to check for an overlay.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the 2D overlay at the specified point if found, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Create a 2D overlay and add an event function that reports the overlay clicked on, if any.</caption>\rvar overlay = Overlays.addOverlay(\"rectangle\", {\r    bounds: { x: 100, y: 100, width: 200, height: 100 },\r    color: { red: 255, green: 255, blue: 255 }\r});\rprint(\"Created: \" + overlay);\r\rController.mousePressEvent.connect(function (event) {\r    var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });\r    print(\"Clicked: \" + overlay);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlayAtPoint",
        "scope": "static"
    },
    {
        "description": "Get the value of a 3D overlay's property.",
        "kind": "function",
        "name": "getProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay. <em>Must be for a 3D {@link Overlays.OverlayType|OverlayType}.</em>",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the property value to get.",
                "name": "property"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The value of the property if the 3D overlay and property can be found, otherwise\r    <code>undefined</code>."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then report its alpha property value.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar alpha = Overlays.getProperty(overlay, \"alpha\");\rprint(\"Overlay alpha: \" + alpha);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getProperty",
        "scope": "static"
    },
    {
        "description": "Get the values of an overlay's properties.",
        "kind": "function",
        "name": "getProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of names of properties to get the values of.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.OverlayProperties"
                    ]
                },
                "description": "The values of valid properties if the overlay can be found, otherwise \r    <code>undefined</code>."
            }
        ],
        "examples": [
            "<caption>Create an overlay in front of your avatar then report some of its properties.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar properties = Overlays.getProperties(overlay, [\"color\", \"alpha\", \"grabbable\"]);\rprint(\"Overlay properties: \" + JSON.stringify(properties));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getProperties",
        "scope": "static"
    },
    {
        "description": "Get the values of multiple overlays' properties.",
        "kind": "function",
        "name": "getOverlaysProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Array.<string>>"
                    ]
                },
                "description": "An object with overlay IDs as keys and arrays of the names of \r    properties to get for each as values.",
                "name": "propertiesById"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object.<Uuid, Overlays.OverlayProperties>"
                    ]
                },
                "description": "An object with overlay IDs as keys and\r    {@link Overlays.OverlayProperties|OverlayProperties} as values."
            }
        ],
        "examples": [
            "<caption>Create two cube overlays in front of your avatar then get some of their properties.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rvar propertiesToGet = {};\rpropertiesToGet[overlayA] = [\"color\", \"alpha\"];\rpropertiesToGet[overlayB] = [\"dimensions\"];\rvar properties = Overlays.getOverlaysProperties(propertiesToGet);\rprint(\"Overlays properties: \" + JSON.stringify(properties));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getOverlaysProperties",
        "scope": "static"
    },
    {
        "description": "Find the closest 3D overlay intersected by a {@link PickRay}.",
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay to use for finding overlays.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "If not empty then the search is restricted to these overlays.",
                "name": "overlayIDsToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Overlays to ignore during the search.",
                "name": "overlayIDsToExclude"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "visibleOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "<em>Unused</em>; exists to match Entity API.",
                "name": "collidableOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Overlays.RayToOverlayIntersectionResult"
                    ]
                },
                "description": "The closest 3D overlay intersected by <code>pickRay</code>, taking\r    into account <code>overlayIDsToInclude</code> and <code>overlayIDsToExclude</code> if they're not empty."
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar. Report 3D overlay intersection details for mouse \r    clicks.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\r\rController.mousePressEvent.connect(function (event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Overlays.findRayIntersection(pickRay);\r    print(\"Intersection: \" + JSON.stringify(intersection));\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findRayIntersection",
        "scope": "static"
    },
    {
        "description": "Return a list of 3D overlays with bounding boxes that touch a search sphere.",
        "kind": "function",
        "name": "findOverlays",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the search sphere.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the search sphere.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of overlay IDs with bounding boxes that touch a search sphere."
            }
        ],
        "examples": [
            "<caption>Create two cube overlays in front of your avatar then search for overlays near your avatar.</caption>\rvar overlayA = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: -0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay A: \" + overlayA);\rvar overlayB = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0.3, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay B: \" + overlayB);\r\rvar overlaysFound = Overlays.findOverlays(MyAvatar.position, 5.0);\rprint(\"Overlays found: \" + JSON.stringify(overlaysFound));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.findOverlays",
        "scope": "static"
    },
    {
        "description": "Check whether an overlay's assets have been loaded. For example, for an <code>image</code> overlay the result indicates\rwhether its image has been loaded.",
        "kind": "function",
        "name": "isLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to check.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the overlay's assets have been loaded, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Create an image overlay and report whether its image is loaded after 1s.</caption>\rvar overlay = Overlays.addOverlay(\"image\", {\r    bounds: { x: 100, y: 100, width: 200, height: 200 },\r    imageURL: \"https://content.highfidelity.com/DomainContent/production/Particles/wispy-smoke.png\"\r});\rScript.setTimeout(function () {\r    var isLoaded = Overlays.isLoaded(overlay);\r    print(\"Image loaded: \" + isLoaded);\r}, 1000);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.isLoaded",
        "scope": "static"
    },
    {
        "description": "Calculates the size of the given text in the specified overlay if it is a text overlay.",
        "kind": "function",
        "name": "textSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to use for calculation.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to calculate the size of.",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "description": "The size of the <code>text</code> if the overlay is a text overlay, otherwise\r    <code>{ height: 0, width : 0 }</code>. If the overlay is a 2D overlay, the size is in pixels; if the overlay is a 3D\r    overlay, the size is in meters."
            }
        ],
        "examples": [
            "<caption>Calculate the size of \"hello\" in a 3D text overlay.</caption>\rvar overlay = Overlays.addOverlay(\"text3d\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -2 })),\r    rotation: MyAvatar.orientation,\r    text: \"hello\",\r    lineHeight: 0.2\r});\rvar textSize = Overlays.textSize(overlay, \"hello\");\rprint(\"Size of \\\"hello\\\": \" + JSON.stringify(textSize));"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.textSize",
        "scope": "static"
    },
    {
        "description": "Get the width of the window or HUD.",
        "kind": "function",
        "name": "width",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width, in pixels, of the Interface window if in desktop mode or the HUD if in HMD mode."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.width",
        "scope": "static"
    },
    {
        "description": "Get the height of the window or HUD.",
        "kind": "function",
        "name": "height",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height, in pixels, of the Interface window if in desktop mode or the HUD if in HMD mode."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.height",
        "scope": "static"
    },
    {
        "description": "Check if there is an overlay of a given ID.",
        "kind": "function",
        "name": "isAddedOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID to check.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an overlay with the given ID exists, <code>false</code> otherwise."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.isAddedOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a mouse press event on an overlay.",
        "kind": "function",
        "name": "sendMousePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a mouse press event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse press event details.",
                "name": "event"
            }
        ],
        "examples": [
            "<caption>Create a 2D rectangle overlay plus a 3D cube overlay and generate mousePressOnOverlay events for the 2D\roverlay.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"3D overlay: \" + overlay);\r\rvar overlay = Overlays.addOverlay(\"rectangle\", {\r    bounds: { x: 100, y: 100, width: 200, height: 100 },\r    color: { red: 255, green: 255, blue: 255 }\r});\rprint(\"2D overlay: \" + overlay);\r\r// Overlays.mousePressOnOverlay by default applies only to 3D overlays.\rOverlays.mousePressOnOverlay.connect(function(overlayID, event) {\r    print(\"Clicked: \" + overlayID);\r});\r\rController.mousePressEvent.connect(function (event) {\r    // Overlays.getOverlayAtPoint applies only to 2D overlays.\r    var overlay = Overlays.getOverlayAtPoint({ x: event.x, y: event.y });\r    if (overlay) {\r        Overlays.sendMousePressOnOverlay(overlay, {\r            type: \"press\",\r            id: 0,\r            pos2D: event\r        });\r    }\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMousePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a mouse release event on an overlay.",
        "kind": "function",
        "name": "sendMouseReleaseOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a mouse release event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse release event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMouseReleaseOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a mouse move event on an overlay.",
        "kind": "function",
        "name": "sendMouseMoveOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a mouse move event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendMouseMoveOnOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a hover enter event on an overlay.",
        "kind": "function",
        "name": "sendHoverEnterOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a hover enter event on.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover enter event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverEnterOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a hover over event on an overlay.",
        "kind": "function",
        "name": "sendHoverOverOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a hover over event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover over event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverOverOverlay",
        "scope": "static"
    },
    {
        "description": "Generate a hover leave event on an overlay.",
        "kind": "function",
        "name": "sendHoverLeaveOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay to generate a hover leave event on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover leave event details.",
                "name": "event"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.sendHoverLeaveOverlay",
        "scope": "static"
    },
    {
        "description": "Get the ID of the Web3D overlay that has keyboard focus.",
        "kind": "function",
        "name": "getKeyboardFocusOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Overlays.OverlayType|web3d} overlay that has focus, if any, otherwise \r    <code>null</code>."
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.getKeyboardFocusOverlay",
        "scope": "static"
    },
    {
        "description": "Set the Web3D overlay that has keyboard focus.",
        "kind": "function",
        "name": "setKeyboardFocusOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Overlays.OverlayType|web3d} overlay to set keyboard focus to. Use \r    <code>null</code> or {@link Uuid|Uuid.NULL} to unset keyboard focus from an overlay.",
                "name": "overlayID"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.setKeyboardFocusOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when an overlay is deleted.",
        "kind": "function",
        "name": "overlayDeleted",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay that was deleted.",
                "name": "overlayID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create an overlay then delete it after 1s.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\r\rOverlays.overlayDeleted.connect(function(overlayID) {\r    print(\"Deleted: \" + overlayID);\r});\rScript.setTimeout(function () {\r    Overlays.deleteOverlay(overlay);\r}, 1000);"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.overlayDeleted",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse press event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMousePressOnOverlay|sendMousePressOnOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "mousePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse press event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse press event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar and report mouse clicks on it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"My overlay: \" + overlay);\r\rOverlays.mousePressOnOverlay.connect(function(overlayID, event) {\r    if (overlayID === overlay) {\r        print(\"Clicked on my overlay\");\r    }\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mousePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse double press event occurs on an overlay. Only occurs for 3D overlays.",
        "kind": "function",
        "name": "mouseDoublePressOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse double press event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse double press event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseDoublePressOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse release event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMouseReleaseOnOverlay|sendMouseReleaseOnOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "mouseReleaseOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse release event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse release event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseReleaseOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse move event occurs on an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendMouseMoveOnOverlay|sendMouseMoveOnOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "mouseMoveOnOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse moved event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseMoveOnOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse press event occurs on something other than a 3D overlay.",
        "kind": "function",
        "name": "mousePressOffOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mousePressOffOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse double press event occurs on something other than a 3D overlay.",
        "kind": "function",
        "name": "mouseDoublePressOffOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.mouseDoublePressOffOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor starts hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverEnterOverlay|sendHoverEnterOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "hoverEnterOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the mouse moved event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The mouse move event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Create a cube overlay in front of your avatar and report when you start hovering your mouse over\r    it.</caption>\rvar overlay = Overlays.addOverlay(\"cube\", {\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.3, y: 0.3, z: 0.3 },\r    solid: true\r});\rprint(\"Overlay: \" + overlay);\rOverlays.hoverEnterOverlay.connect(function(overlayID, event) {\r    print(\"Hover enter: \" + overlayID);\r});"
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverEnterOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor continues hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverOverOverlay|sendHoverOverOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "hoverOverOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the hover over event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover over event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverOverOverlay",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse cursor finishes hovering over an overlay. Only occurs for 3D overlays (unless you use \r    {@link Overlays.sendHoverLeaveOverlay|sendHoverLeaveOverlay} for a 2D overlay).",
        "kind": "function",
        "name": "hoverLeaveOverlay",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the overlay the hover leave event occurred on.",
                "name": "overlayID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The hover leave event details.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.hoverLeaveOverlay",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>rectangle3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Rectangle3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "rectangle3d",
                "description": "Has the value <code>\"rectangle3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Rectangle3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>rectangle</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "RectangleProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the rectangle, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the overlay. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "Integer width of the border, in pixels. The border is drawn within the rectangle's bounds.\r    It is not drawn unless either <code>borderColor</code> or <code>borderAlpha</code> are specified. <em>Write-only.</em>",
                "name": "borderWidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Integer corner radius, in pixels. <em>Write-only.</em>",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the border. <em>Write-only.</em>",
                "name": "borderColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the border, <code>0.0</code> - <code>1.0</code>.\r    <em>Write-only.</em>",
                "name": "borderAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.\r    <em>Write-only.</em>",
                "name": "visible"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.RectangleProperties",
        "scope": "static"
    },
    {
        "description": "<p>A <code>shape</code> {@link Overlays.OverlayType|OverlayType} may display as one of the following geometrical shapes:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Dimensions</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"Circle\"</code></td><td>2D</td><td>A circle oriented in 3D.</td></td></tr>\r    <tr><td><code>\"Cone\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cube\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cylinder\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Dodecahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Hexagon\"</code></td><td>3D</td><td>A hexagonal prism.</td></tr>\r    <tr><td><code>\"Icosahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Line\"</code></td><td>1D</td><td>A line oriented in 3D.</td></tr>\r    <tr><td><code>\"Octagon\"</code></td><td>3D</td><td>An octagonal prism.</td></tr>\r    <tr><td><code>\"Octahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Quad\"</code></td><td>2D</td><td>A square oriented in 3D.</tr>\r    <tr><td><code>\"Sphere\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Tetrahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Torus\"</code></td><td>3D</td><td><em>Not implemented.</em></td></tr>\r    <tr><td><code>\"Triangle\"</code></td><td>3D</td><td>A triangular prism.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Overlays",
        "longname": "Overlays.Shape",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>shape</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "ShapeProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "shape",
                "description": "Has the value <code>\"shape\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Overlays.Shape"
                    ]
                },
                "defaultvalue": "Hexagon",
                "description": "The geometrical shape of the overlay.",
                "name": "shape"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.ShapeProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>sphere</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "SphereProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "sphere",
                "description": "Has the value <code>\"sphere\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.SphereProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>text3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Text3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "text3d",
                "description": "Has the value <code>\"text3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and\r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The dimensions of the overlay. Synonyms: <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is rotated to face the user's camera about an axis\r    parallel to the user's avatar's \"up\" direction.",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display. Text does not automatically wrap; use <code>\\n</code> for a line break.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The text alpha value.",
                "name": "textAlpha"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The background color.",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The background alpha value.",
                "name": "backgroundAlpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The height of a line of text in meters.",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The left margin, in meters.",
                "name": "leftMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The top margin, in meters.",
                "name": "topMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The right margin, in meters.",
                "name": "rightMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The bottom margin, in meters.",
                "name": "bottomMargin"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Text3DProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>text</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "TextProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Rect"
                    ]
                },
                "description": "The position and size of the rectangle, in pixels. <em>Write-only.</em>",
                "name": "bounds"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer left, x-coordinate value = <code>bounds.x</code>. <em>Write-only.</em>",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer top, y-coordinate value = <code>bounds.y</code>. <em>Write-only.</em>",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer width of the rectangle = <code>bounds.width</code>. <em>Write-only.</em>",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer height of the rectangle = <code>bounds.height</code>. <em>Write-only.</em>",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Sets the <code>leftMargin</code> and <code>topMargin</code> values, in pixels.\r    <em>Write-only.</em>",
                "name": "margin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The left margin's size, in pixels. This value is also used for the right margin. \r    <em>Write-only.</em>",
                "name": "leftMargin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The top margin's size, in pixels. This value is also used for the bottom margin. \r    <em>Write-only.</em>",
                "name": "topMargin"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display. Text does not automatically wrap; use <code>\\n</code> for a line break. Text\r    is clipped to the <code>bounds</code>. <em>Write-only.</em>",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 18,
                "description": "The size of the text, in pixels. <em>Write-only.</em>",
                "name": "font.size"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 18,
                "description": "The height of a line of text, in pixels. <em>Write-only.</em>",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the text. Synonym: <code>textColor</code>. <em>Write-only.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>. <em>Write-only.</em>",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the background rectangle. <em>Write-only.</em>",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the background rectangle. <em>Write-only.</em>",
                "name": "backgroundAlpha"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.\r    <em>Write-only.</em>",
                "name": "visible"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.TextProperties",
        "scope": "static"
    },
    {
        "description": "These are the properties of a <code>web3d</code> {@link Overlays.OverlayType|OverlayType}.",
        "kind": "typedef",
        "name": "Web3DProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "web3d",
                "description": "Has the value <code>\"web3d\"</code>. <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the overlay.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The opacity of the overlay, <code>0.0</code> - <code>1.0</code>.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The maximum value of the pulse multiplier.",
                "name": "pulseMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The minimum value of the pulse multiplier.",
                "name": "pulseMin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The duration of the color and alpha pulse, in seconds. A pulse multiplier value goes from\r    <code>pulseMin</code> to <code>pulseMax</code>, then <code>pulseMax</code> to <code>pulseMin</code> in one period.",
                "name": "pulsePeriod"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the alpha of the overlay is pulsed: the alpha value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "alphaPulse"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "If non-zero, the color of the overlay is pulsed: the color value is multiplied by the\r    current pulse multiplier value each frame. If > 0 the pulse multiplier is applied in phase with the pulse period; if < 0\r    the pulse multiplier is applied out of phase with the pulse period. (The magnitude of the property isn't otherwise\r    used.)",
                "name": "colorPulse"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the overlay is rendered, otherwise it is not rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A friendly name for the overlay.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the overlay center. Synonyms: <code>p1</code>, <code>point</code>, and \r    <code>start</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local position of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>position</code>.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay. Synonym: <code>orientation</code>.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the overlay relative to its parent if the overlay has a\r    <code>parentID</code> set, otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonyms: <ode>solid</code>, <code>isFilled</code>, and <code>filled</code>.\r    Antonyms: <code>isWire</code> and <code>wire</code>.",
                "name": "isSolid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, a dashed line is drawn on the overlay's edges. Synonym:\r    <code>dashed</code>.",
                "name": "isDashedLine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, picks ignore the overlay.  <code>ignoreRayIntersection</code> is a synonym.",
                "name": "ignorePickIntersection"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the overlay is rendered in front of other overlays that don't\r    have <code>drawInFront</code> set to <code>true</code>, and in front of entities.",
                "name": "drawInFront"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Signal to grabbing scripts whether or not this overlay can be grabbed.",
                "name": "grabbable"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The avatar, entity, or overlay that the overlay is parented to.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "Integer value specifying the skeleton joint that the overlay is attached to if\r    <code>parentID</code> is an avatar skeleton. A value of <code>65535</code> means \"no joint\".",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code>, the overlay is rotated to face the user's camera about an axis\r    parallel to the user's avatar's \"up\" direction.",
                "name": "isFacingAvatar"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the Web page to display.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JavaScript file to inject into the Web page.",
                "name": "scriptURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 30,
                "description": "The dots per inch to display the Web page at, on the overlay.",
                "name": "dpi"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "The size of the overlay to display the Web page on, in meters. Synonyms: \r    <code>scale</code>, <code>size</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10,
                "description": "The maximum update rate for the Web overlay content, in frames/second.",
                "name": "maxFPS"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the Web overlay is highlighted when it has\r    keyboard focus.",
                "name": "showKeyboardFocusHighlight"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "Touch",
                "description": "The user input mode to use - either <code>\"Touch\"</code> or <code>\"Mouse\"</code>.",
                "name": "inputMode"
            }
        ],
        "memberof": "Overlays",
        "longname": "Overlays.Web3DProperties",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "AnimationObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "jointNames"
            },
            {
                "type": {
                    "names": [
                        "Array.<FBXAnimationFrame>"
                    ]
                },
                "name": "frames"
            }
        ],
        "longname": "AnimationObject",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "getJointNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "AnimationObject",
        "longname": "AnimationObject.getJointNames",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFrames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<FBXAnimationFrame>"
                    ]
                }
            }
        ],
        "memberof": "AnimationObject",
        "longname": "AnimationObject.getFrames",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>API to manage animation cache resources.",
        "kind": "namespace",
        "name": "AnimationCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "AnimationCache",
        "scope": "global"
    },
    {
        "description": "Returns animation resource for particular animation.",
        "kind": "function",
        "name": "getAnimation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL to load.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AnimationObject"
                    ]
                },
                "description": "animation"
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.getAnimation",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "AudioStreamStats",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossRateWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lossCountWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "framesDesired"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "framesAvailable"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "framesAvailableAvg"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "unplayedMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "starveCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "lastStarveDurationCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "dropCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "overflowCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsAvg"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsMaxWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "timegapMsAvgWindow"
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.AudioStreamStats",
        "scope": "static",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "lossRateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossRate"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossRateChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "lossCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossCountChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "lossRateWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossRateWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossRateWindowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "lossCountWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lossCountWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lossCountWindowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "framesDesiredChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "framesDesired"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.framesDesiredChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "framesAvailableChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "framesAvailable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.framesAvailableChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "framesAvailableAvgChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "framesAvailableAvg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.framesAvailableAvgChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "unplayedMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "unplayedMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.unplayedMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "starveCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "starveCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.starveCountChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "lastStarveDurationCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lastStarveDurationCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.lastStarveDurationCountChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dropCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "dropCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.dropCountChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "overflowCountChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "overflowCount"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.overflowCountChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "timegapMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "timegapMsAvgChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsAvg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsAvgChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "timegapMsMaxWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsMaxWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsMaxWindowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "timegapMsAvgWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "timegapMsAvgWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats.AudioStreamStats",
        "longname": "AudioStats.AudioStreamStats.timegapMsAvgWindowChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>Audio stats from the client.",
        "kind": "namespace",
        "name": "AudioStats",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "pingMs"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "inputReadMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "inputUnplayedMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "outputUnplayedMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsMax"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsAvg"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsMaxWindow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "sentTimegapMsAvgWindow"
            },
            {
                "type": {
                    "names": [
                        "AudioStats.AudioStreamStats"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "clientStream"
            },
            {
                "type": {
                    "names": [
                        "AudioStats.AudioStreamStats"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "mixerStream"
            }
        ],
        "longname": "AudioStats",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "pingMsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "pingMs"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.pingMsChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "inputReadMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "inputReadMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.inputReadMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "inputUnplayedMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "inputUnplayedMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.inputUnplayedMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "outputUnplayedMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "outputUnplayedMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.outputUnplayedMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sentTimegapMsMaxChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsMax"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsMaxChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sentTimegapMsAvgChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsAvg"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsAvgChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sentTimegapMsMaxWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsMaxWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsMaxWindowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sentTimegapMsAvgWindowChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "sentTimegapMsAvgWindow"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.sentTimegapMsAvgWindowChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "mixerStreamChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.mixerStreamChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clientStreamChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.clientStreamChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "injectorStreamsChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AudioStats",
        "longname": "AudioStats.injectorStreamsChanged",
        "scope": "static"
    },
    {
        "description": "Reverberation options that can be used to initialize an {@link AudioEffectOptions} object when created.",
        "kind": "typedef",
        "name": "ReverbOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10000,
                "description": "The corner frequency (Hz) of the low-pass filter at reverb input.",
                "name": "bandwidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The delay (milliseconds) between dry signal and the onset of early reflections.",
                "name": "preDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The delay (milliseconds) between early reflections and the onset of reverb tail.",
                "name": "lateDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.",
                "name": "reverbTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the early reflections, normally 100%.",
                "name": "earlyDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the reverb tail, normally 100%.",
                "name": "lateDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The apparent room size, from small (0%) to large (100%).",
                "name": "roomSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the echo density in the reverb tail, normally 100%.",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.5,
                "description": "Adjusts the bass-frequency reverb time, as multiple of reverbTime.",
                "name": "bassMult"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 250,
                "description": "The crossover frequency (Hz) for the onset of bassMult.",
                "name": "bassFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -6,
                "description": "Reduces the high-frequency reverb time, as attenuation (dB).",
                "name": "highGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3000,
                "description": "The crossover frequency (Hz) for the onset of highGain.",
                "name": "highFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2.3,
                "description": "The rate of modulation (Hz) of the LFO-modulated delay lines.",
                "name": "modRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The depth of modulation (percent) of the LFO-modulated delay lines.",
                "name": "modDepth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the early reflections.",
                "name": "earlyGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the reverb tail.",
                "name": "lateGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).",
                "name": "wetDryMix"
            }
        ],
        "memberof": "AudioEffectOptions",
        "longname": "AudioEffectOptions.ReverbOptions",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>Audio effect options used by the {@link Audio} API.\r\r<p>Create using <code>new AudioEffectOptions(reverbOptions)</code>.</p>",
        "kind": "class",
        "name": "AudioEffectOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "AudioEffectOptions.ReverbOptions"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "Reverberation options.",
                "name": "reverbOptions"
            }
        ],
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 10000,
                "description": "The corner frequency (Hz) of the low-pass filter at reverb input.",
                "name": "bandwidth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The delay (milliseconds) between dry signal and the onset of early reflections.",
                "name": "preDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The delay (milliseconds) between early reflections and the onset of reverb tail.",
                "name": "lateDelay"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "The time (seconds) for the reverb tail to decay by 60dB, also known as RT60.",
                "name": "reverbTime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the early reflections, normally 100%.",
                "name": "earlyDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the buildup of echo density in the reverb tail, normally 100%.",
                "name": "lateDiffusion"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The apparent room size, from small (0%) to large (100%).",
                "name": "roomSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100,
                "description": "Adjusts the echo density in the reverb tail, normally 100%.",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.5,
                "description": "Adjusts the bass-frequency reverb time, as multiple of reverbTime.",
                "name": "bassMult"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 250,
                "description": "The crossover frequency (Hz) for the onset of bassMult.",
                "name": "bassFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -6,
                "description": "Reduces the high-frequency reverb time, as attenuation (dB).",
                "name": "highGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3000,
                "description": "The crossover frequency (Hz) for the onset of highGain.",
                "name": "highFreq"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2.3,
                "description": "The rate of modulation (Hz) of the LFO-modulated delay lines.",
                "name": "modRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "The depth of modulation (percent) of the LFO-modulated delay lines.",
                "name": "modDepth"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the early reflections.",
                "name": "earlyGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Adjusts the relative level (dB) of the reverb tail.",
                "name": "lateGain"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The apparent distance of the source (percent) in the early reflections.",
                "name": "earlyMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixLeft"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 90,
                "description": "The apparent distance of the source (percent) in the reverb tail.",
                "name": "lateMixRight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 50,
                "description": "Adjusts the wet/dry ratio, from completely dry (0%) to completely wet (100%).",
                "name": "wetDryMix"
            }
        ],
        "longname": "AudioEffectOptions",
        "scope": "global"
    },
    {
        "description": "Configures how an audio injector plays its audio.",
        "kind": "typedef",
        "name": "AudioInjectorOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "Vec3.ZERO",
                "description": "The position in the domain to play the sound.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "Quat.IDENTITY",
                "description": "The orientation in the domain to play the sound in.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "Playback volume, between <code>0.0</code> and <code>1.0</code>.",
                "name": "volume"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "Alter the pitch of the sound, within +/- 2 octaves. The value is the relative sample rate to \r    resample the sound at, range <code>0.0625</code> &ndash; <code>16.0</code>. A value of <code>0.0625</code> lowers the \r    pitch by 2 octaves; <code>1.0</code> is no change in pitch; <code>16.0</code> raises the pitch by 2 octaves.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the sound is played repeatedly until playback is stopped.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Starts playback from a specified time (seconds) within the sound file, &ge; \r    <code>0</code>.",
                "name": "secondOffset"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "IF <code>true</code>, the sound is played back locally on the client rather than to\r    others via the audio mixer.",
                "name": "localOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<strong>Deprecated:</strong> This property is deprecated and will be\r    removed.",
                "name": "ignorePenumbra"
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.AudioInjectorOptions",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>An audio resource, created by {@link SoundCache.getSound}, to be played back using {@link Audio.playSound}.\r<p>Supported formats:</p>\r<ul>\r  <li>WAV: 16-bit uncompressed WAV at any sample rate, with 1 (mono), 2(stereo), or 4 (ambisonic) channels.</li>\r  <li>MP3: Mono or stereo, at any sample rate.</li>\r  <li>RAW: 48khz 16-bit mono or stereo. Filename must include <code>\".stereo\"</code> to be interpreted as stereo.</li>\r</ul>",
        "kind": "class",
        "name": "SoundObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the sound has been downloaded and is ready to be played, otherwise \r    <code>false</code>.",
                "name": "downloaded"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the sound, in seconds.",
                "name": "duration"
            }
        ],
        "longname": "SoundObject",
        "scope": "global"
    },
    {
        "description": "Triggered when the sound has been downloaded and is ready to be played.",
        "kind": "function",
        "name": "ready",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "SoundObject",
        "longname": "SoundObject.ready",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>API to manage sound cache resources.",
        "kind": "namespace",
        "name": "SoundCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "SoundCache",
        "scope": "global"
    },
    {
        "description": "Loads the content of an audio file into a {@link SoundObject}, ready for playback by {@link Audio.playSound}.",
        "kind": "function",
        "name": "getSound",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the audio file to load &mdash; Web, ATP, or file. See {@link SoundObject} for supported \r    formats.",
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The sound ready for playback."
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.getSound",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "AttachmentData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "modelUrl"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "jointName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "soft"
            }
        ],
        "longname": "AttachmentData",
        "scope": "global"
    },
    {
        "description": "Returns the minimum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMinScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "minimum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDomainMinScale",
        "scope": "static"
    },
    {
        "description": "Returns the maximum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMaxScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "maximum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDomainMaxScale",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the current eye height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getEyeHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Eye height of avatar in meters."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getEyeHeight",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the current height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Height of avatar in meters."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHeight",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setHandState",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "state"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setHandState",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHandState",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getHandState",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setRawJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<JointData>"
                    ]
                },
                "name": "data"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setRawJointData",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation and position relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/t-pose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's translation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Clear joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly faster than the function variation that specifies the joint name.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearJointData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Get the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Get the translation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation and position relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose with arm rotated\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Rotate the right arm.\rvar newArmRotation = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\rMyAvatar.setJointRotation(\"RightArm\", newArmRotation);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's translation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Stretch your avatar's neck. Depending on the avatar you are using, you will either see a gap between \rthe head and body or you will see the neck stretched.<br />\r<img alt=\"Avatar with neck stretched\" src=\"https://docs.highfidelity.com/images/stretched-neck.png\" /></caption>\r// Stretch your avatar's neck.\rMyAvatar.setJointTranslation(\"Neck\", { x: 0, y: 25, z: 0 });\r\r// Restore your avatar's neck after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Clear joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly slower than the function variation that specifies the joint index.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "examples": [
            "<caption>Offset and restore the position of your avatar's head.</caption>\r// Move your avatar's head up by 25cm from where it should be.\rMyAvatar.setJointTranslation(\"Neck\", { x: 0, y: 0.25, z: 0 });\r\r// Restore your avatar's head to its default position after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearJointData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Get the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Get the translation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent."
            }
        ],
        "examples": [
            "<caption>Report the translation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Get the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.",
        "kind": "function",
        "name": "getJointRotations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations of all joints relative to each's parent. The values are in the same order as the array \rreturned by {@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}."
            }
        ],
        "examples": [
            "<caption>Report the rotations of all your avatar's joints.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotations()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointRotations",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getJointTranslations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointTranslations",
        "scope": "static"
    },
    {
        "description": "Set the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,\rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate\rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set\rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations for all joints in the avatar. The values are in the same order as the \rarray returned by {@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}.",
                "name": "jointRotations"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Get all join rotations.\rvar jointRotations = MyAvatar.getJointRotations(); \r\r// Update the rotation of the right arm in the array.\rjointRotations[MyAvatar.getJointIndex(\"RightArm\")] = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\r\r// Update all joint rotations.\rMyAvatar.setJointRotations(jointRotations);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointRotations",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setJointTranslations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "name": "translations"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointTranslations",
        "scope": "static"
    },
    {
        "description": "Clear all joint translations and rotations that have been set by script. This restores all motion from the default \ranimation system including inverse kinematics for all joints.",
        "kind": "function",
        "name": "clearJointsData",
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.</caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearJointsData",
        "scope": "static"
    },
    {
        "description": "Get the joint index for a named joint. The joint index value is the position of the joint in the array returned by \r{@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}.",
        "kind": "function",
        "name": "getJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint."
            }
        ],
        "examples": [
            "<caption>Report the index of your avatar's left arm joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointIndex(\"LeftArm\"));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointIndex",
        "scope": "static"
    },
    {
        "description": "Get the names of all the joints in the current avatar.",
        "kind": "function",
        "name": "getJointNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The joint names."
            }
        ],
        "examples": [
            "<caption>Report the names of all the joints in your current avatar.</caption>\rprint(JSON.stringify(MyAvatar.getJointNames()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointNames",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setBlendshape",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setBlendshape",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAttachmentsVariant",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAttachmentsVariant",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAttachmentsVariant",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "variant"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAttachmentsVariant",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "entityData"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.updateAvatarEntity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.clearAvatarEntity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setForceFaceTrackerConnected",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "connected"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setForceFaceTrackerConnected",
        "scope": "static"
    },
    {
        "description": "Get information about all models currently attached to your avatar.",
        "kind": "function",
        "name": "getAttachmentData",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information about all models attached to your avatar."
            }
        ],
        "examples": [
            "<caption>Report the URLs of all current attachments.</caption>\rvar attachments = MyAvatar.getaAttachmentData();\rfor (var i = 0; i < attachments.length; i++) {\r    print (attachments[i].modelURL);\r}"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAttachmentData",
        "scope": "static"
    },
    {
        "description": "Set all models currently attached to your avatar. For example, if you retrieve attachment data using \r{@link MyAvatar.getAttachmentData} or {@link Avatar.getAttachmentData}, make changes to it, and then want to update your avatar's attachments per the \rchanged data. You can also remove all attachments by using setting <code>attachmentData</code> to <code>null</code>.",
        "kind": "function",
        "name": "setAttachmentData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "The attachment data defining the models to have attached to your avatar. Use \r    <code>null</code> to remove all attachments.",
                "name": "attachmentData"
            }
        ],
        "examples": [
            "<caption>Remove a hat attachment if your avatar is wearing it.</caption>\rvar hatURL = \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\";\rvar attachments = MyAvatar.getAttachmentData();\r\rfor (var i = 0; i < attachments.length; i++) {\r    if (attachments[i].modelURL === hatURL) {\r        attachments.splice(i, 1);\r        MyAvatar.setAttachmentData(attachments);\r        break;\r    }\r }"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAttachmentData",
        "scope": "static"
    },
    {
        "description": "Attach a model to your avatar. For example, you can give your avatar a hat to wear, a guitar to hold, or a surfboard to \rstand on.\r<p>Note: Attached models are models only; they are not entities and can not be manipulated using the {@link Entities} API. \rNor can you use this function to attach an entity (such as a sphere or a box) to your avatar.</p>",
        "kind": "function",
        "name": "attach",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to attach. Models can be .FBX or .OBJ format.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the avatar joint (see {@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}) to attach the model \r    to.",
                "name": "jointName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "The offset to apply to the model relative to the joint position.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The rotation to apply to the model relative to the joint orientation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "1.0",
                "description": "The scale to apply to the model.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If the model has a skeleton, set this to <code>true</code> so that the bones of the \r    attached model's skeleton are be rotated to fit the avatar's current pose. <code>isSoft</code> is used, for example, \r    to have clothing that moves with the avatar.<br />\r    If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and <code>scale</code> parameters are \r    ignored.",
                "name": "isSoft"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "allowDuplicates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "name": "useSaved"
            }
        ],
        "examples": [
            "<caption>Attach a cowboy hat to your avatar's head.</caption>\rvar attachment = {\r    modelURL: \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\",\r    jointName: \"Head\",\r    translation: {\"x\": 0, \"y\": 0.25, \"z\": 0},\r    rotation: {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1},\r    scale: 1,\r    isSoft: false\r};\r\r MyAvatar.attach(attachment.modelURL,\r                 attachment.jointName,\r                 attachment.translation,\r                 attachment.rotation,\r                 attachment.scale,\r                 attachment.isSoft);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.attach",
        "scope": "static"
    },
    {
        "description": "Detach the most recently attached instance of a particular model from either a specific joint or any joint.",
        "kind": "function",
        "name": "detachOne",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the most \r    recently attached model is removed from which ever joint it was attached to.",
                "name": "jointName"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.detachOne",
        "scope": "static"
    },
    {
        "description": "Detach all instances of a particular model from either a specific joint or all joints.",
        "kind": "function",
        "name": "detachAll",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the model is \r    detached from all joints.",
                "name": "jointName"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.detachAll",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarEntityData",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAvatarEntityData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAvatarEntityData",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "avatarEntityData"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAvatarEntityData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSensorToWorldMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSensorToWorldMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSensorToWorldScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSensorToWorldScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getControllerLeftHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getControllerLeftHandMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getControllerRightHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getControllerRightHandMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDataRate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDataRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getUpdateRate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getUpdateRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "displayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.displayNameChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionDisplayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sessionDisplayNameChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "skeletonModelURLChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.skeletonModelURLChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "lookAtSnappingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.lookAtSnappingChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionUUIDChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendAvatarDataPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "sendAll"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sendAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendIdentityPacket",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.sendIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setJointMappingsFromNetworkReply",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setJointMappingsFromNetworkReply",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSessionUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSessionUUID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTargetScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getTargetScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetLastSent",
        "memberof": "MyAvatar",
        "longname": "MyAvatar.resetLastSent",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Assignment Client Scripts</td></tr></table><br><strong>Note:</strong> An <code>AvatarList</code> API is also provided for Interface and client entity scripts: it is a \rsynonym for the {@link AvatarManager} API.",
        "kind": "namespace",
        "name": "AvatarList",
        "hifiAssignmentClient": true,
        "longname": "AvatarList",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "getAvatarIdentifiers",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.getAvatarIdentifiers",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarsInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.getAvatarsInRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatar",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "avatarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AvatarData"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.getAvatar",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "avatarAddedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.avatarAddedEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "avatarRemovedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.avatarRemovedEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "avatarSessionChangedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "oldSessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.avatarSessionChangedEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isAvatarInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.isAvatarInRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionUUIDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "oldSessionUUID"
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarDataPacket",
        "params": [
            {
                "name": "message"
            },
            {
                "name": "sendingNode"
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.processAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarIdentityPacket",
        "params": [
            {
                "name": "message"
            },
            {
                "name": "sendingNode"
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.processAvatarIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processKillAvatar",
        "params": [
            {
                "name": "message"
            },
            {
                "name": "sendingNode"
            }
        ],
        "memberof": "AvatarList",
        "longname": "AvatarList.processKillAvatar",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDefaultJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultJointRotation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDefaultJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getDefaultJointTranslation",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the default joint rotations in avatar coordinates.\rThe default pose of the avatar is defined by the position and orientation of all bones\rin the avatar's model file. Typically this is a T-pose.",
        "kind": "function",
        "name": "getAbsoluteDefaultJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "index number",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of this joint in avatar coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteDefaultJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the default joint translations in avatar coordinates.\rThe default pose of the avatar is defined by the position and orientation of all bones\rin the avatar's model file. Typically this is a T-pose.",
        "kind": "function",
        "name": "getAbsoluteDefaultJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "index number",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of this joint in avatar coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAbsoluteDefaultJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Set the offset applied to the current avatar. The offset adjusts the position that the avatar is rendered. For example, \rwith an offset of <code>{ x: 0, y: 0.1, z: 0 }</code>, your avatar will appear to be raised off the ground slightly.",
        "kind": "function",
        "name": "setSkeletonOffset",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The skeleton offset to set.",
                "name": "offset"
            }
        ],
        "examples": [
            "<caption>Raise your avatar off the ground a little.</caption>\r// Raise your avatar off the ground a little.\rMyAvatar.setSkeletonOffset({ x: 0, y: 0.1: z: 0 });\r\r// Restore its offset after 5s.\rScript.setTimeout(function () {\r    MyAvatar.setSkeletonOffset(Vec3.ZERO);\r}, 5000);"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setSkeletonOffset",
        "scope": "static"
    },
    {
        "description": "Get the offset applied to the current avatar. The offset adjusts the position that the avatar is rendered. For example, \rwith an offset of <code>{ x: 0, y: 0.1, z: 0 }</code>, your avatar will appear to be raised off the ground slightly.",
        "kind": "function",
        "name": "getSkeletonOffset",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current skeleton offset."
            }
        ],
        "examples": [
            "<caption>Report your avatar's current skeleton offset.</caption>\rprint(JSON.stringify(MyAvatar.getSkeletonOffset());"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSkeletonOffset",
        "scope": "static"
    },
    {
        "description": "Get the position of a joint in the current avatar.",
        "kind": "function",
        "name": "getJointPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the joint in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointPosition",
        "scope": "static"
    },
    {
        "description": "Get the position of a joint in the current avatar.",
        "kind": "function",
        "name": "getJointPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the joint in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's hips.</caption>\rprint(JSON.stringify(MyAvatar.getJointPosition(\"Hips\")));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getJointPosition",
        "scope": "static"
    },
    {
        "description": "Get the position of the current avatar's neck in world coordinates.",
        "kind": "function",
        "name": "getNeckPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the neck in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's neck.</caption>\rprint(JSON.stringify(MyAvatar.getNeckPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getNeckPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAcceleration",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getAcceleration",
        "scope": "static"
    },
    {
        "description": "Get the position of the current avatar's feet (or rather, bottom of its collision capsule) in world coordinates.",
        "kind": "function",
        "name": "getWorldFeetPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the avatar's feet in world coordinates."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getWorldFeetPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getParentID",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getParentID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setParentID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "parentID"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setParentID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getParentJointIndex",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getParentJointIndex",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setParentJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "parentJointIndex"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.setParentJointIndex",
        "scope": "static"
    },
    {
        "description": "Returns an array of joints, where each joint is an object containing name, index, and parentIndex fields.",
        "kind": "function",
        "name": "getSkeleton",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<MyAvatar.SkeletonJoint>"
                    ]
                },
                "description": "A list of information about each joint in this avatar's skeleton."
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSkeleton",
        "scope": "static"
    },
    {
        "description": "Information about a single joint in an Avatar's skeleton hierarchy.",
        "kind": "typedef",
        "name": "SkeletonJoint",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Joint name.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Joint index.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Index of this joint's parent (-1 if no parent).",
                "name": "parentIndex"
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.SkeletonJoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSimulationRate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getSimulationRate",
        "scope": "static"
    },
    {
        "description": "Get the position of the left palm in world coordinates.",
        "kind": "function",
        "name": "getLeftPalmPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the left palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's left palm.</caption>\rprint(JSON.stringify(MyAvatar.getLeftPalmPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftPalmPosition",
        "scope": "static"
    },
    {
        "description": "Get the rotation of the left palm in world coordinates.",
        "kind": "function",
        "name": "getLeftPalmRotation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the left palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's left palm.</caption>\rprint(JSON.stringify(MyAvatar.getLeftPalmRotation()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getLeftPalmRotation",
        "scope": "static"
    },
    {
        "description": "Get the position of the right palm in world coordinates.",
        "kind": "function",
        "name": "getRightPalmPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the right palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the position of your avatar's right palm.</caption>\rprint(JSON.stringify(MyAvatar.getRightPalmPosition()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightPalmPosition",
        "scope": "static"
    },
    {
        "description": "Get the rotation of the right palm in world coordinates.",
        "kind": "function",
        "name": "getRightPalmRotation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the right palm in world coordinates."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's right palm.</caption>\rprint(JSON.stringify(MyAvatar.getRightPalmRotation()));"
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.getRightPalmRotation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "rigReady",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.rigReady",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "rigReset",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "MyAvatar",
        "longname": "MyAvatar.rigReset",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Actions</code> object has properties representing predefined actions on the user's avatar and \rInterface. The property values are integer IDs, uniquely identifying each action. <em>Read-only.</em> These can be used \ras end points in the routes of a {@link MappingObject}. The data routed to each action is either a number or a \r{@link Pose}.</p>\r\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td colSpan=4><strong>Avatar Movement</strong></td>\r    <tr><td><code>TranslateX</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its \r      x-axis, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>TranslateY</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its \r      y-axis, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>TranslateZ</code></td><td>number</td><td>number</td><td>Move the user's avatar in the direction of its \r      z-axis, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>Pitch</code></td><td>number</td><td>number</td><td>Rotate the user's avatar head and attached camera \r      about its negative x-axis (i.e., positive values pitch down), if the camera isn't in HMD, independent, or mirror \r      modes.</td></tr>\r    <tr><td><code>Yaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis, if the \r      camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>Roll</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepTranslateX</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepTranslateY</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepTranslateZ</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepPitch</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r    <tr><td><code>StepYaw</code></td><td>number</td><td>number</td><td>Rotate the user's avatar about its y-axis in a \r      step increment, if the camera isn't in independent or mirror modes.</td></tr>\r    <tr><td><code>StepRoll</code></td><td>number</td><td>number</td><td>No action.</td></tr>\r\r    <tr><td colSpan=4><strong>Avatar Skeleton</strong></td>\r    <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Set the hips pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Set the spine2 pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Set the head pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Set the left arm pose of the user's avatar.\r      </td></tr>\r    <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Set the right arm pose of the user's \r      avatar.</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Set the left hand pose of the user's\r      avatar.</td></tr>\r    <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left thumb 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left index 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left middle 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 1 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 2 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 3 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left ring 4 finger joint pose \r      of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Set the left pinky 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Set the right hand of the user's avatar.\r      </td></tr>\r    <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right thumb 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right index 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 1 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 2 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 3 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right middle 4 finger \r      joint pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right ring 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 1 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 2 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 3 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Set the right pinky 4 finger joint \r      pose of the user's avatar.</td></tr>\r    <tr><td><code>LeftFoot</code></td><td>number</td><td>{@link Pose}</td><td>Set the left foot pose of the user's\r      avatar.</td></tr>\r    <tr><td><code>RightFoot</code></td><td>number</td><td>{@link Pose}</td><td>Set the right foot pose of the user's\r      avatar.</td></tr>\r\r    <tr><td colSpan=4><strong><strong>Application</strong></td>\r    <tr><td><code>BoomIn</code></td><td>number</td><td>number</td><td>Zoom camera in from third person toward first \r      person view.</td></tr>\r    <tr><td><code>BoomOut</code></td><td>number</td><td>number</td><td>Zoom camera out from first person to third \r      person view.</td></tr>\r    <tr><td><code>CycleCamera</code></td><td>number</td><td>number</td><td>Cycle the camera view from first person, to \r      third person, to full screen mirror, then back to first person and repeat.</td></tr>\r    <tr><td><code>ContextMenu</code></td><td>number</td><td>number</td><td>Show / hide the tablet.</td></tr>\r    <tr><td><code>ToggleMute</code></td><td>number</td><td>number</td><td>Toggle the microphone mute.</td></tr>\r    <tr><td><code>ToggleOverlay</code></td><td>number</td><td>number</td><td>Toggle the display of overlays.</td></tr>\r    <tr><td><code>Sprint</code></td><td>number</td><td>number</td><td>Set avatar sprint mode.</td></tr>\r    <tr><td><code>ReticleClick</code></td><td>number</td><td>number</td><td>Set mouse-pressed.</td></tr>\r    <tr><td><code>ReticleX</code></td><td>number</td><td>number</td><td>Move the cursor left/right in the x direction.\r      </td></tr>\r    <tr><td><code>ReticleY</code></td><td>number</td><td>number</td><td>move the cursor up/down in the y direction.\r      </td></tr>\r    <tr><td><code>ReticleLeft</code></td><td>number</td><td>number</td><td>Move the cursor left.</td></tr>\r    <tr><td><code>ReticleRight</code></td><td>number</td><td>number</td><td>Move the cursor right.</td></tr>\r    <tr><td><code>ReticleUp</code></td><td>number</td><td>number</td><td>Move the cursor up.</td></tr>\r    <tr><td><code>ReticleDown</code></td><td>number</td><td>number</td><td>Move the cursor down.</td></tr>\r    <tr><td><code>UiNavLateral</code></td><td>number</td><td>number</td><td>Generate a keyboard left or right arrow key \r      event.</td></tr>\r    <tr><td><code>UiNavVertical</code></td><td>number</td><td>number</td><td>Generate a keyboard up or down arrow key \r      event.</td></tr>\r    <tr><td><code>UiNavGroup</code></td><td>number</td><td>number</td><td>Generate a keyboard tab or back-tab key event.\r      </td></tr>\r    <tr><td><code>UiNavSelect</code></td><td>number</td><td>number</td><td>Generate a keyboard Enter key event.\r      </td></tr>\r    <tr><td><code>UiNavBack</code></td><td>number</td><td>number</td><td>Generate a keyboard Esc key event.</td></tr>\r    <tr><td><code>LeftHandClick</code></td><td>number</td><td>number</td><td><strong>Deprecated: </strong> No action.\r      </td></tr>\r    <tr><td><code>RightHandClick</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> No action.\r      </td></tr>\r    <tr><td><code>Shift</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> No action.</td></tr>\r    <tr><td><code>PrimaryAction</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> No action.\r      </td></tr>\r    <tr><td><code>SecondaryAction</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> No action.\r      </td></tr>\r\r    <tr><td colSpan=4><strong>Aliases</strong></td>\r    <tr><td><code>Backward</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateZ</code> in the \r      positive direction.</td></tr>\r    <tr><td><code>Forward</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateZ</code> in the negative \r      direction.</td></tr>\r    <tr><td><code>StrafeRight</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateX</code> in the\r      positive direction.</td></tr>\r    <tr><td><code>StrafeLeft</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateX</code> in the\r      negative direction.</td></tr>\r    <tr><td><code>Up</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateY</code> in the positive\r      direction.</td></tr>\r    <tr><td><code>Down</code></td><td>number</td><td>number</td><td>Alias for <code>TranslateY</code> in the negative \r      direction.</td></tr>\r    <tr><td><code>PitchDown</code></td><td>number</td><td>number</td><td>Alias for <code>Pitch</code> in the positive \r      direction.</td></tr>\r    <tr><td><code>PitchUp</code></td><td>number</td><td>number</td><td>Alias for <code>Pitch</code> in the negative\r      direction.</td></tr>\r    <tr><td><code>YawLeft</code></td><td>number</td><td>number</td><td>Alias for <code>Yaw</code> in the positive\r      direction.</td></tr>\r    <tr><td><code>YawRight</code></td><td>number</td><td>number</td><td>Alias for <code>Yaw</code> in the negative \r      direction.</td></tr>\r\r    <tr><td colSpan=4><strong>Deprecated Aliases</strong></td>\r    <tr><td><code>LEFT_HAND</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated:</strong> Use \r      <code>LeftHand</code> instead.</td></tr>\r    <tr><td><code>RIGHT_HAND</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated:</strong> Use \r      <code>RightHand</code> instead.</td></tr>\r    <tr><td><code>BOOM_IN</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>BoomIn</code> instead.</td></tr>\r    <tr><td><code>BOOM_OUT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>BoomOut</code> instead.</td></tr>\r    <tr><td><code>CONTEXT_MENU</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>ContextMenu</code> instead.</td></tr>\r    <tr><td><code>TOGGLE_MUTE</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>ToggleMute</code> instead.</td></tr>\r    <tr><td><code>SPRINT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>Sprint</code> instead.</td></tr>\r    <tr><td><code>LONGITUDINAL_BACKWARD</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>Backward</code> instead.</td></tr>\r    <tr><td><code>LONGITUDINAL_FORWARD</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>Forward</code> instead.</td></tr>\r    <tr><td><code>LATERAL_LEFT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>StrafeLeft</code> instead.</td></tr>\r    <tr><td><code>LATERAL_RIGHT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>StrafeRight</code> instead.</td></tr>\r    <tr><td><code>VERTICAL_UP</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>Up</code> instead.</td></tr>\r    <tr><td><code>VERTICAL_DOWN</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>Down</code> instead.</td></tr>\r    <tr><td><code>PITCH_DOWN</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>PitchDown</code> instead.</td></tr>\r    <tr><td><code>PITCH_UP</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>PitchUp</code> instead.</td></tr>\r    <tr><td><code>YAW_LEFT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>YawLeft</code> instead.</td></tr>\r    <tr><td><code>YAW_RIGHT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>YawRight</code> instead.</td></tr>\r    <tr><td><code>LEFT_HAND_CLICK</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>LeftHandClick</code> instead.</td></tr>\r    <tr><td><code>RIGHT_HAND_CLICK</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>RightHandClick</code> instead.</td></tr>\r    <tr><td><code>SHIFT</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>Shift</code> instead.</td></tr>\r    <tr><td><code>ACTION1</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>PrimaryAction</code> instead.</td></tr>\r    <tr><td><code>ACTION2</code></td><td>number</td><td>number</td><td><strong>Deprecated:</strong> Use \r      <code>SecondaryAction</code> instead.</td></tr>\r\r    <tr><td colSpan=4><strong>Deprecated Trackers</strong></td>\r    <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r    <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td><strong>Deprecated: </strong> No\r      action.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Actions",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Actions",
        "scope": "static"
    },
    {
        "description": "<p>Some controller actions may be associated with one or both hands:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Left hand.</td></tr>\r    <tr><td><code>1</code></td><td>Right hand.</td></tr>\r    <tr><td><code>2</code></td><td>Both hands.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hand",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hand",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware</code> object has properties representing standard and hardware-specific controller and \rcomputer outputs, plus predefined actions on Interface and the user's avatar. <em>Read-only.</em> The outputs can be mapped \rto actions or functions in a {@link RouteObject} mapping. Additionally, hardware-specific controller outputs can be mapped \rto standard controller outputs. \r\r<p>Controllers typically implement a subset of the {@link Controller.Standard} controls, plus they may implement some extras. \rSome common controllers are included in the table. You can see the outputs provided by these and others by \rviewing their {@link Controller.MappingJSON|MappingJSON} files at \r<a href=\"https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers\">\rhttps://github.com/highfidelity/hifi/tree/master/interface/resources/controllers</a>.</p>\r\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>Controller.Hardware.Actions</code></td><td>object</td><td>Synonym for {@link Controller.Actions}.</td></tr>\r    <tr><td><code>Controller.Hardware.Application</code></td><td>object</td><td>Interface state outputs. See \r      {@link Controller.Hardware-Application}.</td></tr>\r    <tr><td><code>Controller.Hardware.Keyboard</code></td><td>object</td><td>Keyboard, mouse, and touch pad outputs. See\r      {@link Controller.Hardware-Keyboard}.</td></tr>\r    <tr><td><code>Controller.Hardware.OculusTouch</code></td><td>object</td><td>Oculus Rift HMD outputs. See\r      {@link Controller.Hardware-OculusTouch}.</td></tr>\r    <tr><td><code>Controller.Hardware.Vive</code></td><td>object</td><td>Vive HMD outputs. See\r      {@link Controller.Hardware-Vive}.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware",
        "type": {
            "names": [
                "object"
            ]
        },
        "examples": [
            "<caption>List all the currently available <code>Controller.Hardware</code> properties.</caption>\rfunction printProperties(string, item) {\r    print(string);\r    for (var key in item) {\r        if (item.hasOwnProperty(key)) {\r            printProperties(string + \".\" + key, item[key]);\r        }\r    }\r}\r\rprintProperties(\"Controller.Hardware\", Controller.Hardware);\r\n "
        ],
        "memberof": "Controller",
        "longname": "Controller.Hardware",
        "scope": "static"
    },
    {
        "description": "The pose of a joint or other item relative to the world or a parent.",
        "kind": "typedef",
        "name": "Pose",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Translation.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Rotation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Velocity in m/s.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Angular velocity in rad/s.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the pose is valid, otherwise <code>false</code>.",
                "name": "valid"
            }
        ],
        "longname": "Pose",
        "scope": "global"
    },
    {
        "description": "Get a list of all available actions.",
        "kind": "function",
        "name": "getAllActions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Action>"
                    ]
                },
                "description": "All available actions."
            }
        ],
        "deprecated": "This function no longer works.",
        "memberof": "Controller",
        "longname": "Controller.getAllActions",
        "scope": "static"
    },
    {
        "description": "Get a list of all available inputs for a hardware device.",
        "kind": "function",
        "name": "getAvailableInputs",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer ID of the hardware device.",
                "name": "deviceID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<NamedPair>"
                    ]
                },
                "description": "All available inputs for the device."
            }
        ],
        "deprecated": "This function no longer works.",
        "memberof": "Controller",
        "longname": "Controller.getAvailableInputs",
        "scope": "static"
    },
    {
        "description": "Find the name of a particular controller from its device ID.",
        "kind": "function",
        "name": "getDeviceName",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the device.",
                "name": "deviceID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the device if found, otherwise <code>\"unknown\"</code>."
            }
        ],
        "examples": [
            "<caption>Get the name of the Oculus Touch controller from its ID.</caption>\rvar deviceID = Controller.findDevice(\"OculusTouch\");\rprint(\"Device ID = \" + deviceID);\r\rvar deviceName = Controller.getDeviceName(deviceID);\rprint(\"Device name = \" + deviceName);"
        ],
        "memberof": "Controller",
        "longname": "Controller.getDeviceName",
        "scope": "static"
    },
    {
        "description": "Get the current value of an action.",
        "kind": "function",
        "name": "getActionValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the action.",
                "name": "actionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current value of the action."
            }
        ],
        "examples": [
            "<caption>Periodically report the value of the \"TranslateX\" action.</caption>\rvar actionID = Controller.findAction(\"TranslateX\");\r\rfunction reportValue() {\r    print(Controller.getActionValue(actionID));\r}\rreportTimer = Script.setInterval(reportValue, 1000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.getActionValue",
        "scope": "static"
    },
    {
        "description": "Find the ID of a specific controller from its device name.",
        "kind": "function",
        "name": "findDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the device to find.",
                "name": "deviceName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the device if available, otherwise <code>65535</code>."
            }
        ],
        "examples": [
            "<caption>Get the ID of the Oculus Touch.</caption>\rvar deviceID = Controller.findDevice(\"OculusTouch\");\rprint(\"Device ID = \" + deviceID);"
        ],
        "memberof": "Controller",
        "longname": "Controller.findDevice",
        "scope": "static"
    },
    {
        "description": "Get the names of all currently available controller devices plus \"Actions\", \"Application\", and \"Standard\".",
        "kind": "function",
        "name": "getDeviceNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of device names."
            }
        ],
        "examples": [
            "<caption>Get the names of all currently available controller devices.</caption>\rvar deviceNames = Controller.getDeviceNames();\rprint(JSON.stringify(deviceNames));\r// [\"Standard\",\"Keyboard\",\"LeapMotion\",\"OculusTouch\",\"Application\",\"Actions\"] or similar."
        ],
        "memberof": "Controller",
        "longname": "Controller.getDeviceNames",
        "scope": "static"
    },
    {
        "description": "Find the ID of an action from its name.",
        "kind": "function",
        "name": "findAction",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the action: one of the {@link Controller.Actions} property names.",
                "name": "actionName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer ID of the action if found, otherwise <code>4095</code>. Note that this value is not \rthe same as the value of the relevant {@link Controller.Actions} property."
            }
        ],
        "examples": [
            "<caption>Get the ID of the \"TranslateY\" action. Compare with the property value.</caption>\rvar actionID = Controller.findAction(\"TranslateY\");\rprint(\"Action ID = \" + actionID);  // 1\rprint(\"Property value = \" + Controller.Actions.TranslateY);  // 537001728 or similar value."
        ],
        "memberof": "Controller",
        "longname": "Controller.findAction",
        "scope": "static"
    },
    {
        "description": "Get the names of all actions available as properties of {@link Controller.Actions}.",
        "kind": "function",
        "name": "getActionNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of action names."
            }
        ],
        "examples": [
            "<caption>Get the names of all actions.</caption>\rvar actionNames = Controller.getActionNames();\rprint(\"Action names: \" + JSON.stringify(actionNames));\r// [\"TranslateX\",\"TranslateY\",\"TranslateZ\",\"Roll\", ..."
        ],
        "memberof": "Controller",
        "longname": "Controller.getActionNames",
        "scope": "static"
    },
    {
        "description": "Get the value of a controller button or axis output. Note: Also gets the value of a controller axis output.",
        "kind": "function",
        "name": "getValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The {@link Controller.Standard} or {@link Controller.Hardware} item.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current value of the controller item output if <code>source</code> is valid, otherwise \r    <code>0</code>."
            }
        ],
        "examples": [
            "<caption>Report the Standard and Vive right trigger values.</caption>\rvar triggerValue = Controller.getValue(Controller.Standard.RT);\rprint(\"Trigger value: \" + triggerValue);\r\rif (Controller.Hardware.Vive) {\r    triggerValue = Controller.getValue(Controller.Hardware.Vive.RT);\r    print(\"Vive trigger value: \" + triggerValue);\r} else {\r    print(\"No Vive present\");\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.getValue",
        "scope": "static"
    },
    {
        "description": "Get the value of a controller axis output. Note: Also gets the value of a controller button output.",
        "kind": "function",
        "name": "getAxisValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The {@link Controller.Standard} or {@link Controller.Hardware} item.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The current value of the controller item output if <code>source</code> is valid, otherwise \r    <code>0</code>."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getAxisValue",
        "scope": "static"
    },
    {
        "description": "Get the value of a controller pose output.",
        "kind": "function",
        "name": "getPoseValue",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The {@link Controller.Standard} or {@link Controller.Hardware} pose output.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Pose"
                    ]
                },
                "description": "The current value of the controller pose output if <code>source</code> is a pose output, otherwise \r    an invalid pose with <code>Pose.valid == false</code>."
            }
        ],
        "tags": [
            {
                "originalTitle": "exammple",
                "title": "exammple",
                "text": "<caption>Report the right hand's pose.</caption>\rvar pose = Controller.getPoseValue(Controller.Standard.RightHand);\rprint(\"Pose: \" + JSON.stringify(pose));",
                "value": "<caption>Report the right hand's pose.</caption>\rvar pose = Controller.getPoseValue(Controller.Standard.RightHand);\rprint(\"Pose: \" + JSON.stringify(pose));"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getPoseValue",
        "scope": "static"
    },
    {
        "description": "Triggers a haptic pulse on connected and enabled devices that have the capability.",
        "kind": "function",
        "name": "triggerHapticPulse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the haptic pulse, in milliseconds.",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "examples": [
            "<caption>Trigger a haptic pulse on the right hand.</caption>\rvar HAPTIC_STRENGTH = 0.5;\rvar HAPTIC_DURATION = 10;\rvar RIGHT_HAND = 1;\rController.triggerHapticPulse(HAPTIC_STRENGTH, HAPTIC_DURATION, RIGHT_HAND);"
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerHapticPulse",
        "scope": "static"
    },
    {
        "description": "Triggers a 250ms haptic pulse on connected and enabled devices that have the capability.",
        "kind": "function",
        "name": "triggerShortHapticPulse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerShortHapticPulse",
        "scope": "static"
    },
    {
        "description": "Triggers a haptic pulse on a particular device if connected and enabled and it has the capability.",
        "kind": "function",
        "name": "triggerHapticPulseOnDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the device to trigger the haptic pulse on.",
                "name": "deviceID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The duration of the haptic pulse, in milliseconds.",
                "name": "duration"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "examples": [
            "<caption>Trigger a haptic pulse on an Oculus Touch controller.</caption>\rvar HAPTIC_STRENGTH = 0.5;\rvar deviceID = Controller.findDevice(\"OculusTouch\");\rvar HAPTIC_DURATION = 10;\rvar RIGHT_HAND = 1;\rController.triggerHapticPulseOnDevice(deviceID, HAPTIC_STRENGTH, HAPTIC_DURATION, RIGHT_HAND);"
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerHapticPulseOnDevice",
        "scope": "static"
    },
    {
        "description": "Triggers a 250ms haptic pulse on a particular device if connected and enabled and it has the capability.",
        "kind": "function",
        "name": "triggerShortHapticPulseOnDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the device to trigger the haptic pulse on.",
                "name": "deviceID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The strength of the haptic pulse, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "strength"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hand"
                    ]
                },
                "defaultvalue": 2,
                "description": "The hand or hands to trigger the haptic pulse on.",
                "name": "hand"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.triggerShortHapticPulseOnDevice",
        "scope": "static"
    },
    {
        "description": "Create a new controller mapping. Routes can then be added to the mapping using {@link MappingObject} methods and \rrouted to <code>Standard</code> controls, <code>Actions</code>, or script functions using {@link RouteObject} \rmethods. The mapping can then be enabled using {@link Controller.enableMapping|enableMapping} for it to take effect.",
        "kind": "function",
        "name": "newMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "Uuid.generate()",
                "description": "A unique name for the mapping. If not specified a new UUID generated \r    by {@link Uuid.generate} is used.",
                "name": "mappingName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "A controller mapping object."
            }
        ],
        "examples": [
            "<caption>Create a simple mapping that makes the right trigger move your avatar up.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).to(Controller.Actions.TranslateY);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.newMapping",
        "scope": "static"
    },
    {
        "description": "Enable or disable a controller mapping. When enabled, the routes in the mapping have effect.",
        "kind": "function",
        "name": "enableMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the mapping.",
                "name": "mappingName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then the mapping is enabled, otherwise it is disabled.",
                "name": "enable"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.enableMapping",
        "scope": "static"
    },
    {
        "description": "Disable a controller mapping. When disabled, the routes in the mapping have no effect.",
        "kind": "function",
        "name": "disableMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the mapping.",
                "name": "mappingName"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.disableMapping",
        "scope": "static"
    },
    {
        "description": "Create a new controller mapping from a {@link Controller.MappingJSON|MappingJSON} string. Use \r{@link Controller.enableMapping|enableMapping} to enable the mapping for it to take effect.",
        "kind": "function",
        "name": "parseMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A JSON string of the {@link Controller.MappingJSON|MappingJSON}.",
                "name": "jsonString"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "A controller mapping object."
            }
        ],
        "examples": [
            "<caption>Create a simple mapping that makes the right trigger move your avatar up.</caption>\rvar mappingJSON = {\r    \"name\": \"com.highfidelity.controllers.example.jsonMapping\",\r    \"channels\": [\r        { \"from\": \"Standard.RT\", \"to\": \"Actions.TranslateY\" }\r    ]\r};\r\rvar mapping = Controller.parseMapping(JSON.stringify(mappingJSON));\rmapping.enable();\r\rScript.scriptEnding.connect(function () {\r    mapping.disable();\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.parseMapping",
        "scope": "static"
    },
    {
        "description": "Create a new controller mapping from a {@link Controller.MappingJSON|MappingJSON} JSON file at a URL. Use \r{@link Controller.enableMapping|enableMapping} to enable the mapping for it to take effect.",
        "kind": "function",
        "name": "loadMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL the {@link Controller.MappingJSON|MappingJSON} JSON file.",
                "name": "jsonURL"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "A controller mapping object."
            }
        ],
        "todo": [
            "<em>Implement this function. It currently does not load the mapping from the file; it just returns \r    <code>null</code>.</em>"
        ],
        "memberof": "Controller",
        "longname": "Controller.loadMapping",
        "scope": "static"
    },
    {
        "description": "Get the {@link Controller.Hardware} property tree. Calling this function is the same as using the {@link Controller} \rproperty, <code>Controller.Hardware</code>.",
        "kind": "function",
        "name": "getHardware",
        "returns": [
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The {@link Controller.Hardware} property tree."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getHardware",
        "scope": "static"
    },
    {
        "description": "Get the {@link Controller.Actions} property tree. Calling this function is the same as using the {@link Controller} \rproperty, <code>Controller.Actions</code>.",
        "kind": "function",
        "name": "getActions",
        "returns": [
            {
                "type": {
                    "names": [
                        "Controller.Actions"
                    ]
                },
                "description": "The {@link Controller.Actions} property tree."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getActions",
        "scope": "static"
    },
    {
        "description": "Get the {@link Controller.Standard} property tree. Calling this function is the same as using the {@link Controller} \rproperty, <code>Controller.Standard</code>.",
        "kind": "function",
        "name": "getStandard",
        "returns": [
            {
                "type": {
                    "names": [
                        "Controller.Standard"
                    ]
                },
                "description": "The {@link Controller.Standard} property tree."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getStandard",
        "scope": "static"
    },
    {
        "description": "Start making a recording of currently active controllers.",
        "kind": "function",
        "name": "startInputRecording",
        "examples": [
            "<caption>Make a controller recording.</caption>\r// Delay start of recording for 2s.\rScript.setTimeout(function () {\r    print(\"Start input recording\");\r    Controller.startInputRecording();\r}, 2000);\r\r// Make a 10s recording.\rScript.setTimeout(function () {\r    print(\"Stop input recording\");\r    Controller.stopInputRecording();\r    Controller.saveInputRecording();\r    print(\"Input recording saved in: \" + Controller.getInputRecorderSaveDirectory());\r}, 12000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.startInputRecording",
        "scope": "static"
    },
    {
        "description": "Stop making a recording started by {@link Controller.startInputRecording|startInputRecording}.",
        "kind": "function",
        "name": "stopInputRecording",
        "memberof": "Controller",
        "longname": "Controller.stopInputRecording",
        "scope": "static"
    },
    {
        "description": "Play back the current recording from the beginning. The current recording may have been recorded by \r{@link Controller.startInputRecording|startInputRecording} and \r{@link Controller.stopInputRecording|stopInputRecording}, or loaded by \r{@link Controller.loadInputRecording|loadInputRecording}. Playback repeats in a loop until \r{@link Controller.stopInputPlayback|stopInputPlayback} is called.",
        "kind": "function",
        "name": "startInputPlayback",
        "examples": [
            "<caption>Play back a controller recording.</caption>\rvar file = Window.browse(\"Select Recording\", Controller.getInputRecorderSaveDirectory());\rif (file !== null) {\r    print(\"Play recording: \" + file);\r    Controller.loadInputRecording(\"file:///\" + file);\r    Controller.startInputPlayback();\r\r    // Stop playback after 20s.\r    Script.setTimeout(function () {\r        print(\"Stop playing recording\");\r        Controller.stopInputPlayback();\r    }, 20000);\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.startInputPlayback",
        "scope": "static"
    },
    {
        "description": "Stop play back of a recording started by {@link Controller.startInputPlayback|startInputPlayback}.",
        "kind": "function",
        "name": "stopInputPlayback",
        "memberof": "Controller",
        "longname": "Controller.stopInputPlayback",
        "scope": "static"
    },
    {
        "description": "Save the current recording to a file. The current recording may have been recorded by\r{@link Controller.startInputRecording|startInputRecording} and\r{@link Controller.stopInputRecording|stopInputRecording}, or loaded by\r{@link Controller.loadInputRecording|loadInputRecording}. It is saved in the directory returned by \r{@link Controller.getInputRecorderSaveDirectory|getInputRecorderSaveDirectory}.",
        "kind": "function",
        "name": "saveInputRecording",
        "memberof": "Controller",
        "longname": "Controller.saveInputRecording",
        "scope": "static"
    },
    {
        "description": "Load an input recording, ready for play back.",
        "kind": "function",
        "name": "loadInputRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the recording file, prefixed by <code>\"file:///\"</code>.",
                "name": "file"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.loadInputRecording",
        "scope": "static"
    },
    {
        "description": "Get the directory in which input recordings are saved.",
        "kind": "function",
        "name": "getInputRecorderSaveDirectory",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The directory in which input recordings are saved."
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getInputRecorderSaveDirectory",
        "scope": "static"
    },
    {
        "description": "Get all the active and enabled (running) input devices",
        "kind": "function",
        "name": "getRunningInputDevices",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "An array of strings with the names"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.getRunningInputDevices",
        "scope": "static"
    },
    {
        "description": "Disable processing of mouse \"move\", \"press\", \"double-press\", and \"release\" events into \r{@link Controller.Hardware|Controller.Hardware.Keyboard} outputs.",
        "kind": "function",
        "name": "captureMouseEvents",
        "examples": [
            "<caption>Disable Controller.Hardware.Keyboard mouse events for a short period.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Hardware.Keyboard.MouseX).to(function (x) {\r    print(\"Mouse x = \" + x);\r});\rmapping.from(Controller.Hardware.Keyboard.MouseY).to(function (y) {\r    print(\"Mouse y = \" + y);\r});\rController.enableMapping(MAPPING_NAME);\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});\r\rScript.setTimeout(function () {\r    Controller.captureMouseEvents();\r}, 5000);\r\rScript.setTimeout(function () {\r    Controller.releaseMouseEvents();\r}, 10000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureMouseEvents",
        "scope": "static"
    },
    {
        "description": "Enable processing of mouse \"move\", \"press\", \"double-press\", and \"release\" events into \r{@link Controller.Hardware-Keyboard|Controller.Hardware.Keyboard} outputs that were disabled using \r{@link Controller.captureMouseEvents|captureMouseEvents}.",
        "kind": "function",
        "name": "releaseMouseEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseMouseEvents",
        "scope": "static"
    },
    {
        "description": "Disable processing of touch \"begin\", \"update\", and \"end\" events into \r{@link Controller.Hardware|Controller.Hardware.Keyboard}, \r{@link Controller.Hardware|Controller.Hardware.Touchscreen}, and \r{@link Controller.Hardware|Controller.Hardware.TouchscreenVirtualPad} outputs.",
        "kind": "function",
        "name": "captureTouchEvents",
        "memberof": "Controller",
        "longname": "Controller.captureTouchEvents",
        "scope": "static"
    },
    {
        "description": "Enable processing of touch \"begin\", \"update\", and \"end\" events into \r{@link Controller.Hardware|Controller.Hardware.Keyboard}, \r{@link Controller.Hardware|Controller.Hardware.Touchscreen}, and \r{@link Controller.Hardware|Controller.Hardware.TouchscreenVirtualPad} outputs that were disabled using \r{@link Controller.captureTouchEvents|captureTouchEvents}.",
        "kind": "function",
        "name": "releaseTouchEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseTouchEvents",
        "scope": "static"
    },
    {
        "description": "Disable processing of mouse wheel rotation events into {@link Controller.Hardware|Controller.Hardware.Keyboard} \routputs.",
        "kind": "function",
        "name": "captureWheelEvents",
        "memberof": "Controller",
        "longname": "Controller.captureWheelEvents",
        "scope": "static"
    },
    {
        "description": "Enable processing of mouse wheel rotation events into {@link Controller.Hardware|Controller.Hardware.Keyboard} \routputs that wer disabled using {@link Controller.captureWheelEvents|captureWheelEvents}.",
        "kind": "function",
        "name": "releaseWheelEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseWheelEvents",
        "scope": "static"
    },
    {
        "description": "Disable translating and rotating the user's avatar in response to keyboard and controller controls.",
        "kind": "function",
        "name": "captureActionEvents",
        "examples": [
            "<caption>Disable avatar translation and rotation for a short period.</caption>\rScript.setTimeout(function () {\r    Controller.captureActionEvents();\r}, 5000);\r\rScript.setTimeout(function () {\r    Controller.releaseActionEvents();\r}, 10000);"
        ],
        "memberof": "Controller",
        "longname": "Controller.captureActionEvents",
        "scope": "static"
    },
    {
        "description": "Enable translating and rotating the user's avatar in response to keyboard and controller controls that were disabled \rusing {@link Controller.captureActionEvents|captureActionEvents}.",
        "kind": "function",
        "name": "releaseActionEvents",
        "memberof": "Controller",
        "longname": "Controller.releaseActionEvents",
        "scope": "static"
    },
    {
        "description": "Triggered when an action occurs.",
        "kind": "function",
        "name": "actionEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The ID of the action, per {@link Controller.findAction|findAction}.",
                "name": "actionID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The value associated with the action.",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report action events as they occur.</caption>\rvar actionNamesForID = {};\rvar actionNames = Controller.getActionNames();\rfor (var i = 0, length = actionNames.length; i < length; i++) {\r    actionNamesForID[Controller.findAction(actionNames[i])] = actionNames[i];\r}\r\rfunction onActionEvent(action, value) {\r    print(\"onActionEvent() : \" + action + \" ( \" + actionNamesForID[action] + \" ) ; \" + value);\r}\r\rController.actionEvent.connect(onActionEvent);\r\rScript.scriptEnding.connect(function () {\r    Controller.actionEvent.disconnect(onActionEvent);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.actionEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when there is a new controller input event.",
        "kind": "function",
        "name": "inputEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The input action, per {@link Controller.Standard}.",
                "name": "action"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The value associated with the input action.",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report input events as they occur.</caption>\rvar inputNamesForID = {};\rfor (var property in Controller.Standard) {\r    inputNamesForID[Controller.Standard[property]] = \"Controller.Standard.\" + property;\r}\r\rfunction onInputEvent(input, value) {\r    print(\"onInputEvent() : \" + input + \" ( \" + inputNamesForID[input] + \" ) ; \" + value);\r}\r\rController.inputEvent.connect(onInputEvent);\r\rScript.scriptEnding.connect(function () {\r    Controller.inputEvent.disconnect(onInputEvent);\r});"
        ],
        "memberof": "Controller",
        "longname": "Controller.inputEvent",
        "scope": "static"
    },
    {
        "description": "Triggered when a device is registered or unregistered by a plugin. Not all plugins generate \r<code>hardwareChanged</code> events: for example connecting or disconnecting a mouse will not generate an event but \rconnecting or disconnecting an Xbox controller will.",
        "kind": "function",
        "name": "hardwareChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.hardwareChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when a device is enabled/disabled\rEnabling/Disabling Leapmotion on settings/controls will trigger this signal.",
        "kind": "function",
        "name": "deviceRunningChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the device that is getting enabled/disabled",
                "name": "deviceName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Return if the device is enabled.",
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.deviceRunningChanged",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Standard</code> object has properties representing standard controller outputs. Those for physical \rcontrollers are based on the XBox controller, with aliases for PlayStation. The property values are integer IDs, uniquely \ridentifying each output. <em>Read-only.</em> These can be mapped to actions or functions in a {@link RouteObject} \rmapping.</p>\r\r<p>The data value provided by each control is either a number or a {@link Pose}. Numbers are typically normalized to\r<code>0.0</code> or <code>1.0</code> for button states, the range <code>0.0 &ndash; 1.0</code> for unidirectional scales,\rand the range <code>-1.0 &ndash; 1.0</code> for bidirectional scales.</p>\r\r<p>Each hardware device has a mapping from its outputs to <code>Controller.Standard</code> items, specified in a JSON file.\rFor example, <a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/leapmotion.json\">\rleapmotion.json</a> and\r<a href=\"https://github.com/highfidelity/hifi/blob/master/interface/resources/controllers/vive.json\">vive.json</a>.</p>\r\r<table>\r  <thead>\r      <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r\r    <tr><td colspan=\"4\"><strong>Buttons</strong></td></tr>\r    <tr><td><code>A</code></td><td>number</td><td>number</td><td>\"A\" button pressed.</td></tr>\r    <tr><td><code>B</code></td><td>number</td><td>number</td><td>\"B\" button pressed.</td></tr>\r    <tr><td><code>X</code></td><td>number</td><td>number</td><td>\"X\" button pressed.</td></tr>\r    <tr><td><code>Y</code></td><td>number</td><td>number</td><td>\"Y\" button pressed.</td></tr>\r    <tr><td><code>DL</code></td><td>number</td><td>number</td><td>D-pad left pressed.</td></tr>\r    <tr><td><code>DR</code></td><td>number</td><td>number</td><td>D-pad right pressed.</td></tr>\r    <tr><td><code>DU</code></td><td>number</td><td>number</td><td>D-pad up pressed.</td></tr>\r    <tr><td><code>DD</code></td><td>number</td><td>number</td><td>D-pad down pressed.</td></tr>\r    <tr><td><code>Start</code></td><td>number</td><td>number</td><td>\"Start\" center button pressed.</td></tr>\r    <tr><td><code>Back</code></td><td>number</td><td>number</td><td>\"Back\" center button pressed.</td></tr>\r    <tr><td><code>LB</code></td><td>number</td><td>number</td><td>Left bumper button pressed.</td></tr>\r    <tr><td><code>RB</code></td><td>number</td><td>number</td><td>Right bumper button pressed.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Sticks</strong></td></tr>\r    <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left stick x-axis scale.</td></tr>\r    <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left stick y-axis scale.</td></tr>\r    <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>\r    <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>\r    <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left stick button pressed.</td></tr>\r    <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right stick button pressed.</td></tr>\r    <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left stick is touched.</td></tr>\r    <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right stick is touched.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Triggers</strong></td></tr>\r    <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>\r    <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>\r    <tr><td><code>LTClick</code></td><td>number</td><td>number</td><td>Left trigger click.</td></tr>\r    <tr><td><code>RTClick</code></td><td>number</td><td>number</td><td>Right trigger click.</td></tr>\r    <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>\r    <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>\r    <tr><td><code>LeftGripTouch</code></td><td>number</td><td>number</td><td>Left grip is touched.</td></tr>\r    <tr><td><code>RightGripTouch</code></td><td>number</td><td>number</td><td>Right grip is touched.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Aliases, PlayStation Style Names</strong></td></tr>\r    <tr><td><code>Cross</code></td><td>number</td><td>number</td><td>Alias for <code>A</code>.</td></tr>\r    <tr><td><code>Circle</code></td><td>number</td><td>number</td><td>Alias for <code>B</code>.</td></tr>\r    <tr><td><code>Square</code></td><td>number</td><td>number</td><td>Alias for <code>X</code>.</td></tr>\r    <tr><td><code>Triangle</code></td><td>number</td><td>number</td><td>Alias for <code>Y</code>.</td></tr>\r    <tr><td><code>Left</code></td><td>number</td><td>number</td><td>Alias for <code>DL</code>.</td></tr>\r    <tr><td><code>Right</code></td><td>number</td><td>number</td><td>Alias for <code>DR</code>.</td></tr>\r    <tr><td><code>Up</code></td><td>number</td><td>number</td><td>Alias for <code>DU</code>.</td></tr>\r    <tr><td><code>Down</code></td><td>number</td><td>number</td><td>Alias for <code>DD</code>.</td></tr>\r    <tr><td><code>Select</code></td><td>number</td><td>number</td><td>Alias for <code>Back</code>.</td></tr>\r    <tr><td><code>L1</code></td><td>number</td><td>number</td><td>Alias for <code>LB</code>.</td></tr>\r    <tr><td><code>R1</code></td><td>number</td><td>number</td><td>Alias for <code>RB</code>.</td></tr>\r    <tr><td><code>L3</code></td><td>number</td><td>number</td><td>Alias for <code>LS</code>.</td></tr>\r    <tr><td><code>R3</code></td><td>number</td><td>number</td><td>Alias for <code>RS</code>.</td></tr>\r    <tr><td><code>L2</code></td><td>number</td><td>number</td><td>Alias for <code>LT</code>.</td></tr>\r    <tr><td><code>R2</code></td><td>number</td><td>number</td><td>Alias for <code>RT</code>.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Finger Abstractions</strong></td></tr>\r    <tr><td><code>LeftPrimaryThumb</code></td><td>number</td><td>number</td><td>Left primary thumb button pressed.</td></tr>\r    <tr><td><code>LeftSecondaryThumb</code></td><td>number</td><td>number</td><td>Left secondary thumb button pressed.\r      </td></tr>\r    <tr><td><code>RightPrimaryThumb</code></td><td>number</td><td>number</td><td>Right primary thumb button pressed.\r      </td></tr>\r    <tr><td><code>RightSecondaryThumb</code></td><td>number</td><td>number</td><td>Right secondary thumb button pressed.\r      </td></tr>\r    <tr><td><code>LeftPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>LeftSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>LeftThumbUp</code></td><td>number</td><td>number</td><td>Left thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>RightPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>RightSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>RightThumbUp</code></td><td>number</td><td>number</td><td>Right thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>LeftPrimaryIndex</code></td><td>number</td><td>number</td><td>Left primary index control pressed. \r      <strong>To Do:</strong> <em>Implement this for current controllers.</em></td></tr>\r    <tr><td><code>LeftSecondaryIndex</code></td><td>number</td><td>number</td><td>Left secondary index control pressed.\r      </td></tr>\r    <tr><td><code>RightPrimaryIndex</code></td><td>number</td><td>number</td><td>Right primary index control pressed. \r      <strong>To Do:</strong> <em>Implement this for current controllers.</em></td></tr>\r    <tr><td><code>RightSecondaryIndex</code></td><td>number</td><td>number</td><td>Right secondary index control pressed.\r      </td></tr>\r    <tr><td><code>LeftPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>LeftSecondaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching \r      secondary index finger control.</td></tr>\r    <tr><td><code>LeftIndexPoint</code></td><td>number</td><td>number</td><td>Left index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r    <tr><td><code>RightPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>RightSecondaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching \r      secondary index finger control.</td></tr>\r    <tr><td><code>RightIndexPoint</code></td><td>number</td><td>number</td><td>Right index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Hips pose.</td></tr>\r    <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Spine2 pose.</td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>\r    <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Left arm pose.</td></tr>\r    <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Right arm pose</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>\r    <tr><td><code>LeftHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Left thumb 4 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Left index 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Left index 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Left index 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Left index 4 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Left middle 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Left ring 4 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 1 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 2 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 3 finger joint pose.</td></tr>\r    <tr><td><code>LeftHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Left pinky 4 finger joint pose.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Right hand pose.</td></tr>\r    <tr><td><code>RightHandThumb1</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandThumb2</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandThumb3</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandThumb4</code></td><td>number</td><td>{@link Pose}</td><td>Right thumb 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex1</code></td><td>number</td><td>{@link Pose}</td><td>Right index 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex2</code></td><td>number</td><td>{@link Pose}</td><td>Right index 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex3</code></td><td>number</td><td>{@link Pose}</td><td>Right index 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandIndex4</code></td><td>number</td><td>{@link Pose}</td><td>Right index 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle1</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle2</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle3</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandMiddle4</code></td><td>number</td><td>{@link Pose}</td><td>Right middle 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandRing1</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 1 finger joint pose.</td></tr>\r    <tr><td><code>RightHandRing2</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 2 finger joint pose.</td></tr>\r    <tr><td><code>RightHandRing3</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 3 finger joint pose.</td></tr>\r    <tr><td><code>RightHandRing4</code></td><td>number</td><td>{@link Pose}</td><td>Right ring 4 finger joint pose.</td></tr>\r    <tr><td><code>RightHandPinky1</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 1 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandPinky2</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 2 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandPinky3</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 3 finger joint pose.\r      </td></tr>\r    <tr><td><code>RightHandPinky4</code></td><td>number</td><td>{@link Pose}</td><td>Right pinky 4 finger joint pose.\r      </td></tr>\r    <tr><td><code>LeftFoot</code></td><td>number</td><td>{@link Pose}</td><td>Left foot pose.</td></tr>\r    <tr><td><code>RightFoot</code></td><td>number</td><td>{@link Pose}</td><td>Right foot pose.</td></tr>\r\r    <tr><td colspan=\"4\"><strong>Trackers</strong></td></tr>\r    <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 0 pose.</td></tr>\r    <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 1 pose.</td></tr>\r    <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 2 pose.</td></tr>\r    <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 3 pose.</td></tr>\r    <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 4 pose.</td></tr>\r    <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 5 pose.</td></tr>\r    <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 6 pose.</td></tr>\r    <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 7 pose.</td></tr>\r    <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 8 pose.</td></tr>\r    <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 9 pose.</td></tr>\r    <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 10 pose.</td></tr>\r    <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 11 pose.</td></tr>\r    <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 12 pose.</td></tr>\r    <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 13 pose.</td></tr>\r    <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 14 pose.</td></tr>\r    <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 15 pose.</td></tr>\r\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Standard",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Standard",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br><p>A {@link Controller} mapping object that can contain a set of routes that map:</p>\r<ul>\r    <li>{@link Controller.Standard} outputs to {@link Controller.Actions} actions or script functions.</li>\r    <li>{@link Controller.Hardware} outputs to {@link Controller.Standard} outputs, {@link Controller.Actions} actions, or \r    script functions.</li>\r</ul>\r\r<p>Create by one of the following methods:</p>\r<ul>\r    <li>Use {@link Controller.newMapping} to create the mapping object, add routes using {@link MappingObject#from|from} or\r    {@link MappingObject#makeAxis|makeAxis}, and map the routes to actions or functions using {@link RouteObject} \r    methods.</li>\r    <li>Use {@link Controller.parseMapping} or {@link Controller.loadMapping} to load a {@link Controller.MappingJSON}.</li>\r</ul>\r\r<p>Enable the mapping using {@link MappingObject#enable|enable} or {@link Controller.enableMapping} for it to take \reffect.</p>\r\r<p>Mappings and their routes are applied according to the following rules:</p>\r<ul>\r    <li>One read per output: after a controller output has been read, it can't be read again. Exception: You can use \r    {@link RouteObject#peek} to read a value without marking that output as having been read.</li>\r    <li>Existing mapping routes take precedence over new mapping routes: within a mapping, if a route is added for a control \r    output that already has a route the new route is ignored.</li>\r    <li>New mappings override previous mappings: each output is processed using the route in the most recently enabled \r    mapping that contains that output.</li>\r</ul>",
        "kind": "class",
        "name": "MappingObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "MappingObject",
        "scope": "global"
    },
    {
        "description": "A {@link MappingObject} can be specified in JSON format. A simple example is provided below. Full examples &mdash; the \rdefault mappings provided in Interface &mdash;  can be found at \r<a href=\"https://github.com/highfidelity/hifi/tree/master/interface/resources/controllers\">\rhttps://github.com/highfidelity/hifi/tree/master/interface/resources/controllers</a>.",
        "kind": "typedef",
        "name": "MappingJSON",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the mapping.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Array.<Controller.MappingJSONRoute>"
                    ]
                },
                "description": "An array of routes.",
                "name": "channels"
            }
        ],
        "examples": [
            "<caption>A simple mapping JSON that makes the right trigger move your avatar up after a dead zone.</caption>\r{\r    \"name\": \"com.highfidelity.controllers.example.jsonMapping\",\r    \"channels\": [\r        { \r            \"from\": \"Standard.RT\", \r            \"filters\": { \"type\": \"deadZone\", \"min\": 0.05 },\r            \"to\": \"Actions.TranslateY\"\r        }\r    ]\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSON",
        "scope": "static"
    },
    {
        "description": "A route in a {@link Controller.MappingJSON}.",
        "kind": "typedef",
        "name": "MappingJSONRoute",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "Controller.MappingJSONAxis"
                    ]
                },
                "description": "The name of a {@link Controller.Hardware} property name or an axis \r    made from them. If a property name, the leading <code>\"Controller.Hardware.\"</code> can be omitted.",
                "name": "from"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <codd>true</code> then peeking is enabled per {@link RouteObject#peek}.",
                "name": "peek"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then debug is enabled per {@link RouteObject#debug}.",
                "name": "debug"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "One or more numeric {@link Controller.Hardware} property names which are evaluated \r    as booleans and ANDed together. Prepend with a <code>!</code> to use the logical NOT of the property value. The leading \r    <code>\"Controller.Hardware.\"</code> can be omitted from the property names.",
                "name": "when"
            },
            {
                "type": {
                    "names": [
                        "Controller.MappingJSONFilter",
                        "Array.<Controller.MappingJSONFilter>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "One or more filters in the route.",
                "name": "filters"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of a {@link Controller.Actions} or {@link Controller.Standard} property. The leading \r    <code>\"Controller.\"</code> can be omitted.",
                "name": "to"
            }
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSONRoute",
        "scope": "static"
    },
    {
        "description": "An axis pair in a {@link Controller.MappingJSONRoute}.",
        "kind": "typedef",
        "name": "MappingJSONAxis",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Array.<string>>"
                    ]
                },
                "description": "A two-member array of single-member arrays of {@link Controller.Hardware} property names. \rThe leading <code>\"Controller.Hardware.\"</code> can be omitted from the property names.",
                "name": "makeAxis"
            }
        ],
        "examples": [
            "<caption>An axis using the keyboard's left and right keys.</caption>\r{ \"makeAxis\" : [\r        [\"Keyboard.Left\"],\r        [\"Keyboard.Right\"]\r    ]\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSONAxis",
        "scope": "static"
    },
    {
        "description": "A filter in a {@link Controller.MappingJSONRoute}.",
        "kind": "typedef",
        "name": "MappingJSONFilter",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the filter, being the name of the one of the {@link RouteObject}'s filter methods.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If the filter method has a first parameter, the property name is the name of that parameter and the \r    property value is the value to use.",
                "name": "?"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "If the filter method has a second parameter, the property name  is the name of that parameter and \r    the property value is the value to use.",
                "name": "?"
            }
        ],
        "examples": [
            "<caption>A hysteresis filter.</caption>\r{ \r    \"type\": \"hysteresis\", \r    \"min\": 0.85, \r    \"max\": 0.9\r}"
        ],
        "memberof": "Controller",
        "longname": "Controller.MappingJSONFilter",
        "scope": "static"
    },
    {
        "description": "Create a new {@link RouteObject} from a controller output, ready to be mapped to a standard control, action, or \rfunction.<br />\rThis is a QML-specific version of {@link MappingObject#from|from}: use this version in QML files.",
        "kind": "function",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Hardware",
                        "function"
                    ]
                },
                "description": "The controller output or function that is the source\r    of the route data. If a function, it must return a number or a {@link Pose} value as the route data.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#fromQml",
        "scope": "instance"
    },
    {
        "description": "Create a new {@link RouteObject} from two numeric {@link Controller.Hardware} outputs, one applied in the negative \rdirection and the other in the positive direction, ready to be mapped to a standard control, action, or function.<br />\rThis is a QML-specific version of {@link MappingObject#makeAxis|makeAxis}: use this version in QML files.",
        "kind": "function",
        "name": "makeAxisQml",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The first, negative-direction controller output.",
                "name": "source1"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The second, positive-direction controller output.",
                "name": "source2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods. The data \r    value passed to the route is the combined value of <code>source2 - source1</code>."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#makeAxisQml",
        "scope": "instance"
    },
    {
        "description": "Create a new {@link RouteObject} from a controller output, ready to be mapped to a standard control, action, or \rfunction.",
        "kind": "function",
        "name": "from",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Hardware",
                        "function"
                    ]
                },
                "description": "The controller output or function that is the source \r    of the route data. If a function, it must return a number or a {@link Pose} value as the route data.",
                "name": "source"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#from",
        "scope": "instance"
    },
    {
        "description": "Create a new {@link RouteObject} from two numeric {@link Controller.Hardware} outputs, one applied in the negative \rdirection and the other in the positive direction, ready to be mapped to a standard control, action, or function.",
        "kind": "function",
        "name": "makeAxis",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The first, negative-direction controller output.",
                "name": "source1"
            },
            {
                "type": {
                    "names": [
                        "Controller.Hardware"
                    ]
                },
                "description": "The second, positive-direction controller output.",
                "name": "source2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "A route ready for mapping to an action or function using {@link RouteObject} methods. The data\r    value passed to the route is the combined value of <code>source2 - source1</code>."
            }
        ],
        "examples": [
            "<caption>Make the Oculus Touch triggers move your avatar up and down.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping\r    .makeAxis(Controller.Hardware.OculusTouch.LT, Controller.Hardware.OculusTouch.RT)\r    .to(Controller.Actions.Up);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#makeAxis",
        "scope": "instance"
    },
    {
        "description": "Enable or disable the mapping. When enabled, the routes in the mapping take effect.<br />\rSynonymous with {@link Controller.enableMapping}.",
        "kind": "function",
        "name": "enable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then the mapping is enabled, otherwise it is disabled.",
                "name": "enable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "The mapping object, so that further routes can be added."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#enable",
        "scope": "instance"
    },
    {
        "description": "Disable the mapping. When disabled, the routes in the mapping have no effect.<br />\rSynonymous with {@link Controller.disableMapping}.",
        "kind": "function",
        "name": "disable",
        "returns": [
            {
                "type": {
                    "names": [
                        "MappingObject"
                    ]
                },
                "description": "The mapping object, so that further routes can be added."
            }
        ],
        "memberof": "MappingObject",
        "longname": "MappingObject#disable",
        "scope": "instance"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br><p>A route in a {@link MappingObject} used by the {@link Controller} API.</p>\r\r<p>Create a route using {@link MappingObject} methods and apply this object's methods to process it, terminating with \r{@link RouteObject#to} to apply it to a <code>Standard</code> control, action, or script function. Note: Loops are not \rpermitted.</p>\r\r<p>Some methods apply to routes with number data, some apply routes with {@link Pose} data, and some apply to both route \rtypes.<p>",
        "kind": "class",
        "name": "RouteObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "RouteObject",
        "scope": "global"
    },
    {
        "description": "Terminate the route with a standard control, an action, or a script function. The output value from the route is \rsent to the specified destination.<br />\rThis is a QML-specific version of {@link MappingObject#to|to}: use this version in QML files.",
        "kind": "function",
        "name": "toQml",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Actions",
                        "function"
                    ]
                },
                "description": "The standard control, action, or JavaScript\rfunction that the route output is mapped to. For a function, the parameter can be either the name of the function or\ran in-line function definition.",
                "name": "destination"
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#toQml",
        "scope": "instance"
    },
    {
        "description": "Process the route only if a condition is satisfied. The condition is evaluated before the route input is read, and\rthe input is read only if the condition is <code>true</code>. Thus, if the condition is not met then subsequent\rroutes using the same input are processed.<br />\rThis is a QML-specific version of {@link MappingObject#to|to}: use this version in QML files.",
        "kind": "function",
        "name": "whenQml",
        "params": [
            {
                "type": {
                    "names": [
                        "condition",
                        "Array.<condition>"
                    ]
                },
                "description": "<p>A <code>condition</code> may be a:</p>\r    <ul>\r        <li>A boolean or numeric {@link Controller.Hardware} property, which is evaluated as a boolean.</li>\r        <li><code>!</code> followed by a {@link Controller.Hardware} property, indicating the logical NOT should be\r        used.</li>\r        <li>A script function returning a boolean value. This can be either the name of the function or an in-line\r        definition.</li>\r    </ul>\r<p>If an array of conditions is provided, their values are ANDed together.</p>",
                "name": "expression"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the condition added."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#whenQml",
        "scope": "instance"
    },
    {
        "description": "Terminate the route with a standard control, an action, or a script function. The output value from the route is \rsent to the specified destination.",
        "kind": "function",
        "name": "to",
        "params": [
            {
                "type": {
                    "names": [
                        "Controller.Standard",
                        "Controller.Actions",
                        "function"
                    ]
                },
                "description": "The standard control, action, or JavaScript \rfunction that the route output is mapped to. For a function, the parameter can be either the name of the function or \ran in-line function definition.",
                "name": "destination"
            }
        ],
        "examples": [
            "<caption>Make the right trigger move your avatar up.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).to(Controller.Actions.TranslateY);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});",
            "<caption>Make the right trigger call a function.</caption>\rfunction onRightTrigger(value) {\r    print(\"Trigger value: \" + value);\r}\r\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).to(onRightTrigger);\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#to",
        "scope": "instance"
    },
    {
        "description": "Enable and disabling writing debug information for a route to the program log.",
        "kind": "function",
        "name": "debug",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then writing debug information is enabled for the route, \r    otherwise it is disabled.",
                "name": "enable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with debug output enabled or disabled."
            }
        ],
        "examples": [
            "<caption>Write debug information to the program log for a right trigger mapping.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RT).debug().to(function (value) {\r    print(\"Value: \" + value);\r});\r\r// Information similar to the following is written each frame:\r[DEBUG] [hifi.controllers] Beginning mapping frame\r[DEBUG] [hifi.controllers] Processing device routes\r[DEBUG] [hifi.controllers] Processing standard routes\r[DEBUG] [hifi.controllers] Applying route  \"\"\r[DEBUG] [hifi.controllers] Value was  5.96046e-07\r[DEBUG] [hifi.controllers] Filtered value was  5.96046e-07\r\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#debug",
        "scope": "instance"
    },
    {
        "description": "Process the route without marking the controller output as having been read, so that other routes from the same \rcontroller output can also process.",
        "kind": "function",
        "name": "peek",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "description": "If <code>true</code> then the route is processed without marking the route's \r    controller source as having been read.",
                "name": "enable"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the peek feature enabled."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#peek",
        "scope": "instance"
    },
    {
        "description": "Process the route only if a condition is satisfied. The condition is evaluated before the route input is read, and \rthe input is read only if the condition is <code>true</code>. Thus, if the condition is not met then subsequent \rroutes using the same input are processed.",
        "kind": "function",
        "name": "when",
        "params": [
            {
                "type": {
                    "names": [
                        "condition",
                        "Array.<condition>"
                    ]
                },
                "description": "<p>A <code>condition</code> may be a:</p>\r    <ul>\r        <li>A numeric {@link Controller.Hardware} property, which is evaluated as a boolean.</li>\r        <li><code>!</code> followed by a {@link Controller.Hardware} property to use the logical NOT of the property \r        value.</li>\r        <li>A script function returning a boolean value. This can be either the name of the function or an in-line \r        definition.</li>\r    </ul>\r<p>If an array of conditions is provided, their values are ANDed together.</p>",
                "name": "expression"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the condition added."
            }
        ],
        "examples": [
            "<caption>Process the right trigger differently in HMD and desktop modes.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\r// Processed only if in HMD mode.\rmapping.from(Controller.Standard.RT)\r    .when(Controller.Hardware.Application.InHMD)\r    .to(function () { print(\"Trigger pressed in HMD mode.\"); });\r\r// Processed only if previous route not processed.\rmapping.from(Controller.Standard.RT)\r    .to(function () { print(\"Trigger pressed in desktop mode.\"); });\r\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#when",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values to lie between two values; values outside this range are not passed on through the \rroute.",
        "kind": "function",
        "name": "clamp",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The minimum value to pass through.",
                "name": "min"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum value to pass through.",
                "name": "max"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The route object with the clamp filter added."
            }
        ],
        "examples": [
            "<caption>Clamp right trigger values to between 0.3 and 0.7.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RT).clamp(0.3, 0.7).to(function (value) {\r    print(\"Value: \" + value);\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#clamp",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values such that they are rounded to <code>0</code> or <code>1</code> without output values \rflickering when the input value hovers around <code>0.5</code>. For example, this enables you to use an analog input \ras if it were a toggle.",
        "kind": "function",
        "name": "hysteresis",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When the input value drops below this value the output value changes to <code>0</code>.",
                "name": "min"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When the input value rises above this value the output value changes to <code>1</code>.",
                "name": "max"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Round the right joystick forward/back values to 0 or 1 with hysteresis.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).peek().to(function (value) {\r    print(\"Raw value: \" + value);  // 0.0 - 1.0.\r});\rmapping.from(Controller.Standard.RY).hysteresis(0.3, 0.7).to(function (value) {\r    print(\"Hysteresis value: \" + value);  // 0 or 1.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#hysteresis",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values to send at a specified interval.",
        "kind": "function",
        "name": "pulse",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The interval between sending values, in seconds.",
                "name": "interval"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Send right trigger values every half second.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RT).pulse(0.5).to(function (value) {\r    print(\"Value: \" + value);\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#pulse",
        "scope": "instance"
    },
    {
        "description": "Filter numeric and {@link Pose} route values to be scaled by a constant amount.",
        "kind": "function",
        "name": "scale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale to multiply the value by.",
                "name": "multiplier"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Scale the value of the right joystick forward/back values by 10.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.LY).to(function (value) {\r    print(\"L value: \" + value);  // -1.0 to 1.0 values.\r});\rmapping.from(Controller.Standard.RY).scale(10.0).to(function (value) {\r    print(\"R value: \" + value);  // -10.0 to -10.0 values.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#scale",
        "scope": "instance"
    },
    {
        "description": "Filter numeric and {@link Pose} route values to have the opposite sign, e.g., <code>0.5</code> is changed to \r<code>-0.5</code>.",
        "kind": "function",
        "name": "invert",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Invert the value of the right joystick forward/back values.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.LY).to(function (value) {\r    print(\"L value: \" + value);  // -1.0 to 1.0 values, forward to back.\r});\rmapping.from(Controller.Standard.RY).invert().to(function (value) {\r    print(\"R value: \" + value);  // 1.0 to -1.0 values, forward to back.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#invert",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values such that they're sent only when the input value is outside a dead-zone. When the input \rpasses the dead-zone value, output is sent starting at <code>0.0</code> and catching up with the input value. As the \rinput returns toward the dead-zone value, output values reduce to <code>0.0</code> at the dead-zone value.",
        "kind": "function",
        "name": "deadZone",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The minimum input value at which to start sending output. For negative input values, the \r   negative of this value is used.",
                "name": "min"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Apply a dead-zone to the right joystick forward/back values.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).deadZone(0.2).to(function (value) {\r    print(\"Value: \" + value);  // 0.0 - 1.0 values once outside the dead-zone.\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#deadZone",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values such that they are rounded to <code>-1</code>, <code>0</code>, or <code>1</code>.\rFor example, this enables you to use an analog input as if it were a toggle or, in the case of a bidirectional axis, \ra tri-state switch.",
        "kind": "function",
        "name": "constrainToInteger",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Round the right joystick forward/back values to <code>-1</code>, <code>0</code>, or \r    <code>1</code>.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).constrainToInteger().to(function (value) {\r    print(\"Value: \" + value);  // -1, 0, or 1\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#constrainToInteger",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values such that they are rounded to <code>0</code> or <code>1</code>. For example, this \renables you to use an analog input as if it were a toggle.",
        "kind": "function",
        "name": "constrainToPositiveInteger",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Round the right joystick forward/back values to <code>0</code> or <code>1</code>.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\rmapping.from(Controller.Standard.RY).constrainToPositiveInteger().to(function (value) {\r    print(\"Value: \" + value);  // 0, or 1\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});"
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#constrainToPositiveInteger",
        "scope": "instance"
    },
    {
        "description": "Filter {@link Pose} route values to have a pre-translation applied.",
        "kind": "function",
        "name": "translate",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The pre-translation to add to the pose.",
                "name": "translate"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the pre-translation applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#translate",
        "scope": "instance"
    },
    {
        "description": "Filter {@link Pose} route values to have a pre-transform applied.",
        "kind": "function",
        "name": "transform",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The pre-transform to apply.",
                "name": "transform"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the pre-transform applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#transform",
        "scope": "instance"
    },
    {
        "description": "Filter {@link Pose} route values to have a post-transform applied.",
        "kind": "function",
        "name": "postTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The post-transform to apply.",
                "name": "transform"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the post-transform applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#postTransform",
        "scope": "instance"
    },
    {
        "description": "Filter {@link Pose} route values to have a pre-rotation applied.",
        "kind": "function",
        "name": "rotate",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The pre-rotation to add to the pose.",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the pre-rotation applied."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#rotate",
        "scope": "instance"
    },
    {
        "description": "Filter {@link Pose} route values to be smoothed by a low velocity filter. The filter's rotation and translation \rvalues are calculated as: <code>(1 - f) * currentValue + f * previousValue</code> where \r<code>f = currentVelocity / filterConstant</code>. At low velocities, the filter value is largely the previous \rvalue; at high velocities the value is wholly the current controller value.",
        "kind": "function",
        "name": "lowVelocity",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotational velocity, in rad/s, at which the filter value is wholly the latest \r    controller value.",
                "name": "rotationConstant"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The linear velocity, in m/s, at which the filter value is wholly the latest \r    controller value.",
                "name": "translationConstant"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> smoothed by low velocity filtering."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#lowVelocity",
        "scope": "instance"
    },
    {
        "description": "Filter {@link Pose} route values to be smoothed by an exponential decay filter. The filter's rotation and \rtranslation values are calculated as: <code>filterConstant * currentValue + (1 - filterConstant) * \rpreviousValue</code>. Values near 1 are less smooth with lower latency; values near 0 are more smooth with higher \rlatency.",
        "kind": "function",
        "name": "exponentialSmoothing",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotation filter constant, <code>0.0&ndash;1.0</code>.",
                "name": "rotationConstant"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Translation filter constant, <code>0.0&ndash;1.0</code>.",
                "name": "translationConstant"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> smoothed by an exponential filter."
            }
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#exponentialSmoothing",
        "scope": "instance"
    },
    {
        "description": "Filter numeric route values such that a value of <code>0.0</code> is changed to <code>1.0</code>, and other values \rare changed to <code>0.0</code>.",
        "kind": "function",
        "name": "logicalNot",
        "returns": [
            {
                "type": {
                    "names": [
                        "RouteObject"
                    ]
                },
                "description": "The <code>RouteObject</code> with the filter applied."
            }
        ],
        "examples": [
            "<caption>Logical NOT of LSTouch value.</caption>\rvar MAPPING_NAME = \"com.highfidelity.controllers.example.newMapping\";\rvar mapping = Controller.newMapping(MAPPING_NAME);\r\rmapping.from(Controller.Standard.RSTouch).peek().to(function (value) {\r    print(\"RSTouch: \" + value);\r});\rmapping.from(Controller.Standard.RSTouch).logicalNot().to(function (value) {\r    print(\"localNot of RSTouch: \" + value);\r});\rController.enableMapping(MAPPING_NAME);\r\rScript.scriptEnding.connect(function () {\r    Controller.disableMapping(MAPPING_NAME);\r});\r\n         "
        ],
        "memberof": "RouteObject",
        "longname": "RouteObject#logicalNot",
        "scope": "instance"
    },
    {
        "description": "Triggered when the <code>HMD.ipdScale</code> property value changes.",
        "kind": "function",
        "name": "IPDScaleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "HMD",
        "longname": "HMD.IPDScaleChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when Interface's display mode changes and when the user puts on or takes off their HMD.",
        "kind": "function",
        "name": "displayModeChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the display mode is HMD, otherwise <code>false</code>. This is the \r    same value as provided by <code>HMD.active</code>.",
                "name": "isHMDMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when the display mode changes.</caption>\rHMD.displayModeChanged.connect(function (isHMDMode) {\r    print(\"Display mode changed\");\r    print(\"isHMD = \" + isHMDMode);\r    print(\"HMD.active = \" + HMD.active);\r    print(\"HMD.mounted = \" + HMD.mounted);\r});"
        ],
        "memberof": "HMD",
        "longname": "HMD.displayModeChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when the <code>HMD.mounted</code> property value changes.",
        "kind": "function",
        "name": "mountedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when there's a change in the HMD being worn.</caption>\rHMD.mountedChanged.connect(function () {\r    print(\"Mounted changed. HMD is mounted: \" + HMD.mounted);\r});\r\n     "
        ],
        "memberof": "HMD",
        "longname": "HMD.mountedChanged",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Reticle",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "allowMouseCapture"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "depth"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "maximumPosition"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "mouseCaptured"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "pointingAtSystemOverlay"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "longname": "Reticle",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "isMouseCaptured",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.isMouseCaptured",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAllowMouseCapture",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getAllowMouseCapture",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAllowMouseCapture",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "allowMouseCaptured"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setAllowMouseCapture",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isPointingAtSystemOverlay",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.isPointingAtSystemOverlay",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDepth",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getDepth",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setDepth",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "depth"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setDepth",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setScale",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scale"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getMaximumPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "Reticle",
        "longname": "Reticle.getMaximumPosition",
        "scope": "static"
    },
    {
        "description": "Ambient light is defined by the following properties.",
        "kind": "typedef",
        "name": "AmbientLight",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The intensity of the light.",
                "name": "ambientIntensity"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A cube map image that defines the color of the light coming from each direction. If \r    <code>\"\"</code> then the entity's {@link Entities.Skybox|Skybox} <code>url</code> property value is used, unless that also is <code>\"\"</code> in which \r    case the entity's <code>ambientLightMode</code> property is set to <code>\"inherit\"</code>.",
                "name": "ambientURL"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.AmbientLight",
        "scope": "static"
    },
    {
        "description": "The AnimationProperties are used to configure an animation.",
        "kind": "typedef",
        "name": "AnimationProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the FBX file that has the animation.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 30,
                "description": "The speed in frames/s that the animation is played at.",
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The first frame to play in the animation.",
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 100000,
                "description": "The last frame to play in the animation.",
                "name": "lastFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current frame being played in the animation.",
                "name": "currentFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then the animation should play.",
                "name": "running"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then the animation should be continuously repeated in a loop.",
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then the rotations and translations of the last frame played should be\r    maintained when the animation stops playing.",
                "name": "hold"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.AnimationProperties",
        "scope": "static"
    },
    {
        "description": "Bloom is defined by the following properties.",
        "kind": "typedef",
        "name": "Bloom",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.25,
                "description": "The intensity of the bloom effect.",
                "name": "bloomIntensity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.7,
                "description": "The threshold for the bloom effect.",
                "name": "bloomThreshold"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.9,
                "description": "The size of the bloom effect.",
                "name": "bloomSize"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Bloom",
        "scope": "static"
    },
    {
        "description": "<p>An entity action may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Type</th><th>Description</th><th>Arguments</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"far-grab\"</code></td><td>Avatar action</td>\r      <td>Moves and rotates an entity to a target position and orientation, optionally relative to another entity. Collisions \r      between the entity and the user's avatar are disabled during the far-grab.</td>\r      <td>{@link Entities.ActionArguments-FarGrab}</td></tr>\r    <tr><td><code>\"hold\"</code></td><td>Avatar action</td>\r      <td>Positions and rotates an entity relative to an avatar's hand. Collisions between the entity and the user's avatar \r      are disabled during the hold.</td>\r      <td>{@link Entities.ActionArguments-Hold}</td></tr>\r    <tr><td><code>\"offset\"</code></td><td>Object action</td>\r      <td>Moves an entity so that it is a set distance away from a target point.</td>\r      <td>{@link Entities.ActionArguments-Offset}</td></tr>\r    <tr><td><code>\"tractor\"</code></td><td>Object action</td>\r      <td>Moves and rotates an entity to a target position and orientation, optionally relative to another entity.</td>\r      <td>{@link Entities.ActionArguments-Tractor}</td></tr>\r    <tr><td><code>\"travel-oriented\"</code></td><td>Object action</td>\r      <td>Orients an entity to align with its direction of travel.</td>\r      <td>{@link Entities.ActionArguments-TravelOriented}</td></tr>\r    <tr><td><code>\"hinge\"</code></td><td>Object constraint</td>\r      <td>Lets an entity pivot about an axis or connects two entities with a hinge joint.</td>\r      <td>{@link Entities.ActionArguments-Hinge}</td></tr>\r    <tr><td><code>\"slider\"</code></td><td>Object constraint</td>\r      <td>Lets an entity slide and rotate along an axis, or connects two entities that slide and rotate along a shared \r      axis.</td>\r      <td>{@link Entities.ActionArguments-Slider|ActionArguments-Slider}</td></tr>\r    <tr><td><code>\"cone-twist\"</code></td><td>Object constraint</td>\r      <td>Connects two entities with a joint that can move through a cone and can twist.</td>\r      <td>{@link Entities.ActionArguments-ConeTwist}</td></tr>\r    <tr><td><code>\"ball-socket\"</code></td><td>Object constraint</td>\r      <td>Connects two entities with a ball and socket joint.</td>\r      <td>{@link Entities.ActionArguments-BallSocket}</td></tr>\r    <tr><td><code>\"spring\"</code></td><td colspan=\"3\">Synonym for <code>\"tractor\"</code>. <em>Legacy value.</em></td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ActionType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.ActionType",
        "scope": "static"
    },
    {
        "description": "Different entity types have different properties: some common to all entities (listed below) and some specific to each \r{@link Entities.EntityType|EntityType} (linked to below). The properties are accessed as an object of property names and \rvalues.",
        "kind": "typedef",
        "name": "EntityProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity. <em>Read-only.</em>",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A name for the entity. Need not be unique.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Entities.EntityType"
                    ]
                },
                "description": "The entity type. You cannot change the type of an entity after it's created. (Though \r    its value may switch among <code>\"Box\"</code>, <code>\"Shape\"</code>, and <code>\"Sphere\"</code> depending on changes to \r    the <code>shape</code> property set for entities of these types.) <em>Read-only.</em>",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then the entity is an avatar entity; otherwise it is a server\r    entity. An avatar entity follows you to each domain you visit, rendering at the same world coordinates unless it's \r    parented to your avatar. <em>Value cannot be changed after the entity is created.</em><br />\r    The value can also be set at entity creation by using the <code>clientOnly</code> parameter in \r    {@link Entities.addEntity}.",
                "name": "clientOnly"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The session ID of the owning avatar if <code>clientOnly</code> is \r    <code>true</code>, otherwise {@link Uuid|Uuid.NULL}. <em>Read-only.</em>",
                "name": "owningAvatarID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The UTC date and time that the entity was created, in ISO 8601 format as\r    <code>yyyy-MM-ddTHH:mm:ssZ</code>. <em>Read-only.</em>",
                "name": "created"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The age of the entity in seconds since it was created. <em>Read-only.</em>",
                "name": "age"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The age of the entity since it was created, formatted as <code>h hours m minutes s \r    seconds</code>.",
                "name": "ageAsText"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -1,
                "description": "How long an entity lives for, in seconds, before being automatically deleted. A value of\r    <code>-1</code> means that the entity lives for ever.",
                "name": "lifetime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "When the entity was last edited, expressed as the number of microseconds since\r    1970-01-01T00:00:00 UTC. <em>Read-only.</em>",
                "name": "lastEdited"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar or agent that most recently created or edited the entity.\r    <em>Read-only.</em>",
                "name": "lastEditedBy"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the entity can be edited or deleted. If <code>true</code> then the \r    entity's properties other than <code>locked</code> cannot be changed, and the entity cannot be deleted.",
                "name": "locked"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "Whether or not the entity is rendered. If <code>true</code> then the entity is rendered.",
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "Whether or not the entity can cast a shadow. Currently applicable only to \r    {@link Entities.EntityType|Model} and {@link Entities.EntityType|Shape} entities. Shadows are cast if inside a \r    {@link Entities.EntityType|Zone} entity with <code>castShadows</code> enabled in its \r    {@link Entities.EntityProperties-Zone|keyLight} property.",
                "name": "canCastShadow"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "Whether or not the entity is rendered in the secondary camera. If <code>true</code> then the entity is rendered.",
                "name": "isVisibleInSecondaryCamera"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The position of the entity.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The orientation of the entity with respect to world coordinates.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.5,0.5,0.5",
                "description": "The point in the entity that is set to the entity's position and is rotated \r     about, {@link Vec3(0)|Vec3.ZERO} &ndash; {@link Vec3(0)|Vec3.ONE}. A value of {@link Vec3(0)|Vec3.ZERO} is the entity's\r     minimum x, y, z corner; a value of {@link Vec3(0)|Vec3.ONE} is the entity's maximum x, y, z corner.",
                "name": "registrationPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The center of the entity's unscaled mesh model if it has one, otherwise\r    {@link Vec3(0)|Vec3.ZERO}. <em>Read-only.</em>",
                "name": "naturalPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the entity's unscaled mesh model if it has one, otherwise \r    {@link Vec3(0)|Vec3.ONE}. <em>Read-only.</em>",
                "name": "naturalDimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The linear velocity of the entity in m/s with respect to world coordinates.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.39347,
                "description": "How much to slow down the linear velocity of an entity over time, <code>0.0</code> \r    &ndash; <code>1.0</code>. A higher damping value slows down the entity more quickly. The default value is for an \r    exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to <code>1/e = 0.368</code> of its \r    initial value.",
                "name": "damping"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The angular velocity of the entity in rad/s with respect to its axes, about its\r    registration point.",
                "name": "angularVelocity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.39347,
                "description": "How much to slow down the angular velocity of an entity over time, \r    <code>0.0</code> &ndash; <code>1.0</code>. A higher damping value slows down the entity more quickly. The default value \r    is for an exponential decay timescale of 2.0s, where it takes 2.0s for the movement to slow to <code>1/e = 0.368</code> \r    of its initial value.",
                "name": "angularDamping"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The acceleration due to gravity in m/s<sup>2</sup> that the entity should move with, in \r    world coordinates. Set to <code>{ x: 0, y: -9.8, z: 0 }</code> to simulate Earth's gravity. Gravity is applied to an \r    entity's motion only if its <code>dynamic</code> property is <code>true</code>. If changing an entity's \r    <code>gravity</code> from {@link Vec3(0)|Vec3.ZERO}, you need to give it a small <code>velocity</code> in order to kick \r    off physics simulation.\r    The <code>gravity</code> value is applied in addition to the <code>acceleration</code> value.",
                "name": "gravity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "A general acceleration in m/s<sup>2</sup> that the entity should move with, in world \r    coordinates. The acceleration is applied to an entity's motion only if its <code>dynamic</code> property is \r    <code>true</code>. If changing an entity's <code>acceleration</code> from {@link Vec3(0)|Vec3.ZERO}, you need to give it \r    a small <code>velocity</code> in order to kick off physics simulation.\r    The <code>acceleration</code> value is applied in addition to the <code>gravity</code> value.",
                "name": "acceleration"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "The \"bounciness\" of an entity when it collides, <code>0.0</code> &ndash; \r    <code>0.99</code>. The higher the value, the more bouncy.",
                "name": "restitution"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.5,
                "description": "How much to slow down an entity when it's moving against another, <code>0.0</code> &ndash; \r    <code>10.0</code>. The higher the value, the more quickly it slows down. Examples: <code>0.1</code> for ice, \r    <code>0.9</code> for sandpaper.",
                "name": "friction"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The density of the entity in kg/m<sup>3</sup>, <code>100</code> for balsa wood &ndash; \r    <code>10000</code> for silver. The density is used in conjunction with the entity's bounding box volume to work out its \r    mass in the application of physics.",
                "name": "density"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the entity should collide with items per its \r    <code>collisionMask<code> property. If <code>true</code> then the entity does not collide.",
                "name": "collisionless"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonym for <code>collisionless</code>.",
                "name": "ignoreForCollisions"
            },
            {
                "type": {
                    "names": [
                        "Entities.CollisionMask"
                    ]
                },
                "defaultvalue": 31,
                "description": "What types of items the entity should collide with.",
                "name": "collisionMask"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"static,dynamic,kinematic,myAvatar,otherAvatar,\"",
                "description": "Synonym for <code>collisionMask</code>,\r    in text format.",
                "name": "collidesWith"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The sound to play when the entity experiences a collision. Valid file formats are\r    as per the {@link SoundCache} object.",
                "name": "collisionSoundURL"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the entity should be affected by collisions. If <code>true</code> then \r    the entity's movement is affected by collisions.",
                "name": "dynamic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Synonym for <code>dynamic</code>.",
                "name": "collisionsWillMove"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A \"hifi://\" metaverse address that a user is taken to when they click on the entity.",
                "name": "href"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A description of the <code>href</code> property value.",
                "name": "description"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Used to store extra data about the entity in JSON format. WARNING: Other apps such as the \r    Create app can also use this property, so make sure you handle data stored by other apps &mdash; edit only your bit and \r    leave the rest of the data intact. You can use <code>JSON.parse()</code> to parse the string into a JavaScript object \r    which you can manipulate the properties of, and use <code>JSON.stringify()</code> to convert the object into a string to \r    put in the property.",
                "name": "userData"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the client entity script, if any, that is attached to the entity.",
                "name": "script"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Intended to be used to indicate when the client entity script was loaded. Should be \r    an integer number of milliseconds since midnight GMT on January 1, 1970 (e.g., as supplied by <code>Date.now()</code>. \r    If you update the property's value, the <code>script</code> is re-downloaded and reloaded. This is how the \"reload\" \r    button beside the \"script URL\" field in properties tab of the Create app works.",
                "name": "scriptTimestamp"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the server entity script, if any, that is attached to the entity.",
                "name": "serverScripts"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "The ID of the entity or avatar that this entity is parented to. {@link Uuid|Uuid.NULL} \r    if the entity is not parented.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 65535,
                "description": "The joint of the entity or avatar that this entity is parented to. Use \r    <code>65535</code> or <code>-1</code> to parent to the entity or avatar's position and orientation rather than a joint.",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The position of the entity relative to its parent if the entity is parented, \r    otherwise the same value as <code>position</code>. If the entity is parented to an avatar and is <code>clientOnly</code> \r    so that it scales with the avatar, this value remains the original local position value while the avatar scale changes.",
                "name": "localPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The rotation of the entity relative to its parent if the entity is parented, \r    otherwise the same value as <code>rotation</code>.",
                "name": "localRotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The velocity of the entity relative to its parent if the entity is parented, \r    otherwise the same value as <code>velocity</code>.",
                "name": "localVelocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The angular velocity of the entity relative to its parent if the entity is \r    parented, otherwise the same value as <code>position</code>.",
                "name": "localAngularVelocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the entity. If the entity is parented to an avatar and is \r    <code>clientOnly</code> so that it scales with the avatar, this value remains the original dimensions value while the \r    avatar scale changes.",
                "name": "localDimensions"
            },
            {
                "type": {
                    "names": [
                        "Entities.BoundingBox"
                    ]
                },
                "description": "The axis-aligned bounding box that tightly encloses the entity. \r    <em>Read-only.</em>",
                "name": "boundingBox"
            },
            {
                "type": {
                    "names": [
                        "AACube"
                    ]
                },
                "description": "The axis-aligned cube that determines where the entity lives in the entity server's octree. \r    The cube may be considerably larger than the entity in some situations, e.g., when the entity is grabbed by an avatar: \r    the position of the entity is determined through avatar mixer updates and so the AA cube is expanded in order to reduce \r    unnecessary entity server updates. Scripts should not change this property's value.",
                "name": "queryAACube"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Base-64 encoded compressed dump of the actions associated with the entity. This property\r    is typically not used in scripts directly; rather, functions that manipulate an entity's actions update it.\r    The size of this property increases with the number of actions. Because this property value has to fit within a High \r    Fidelity datagram packet there is a limit to the number of actions that an entity can have, and edits which would result \r    in overflow are rejected.\r    <em>Read-only.</em>",
                "name": "actionData"
            },
            {
                "type": {
                    "names": [
                        "Entities.RenderInfo"
                    ]
                },
                "description": "Information on the cost of rendering the entity. Currently information is only \r    provided for <code>Model</code> entities. <em>Read-only.</em>",
                "name": "renderInfo"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then the entity can be cloned via {@link Entities.cloneEntity}.",
                "name": "cloneable"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 300,
                "description": "The entity lifetime for clones created from this entity.",
                "name": "cloneLifetime"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The total number of clones of this entity that can exist in the domain at any given time.",
                "name": "cloneLimit"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then clones created from this entity will have their \r    <code>dynamic</code> property set to <code>true</code>.",
                "name": "cloneDynamic"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then clones created from this entity will be created as \r    avatar entities: their <code>clientOnly</code> property will be set to <code>true</code>.",
                "name": "cloneAvatarEntity"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that this entity was cloned from.",
                "name": "cloneOriginID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable name of the Marketplace item.",
                "name": "itemName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable description of the Marketplace item.",
                "name": "itemDescription"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable category of the Marketplace item.",
                "name": "itemCategories"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable  artist that created the Marketplace item.",
                "name": "itemArtist"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable license URL for the Marketplace item.",
                "name": "itemLicense"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 4294967295,
                "description": "Certifiable maximum integer number of editions (copies) of the Marketplace item \r    allowed to be sold.",
                "name": "limitedRun"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Certifiable integer edition (copy) number or the Marketplace item. Each copy sold in \r    the Marketplace is numbered sequentially, starting at 1.",
                "name": "editionNumber"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Certifiable integer instance number for identical entities in a Marketplace \r    item. A Marketplace item may have identical parts. If so, then each is numbered sequentially with an instance number.",
                "name": "entityInstanceNumber"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Certifiable UUID for the Marketplace item, as used in the URL of the item's download\r    and its Marketplace Web page.",
                "name": "marketplaceID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Hash of the entity's static certificate JSON, signed by the artist's private key.",
                "name": "certificateID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The version of the method used to generate the <code>certificateID</code>.",
                "name": "staticCertificateVersion"
            }
        ],
        "see": [
            "The different entity types have additional properties as follows:",
            "{@link Entities.EntityProperties-Box|EntityProperties-Box}",
            "{@link Entities.EntityProperties-Light|EntityProperties-Light}",
            "{@link Entities.EntityProperties-Line|EntityProperties-Line}",
            "{@link Entities.EntityProperties-Material|EntityProperties-Material}",
            "{@link Entities.EntityProperties-Model|EntityProperties-Model}",
            "{@link Entities.EntityProperties-ParticleEffect|EntityProperties-ParticleEffect}",
            "{@link Entities.EntityProperties-PolyLine|EntityProperties-PolyLine}",
            "{@link Entities.EntityProperties-PolyVox|EntityProperties-PolyVox}",
            "{@link Entities.EntityProperties-Shape|EntityProperties-Shape}",
            "{@link Entities.EntityProperties-Sphere|EntityProperties-Sphere}",
            "{@link Entities.EntityProperties-Text|EntityProperties-Text}",
            "{@link Entities.EntityProperties-Web|EntityProperties-Web}",
            "{@link Entities.EntityProperties-Zone|EntityProperties-Zone}"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties",
        "scope": "static"
    },
    {
        "description": "The <code>\"Box\"</code> {@link Entities.EntityType|EntityType} is the same as the <code>\"Shape\"</code>\r{@link Entities.EntityType|EntityType} except that its <code>shape</code> value is always set to <code>\"Cube\"</code>\rwhen the entity is created. If its <code>shape</code> property value is subsequently changed then the entity's \r<code>type</code> will be reported as <code>\"Sphere\"</code> if the <code>shape</code> is set to <code>\"Sphere\"</code>, \rotherwise it will be reported as <code>\"Shape\"</code>.",
        "kind": "typedef",
        "name": "EntityProperties-Box",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Box",
        "scope": "static"
    },
    {
        "description": "The <code>\"Light\"</code> {@link Entities.EntityType|EntityType} adds local lighting effects.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Light",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity. Entity surface outside these dimensions are not lit \r    by the light.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the light emitted.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The brightness of the light.",
                "name": "intensity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The distance from the light's center at which intensity is reduced by 25%.",
                "name": "falloffRadius"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then the light is directional, emitting along the entity's\r    local negative z-axis; otherwise the light is a point light which emanates in all directions.",
                "name": "isSpotlight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "Affects the softness of the spotlight beam: the higher the value the softer the beam.",
                "name": "exponent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.57,
                "description": "Affects the size of the spotlight beam: the higher the value the larger the beam.",
                "name": "cutoff"
            }
        ],
        "examples": [
            "<caption>Create a spotlight pointing at the ground.</caption>\rEntities.addEntity({\r    type: \"Light\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -4 })),\r    rotation: Quat.fromPitchYawRollDegrees(-75, 0, 0),\r    dimensions: { x: 5, y: 5, z: 5 },\r    intensity: 100,\r    falloffRadius: 0.3,\r    isSpotlight: true,\r    exponent: 20,\r    cutoff: 30,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Light",
        "scope": "static"
    },
    {
        "description": "The <code>\"Line\"</code> {@link Entities.EntityType|EntityType} draws thin, straight lines between a sequence of two or more \rpoints.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Line",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity. Must be sufficient to contain all the \r    <code>linePoints</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The sequence of points to draw lines between. The values are relative to the entity's\r    position. A maximum of 70 points can be specified. The property's value is set only if all the <code>linePoints</code> \r    lie within the entity's <code>dimensions</code>.",
                "name": "linePoints"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "<em>Currently not used.</em>",
                "name": "lineWidth"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the line.",
                "name": "color"
            }
        ],
        "examples": [
            "<caption>Draw lines in a \"V\".</caption>\rvar entity = Entities.addEntity({\r    type: \"Line\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 1 },\r    linePoints: [\r        { x: -1, y: 1, z: 0 },\r        { x: 0, y: -1, z: 0 },\r        { x: 1, y: 1, z: 0 },\r    ],\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Line",
        "scope": "static"
    },
    {
        "description": "The <code>\"Material\"</code> {@link Entities.EntityType|EntityType} modifies the existing materials on\r{@link Entities.EntityType|Model} entities, {@link Entities.EntityType|Shape} entities (albedo only), \r{@link Overlays.OverlayType|model overlays}, and avatars.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.<br />\rTo apply a material to an entity or overlay, set the material entity's <code>parentID</code> property to the entity or \roverlay's ID.\rTo apply a material to an avatar, set the material entity's <code>parentID</code> property to the avatar's session UUID.\rTo apply a material to your avatar such that it persists across domains and log-ins, create the material as an avatar entity \rby setting the <code>clientOnly</code> parameter in {@link Entities.addEntity} to <code>true</code>.\rMaterial entities render as non-scalable spheres if they don't have their parent set.",
        "kind": "typedef",
        "name": "EntityProperties-Material",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "URL to a {@link MaterialResource}. If you append <code>?name</code> to the URL, the \r    material with that name in the {@link MaterialResource} will be applied to the entity. <br />\r    Alternatively, set the property value to <code>\"materialData\"</code> to use the <code>materialData</code> property  \r    for the {@link MaterialResource} values.",
                "name": "materialURL"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The priority for applying the material to its parent. Only the highest priority material is \r    applied, with materials of the same priority randomly assigned. Materials that come with the model have a priority of \r    <code>0</code>.",
                "name": "priority"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "defaultvalue": "\"0\"",
                "description": "Selects the submesh or submeshes within the parent to apply the material \r    to. If in the format <code>\"mat::string\"</code>, all submeshes with material name <code>\"string\"</code> are replaced. \r    Otherwise the property value is parsed as an unsigned integer, specifying the mesh index to modify. Invalid values are \r    parsed to <code>0</code>.",
                "name": "parentMaterialName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"uv\"",
                "description": "How the material is mapped to the entity. Either <code>\"uv\"</code> or \r    <code>\"projected\"</code>. <em>Currently, only <code>\"uv\"</code> is supported.",
                "name": "materialMappingMode"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "0,0",
                "description": "Offset position in UV-space of the top left of the material, range \r    <code>{ x: 0, y: 0 }</code> &ndash; <code>{ x: 1, y: 1 }</code>.",
                "name": "materialMappingPos"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "defaultvalue": "1,1",
                "description": "How much to scale the material within the parent's UV-space.",
                "name": "materialMappingScale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "How much to rotate the material within the parent's UV-space, in degrees.",
                "name": "materialMappingRot"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "Used to store {@link MaterialResource} data as a JSON string. You can use \r    <code>JSON.parse()</code> to parse the string into a JavaScript object which you can manipulate the properties of, and \r    use <code>JSON.stringify()</code> to convert the object into a string to put in the property.",
                "name": "materialData"
            }
        ],
        "examples": [
            "<caption>Color a sphere using a Material entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 1, y: 1, z: 1 },\r    color: { red: 128, green: 128, blue: 128 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar materialID = Entities.addEntity({\r    type: \"Material\",\r    parentID: entityID,\r    materialURL: \"materialData\",\r    priority: 1,\r    materialData: JSON.stringify({\r        materialVersion: 1,\r        materials: {\r            // Can only set albedo on a Shape entity.\r            // Value overrides entity's \"color\" property.\r            albedo: [1.0, 1.0, 0]  // Yellow\r        }\r    }),\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Material",
        "scope": "static"
    },
    {
        "description": "The <code>\"Model\"</code> {@link Entities.EntityType|EntityType} displays an FBX or OBJ model.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Model",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity. When adding an entity, if no <code>dimensions</code> \r    value is specified then the model is automatically sized to its \r    <code>{@link Entities.EntityProperties|naturalDimensions}</code>.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "<em>Currently not used.</em>",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the FBX of OBJ model. Baked FBX models' URLs end in \".baked.fbx\".<br />\r    Note: If the name ends with <code>\"default-image-model.fbx\"</code> then the entity is considered to be an \"Image\" \r    entity, in which case the <code>textures</code> property should be set per the example.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A JSON string of texture name, URL pairs used when rendering the model in place of the\r    model's original textures. Use a texture name from the <code>originalTextures</code> property to override that texture. \r    Only the texture names and URLs to be overridden need be specified; original textures are used where there are no \r    overrides. You can use <code>JSON.stringify()</code> to convert a JavaScript object of name, URL pairs into a JSON \r    string.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"{}\"",
                "description": "A JSON string of texture name, URL pairs used in the model. The property value is \r    filled in after the entity has finished rezzing (i.e., textures have loaded). You can use <code>JSON.parse()</code> to \r    parse the JSON string into a JavaScript object of name, URL pairs. <em>Read-only.</em>",
                "name": "originalTextures"
            },
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "The shape of the collision hull used if collisions are enabled.",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The OBJ file to use for the compound shape if <code>shapeType</code> is\r    <code>\"compound\"</code>.",
                "name": "compoundShapeURL"
            },
            {
                "type": {
                    "names": [
                        "Entities.AnimationProperties"
                    ]
                },
                "description": "An animation to play on the model.",
                "name": "animation"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "Joint rotations applied to the model; <code>[]</code> if none are applied or the \r    model hasn't loaded. The array indexes are per {@link Entities.getJointIndex|getJointIndex}. Rotations are relative to \r    each joint's parent.<br />\r    Joint rotations can be set by {@link Entities.setLocalJointRotation|setLocalJointRotation} and similar functions, or by\r    setting the value of this property. If you set a joint rotation using this property you also need to set the \r    corresponding <code>jointRotationsSet</code> value to <code>true</code>.",
                "name": "jointRotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<boolean>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "<code>true</code> values for joints that have had rotations applied, \r    <code>false</code> otherwise; <code>[]</code> if none are applied or the model hasn't loaded. The array indexes are per \r    {@link Entities.getJointIndex|getJointIndex}.",
                "name": "jointRotationsSet"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "Joint translations applied to the model; <code>[]</code> if none are applied or \r    the model hasn't loaded. The array indexes are per {@link Entities.getJointIndex|getJointIndex}. Rotations are relative \r    to each joint's parent.<br />\r    Joint translations can be set by {@link Entities.setLocalJointTranslation|setLocalJointTranslation} and similar \r    functions, or by setting the value of this property. If you set a joint translation using this property you also need to \r    set the corresponding <code>jointTranslationsSet</code> value to <code>true</code>.",
                "name": "jointTranslations"
            },
            {
                "type": {
                    "names": [
                        "Array.<boolean>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "<code>true</code> values for joints that have had translations applied, \r    <code>false</code> otherwise; <code>[]</code> if none are applied or the model hasn't loaded. The array indexes are per \r    {@link Entities.getJointIndex|getJointIndex}.",
                "name": "jointTranslationsSet"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> and the entity is parented to an avatar, then the \r    avatar's joint rotations are applied to the entity's joints.",
                "name": "relayParentJoints"
            }
        ],
        "examples": [
            "<caption>Rez a Vive tracker puck.</caption>\rvar entity = Entities.addEntity({\r    type: \"Model\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -2 })),\r    rotation: MyAvatar.orientation,\r    modelURL: \"http://content.highfidelity.com/seefo/production/puck-attach/vive_tracker_puck.obj\",\r    dimensions: { x: 0.0945, y: 0.0921, z: 0.0423 },\r    lifetime: 300  // Delete after 5 minutes.\r});",
            "<caption>Create an \"Image\" entity like you can in the Create app.</caption>\rvar IMAGE_MODEL = \"https://hifi-content.s3.amazonaws.com/DomainContent/production/default-image-model.fbx\";\rvar DEFAULT_IMAGE = \"https://hifi-content.s3.amazonaws.com/DomainContent/production/no-image.jpg\";\rvar entity = Entities.addEntity({\r    type: \"Model\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -3 })),\r    rotation: MyAvatar.orientation,\r    dimensions: {\r        x: 0.5385,\r        y: 0.2819,\r        z: 0.0092\r    },\r    shapeType: \"box\",\r    collisionless: true,\r    modelURL: IMAGE_MODEL,\r    textures: JSON.stringify({ \"tex.picture\": DEFAULT_IMAGE }),\r    lifetime: 300  // Delete after 5 minutes\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Model",
        "scope": "static"
    },
    {
        "description": "The <code>\"ParticleEffect\"</code> {@link Entities.EntityType|EntityType} displays a particle system that can be used to \rsimulate things such as fire, smoke, snow, magic spells, etc. The particles emanate from an ellipsoid or part thereof.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-ParticleEffect",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then particles are emitted.",
                "name": "isEmitting"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The maximum number of particles to render at one time. Older particles are deleted if \r    necessary when new ones are created.",
                "name": "maxParticles"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "3s",
                "description": "How long, in seconds, each particle lives.",
                "name": "lifespan"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 15,
                "description": "The number of particles per second to emit.",
                "name": "emitRate"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 5,
                "description": "The speed, in m/s, that each particle is emitted at.",
                "name": "emitSpeed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The spread in speeds at which particles are emitted at. If <code>emitSpeed == 5</code> \r    and <code>speedSpread == 1</code>, particles will be emitted with speeds in the range 4m/s &ndash; 6m/s.",
                "name": "speedSpread"
            },
            {
                "type": {
                    "names": [
                        "vec3"
                    ]
                },
                "defaultvalue": "0,-9.8,0",
                "description": "The acceleration that is applied to each particle during its lifetime. The \r    default is Earth's gravity value.",
                "name": "emitAcceleration"
            },
            {
                "type": {
                    "names": [
                        "vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The spread in accelerations that each particle is given. If\r    <code>emitAccelerations == {x: 0, y: -9.8, z: 0}</code> and <code>accelerationSpread ==\r    {x: 0, y: 1, z: 0}</code>, each particle will have an acceleration in the range <code>{x: 0, y: -10.8, z: 0}</code>\r    &ndash; <code>{x: 0, y: -8.8, z: 0}</code>.",
                "name": "accelerationSpread"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the particle effect, i.e., a bounding box containing all the particles\r    during their lifetimes, assuming that <code>emitterShouldTrail</code> is <code>false</code>. <em>Read-only.</em>",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then particles are \"left behind\" as the emitter moves,\r    otherwise they stay with the entity's dimensions.",
                "name": "emitterShouldTrail"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "-0.707,0,0,0.707",
                "description": "The orientation of particle emission relative to the entity's axes. By\r    default, particles emit along the entity's local z-axis, and <code>azimuthStart</code> and <code>azimuthFinish</code> \r    are relative to the entity's local x-axis. The default value is a rotation of -90 degrees about the local x-axis, i.e., \r    the particles emit vertically.",
                "name": "emitOrientation"
            },
            {
                "type": {
                    "names": [
                        "vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The dimensions of the ellipsoid from which particles are emitted.",
                "name": "emitDimensions"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The starting radius within the ellipsoid at which particles start being emitted;\r    range <code>0.0</code> &ndash; <code>1.0</code> for the ellipsoid center to the ellipsoid surface, respectively.\r    Particles are emitted from the portion of the ellipsoid that lies between <code>emitRadiusStart</code> and the \r    ellipsoid's surface.",
                "name": "emitRadiusStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle in radians from the entity's local z-axis at which particles start being emitted \r    within the ellipsoid; range <code>0</code> &ndash; <code>Math.PI</code>. Particles are emitted from the portion of the \r    ellipsoid that lies between <code>polarStart<code> and <code>polarFinish</code>.",
                "name": "polarStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The angle in radians from the entity's local z-axis at which particles stop being emitted \r    within the ellipsoid; range <code>0</code> &ndash; <code>Math.PI</code>. Particles are emitted from the portion of the \r    ellipsoid that lies between <code>polarStart<code> and <code>polarFinish</code>.",
                "name": "polarFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "-Math.PI",
                "description": "The angle in radians from the entity's local x-axis about the entity's local \r    z-axis at which particles start being emitted; range <code>-Math.PI</code> &ndash; <code>Math.PI</code>. Particles are \r    emitted from the portion of the ellipsoid that lies between <code>azimuthStart<code> and <code>azimuthFinish</code>.",
                "name": "azimuthStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "Math.PI",
                "description": "The angle in radians from the entity's local x-axis about the entity's local\r    z-axis at which particles stop being emitted; range <code>-Math.PI</code> &ndash; <code>Math.PI</code>. Particles are\r    emitted from the portion of the ellipsoid that lies between <code>azimuthStart<code> and <code>azimuthFinish</code>.",
                "name": "azimuthFinish"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JPG or PNG image file to display for each particle. If you want transparency,\r    use PNG format.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.025,
                "description": "The radius of each particle at the middle of its life.",
                "name": "particleRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The radius of each particle at the start of its life. If <code>NaN</code>, the\r    <code>particleRadius</code> value is used.",
                "name": "radiusStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The radius of each particle at the end of its life. If <code>NaN</code>, the\r    <code>particleRadius</code> value is used.",
                "name": "radiusFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spread in radius that each particle is given. If <code>particleRadius == 0.5</code>\r    and <code>radiusSpread == 0.25</code>, each particle will have a radius in the range <code>0.25</code> &ndash; \r    <code>0.75</code>.",
                "name": "radiusSpread"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of each particle at the middle of its life.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "{}",
                "description": "The color of each particle at the start of its life. If any of the component values are \r    undefined, the <code>color</code> value is used.",
                "name": "colorStart"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "{}",
                "description": "The color of each particle at the end of its life. If any of the component values are \r    undefined, the <code>color</code> value is used.",
                "name": "colorFinish"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The spread in color that each particle is given. If\r    <code>color == {red: 100, green: 100, blue: 100}</code> and <code>colorSpread ==\r    {red: 10, green: 25, blue: 50}</code>, each particle will have a color in the range \r    <code>{red: 90, green: 75, blue: 50}</code> &ndash; <code>{red: 110, green: 125, blue: 150}</code>.",
                "name": "colorSpread"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The alpha of each particle at the middle of its life.",
                "name": "alpha"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The alpha of each particle at the start of its life. If <code>NaN</code>, the\r    <code>alpha</code> value is used.",
                "name": "alphaStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The alpha of each particle at the end of its life. If <code>NaN</code>, the\r    <code>alpha</code> value is used.",
                "name": "alphaFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spread in alpha that each particle is given. If <code>alpha == 0.5</code>\r    and <code>alphaSpread == 0.25</code>, each particle will have an alpha in the range <code>0.25</code> &ndash; \r    <code>0.75</code>.",
                "name": "alphaSpread"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spin of each particle at the middle of its life. In the range <code>-2*PI</code> &ndash; <code>2*PI</code>.",
                "name": "particleSpin"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The spin of each particle at the start of its life. In the range <code>-2*PI</code> &ndash; <code>2*PI</code>.\r    If <code>NaN</code>, the <code>particleSpin</code> value is used.",
                "name": "spinStart"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": null,
                "description": "The spin of each particle at the end of its life. In the range <code>-2*PI</code> &ndash; <code>2*PI</code>.\r    If <code>NaN</code>, the <code>particleSpin</code> value is used.",
                "name": "spinFinish"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The spread in spin that each particle is given. In the range <code>0</code> &ndash; <code>2*PI</code>.  If <code>particleSpin == PI</code>\r    and <code>spinSpread == PI/2</code>, each particle will have a spin in the range <code>PI/2</code> &ndash; <code>3*PI/2</code>.",
                "name": "spinSpread"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Whether or not the particles' spin will rotate with the entity.  If false, when <code>particleSpin == 0</code>, the particles will point\rup in the world.  If true, they will point towards the entity's up vector, based on its orientation.",
                "name": "rotateWithEntity"
            },
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"none\"",
                "description": "<em>Currently not used.</em> <em>Read-only.</em>",
                "name": "shapeType"
            }
        ],
        "examples": [
            "<caption>Create a ball of green smoke.</caption>\rparticles = Entities.addEntity({\r    type: \"ParticleEffect\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -4 })),\r    lifespan: 5,\r    emitRate: 10,\r    emitSpeed: 0.02,\r    speedSpread: 0.01,\r    emitAcceleration: { x: 0, y: 0.02, z: 0 },\r    polarFinish: Math.PI,\r    textures: \"https://content.highfidelity.com/DomainContent/production/Particles/wispy-smoke.png\",\r    particleRadius: 0.1,\r    color: { red: 0, green: 255, blue: 0 },\r    alphaFinish: 0,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-ParticleEffect",
        "scope": "static"
    },
    {
        "description": "The <code>\"PolyLine\"</code> {@link Entities.EntityType|EntityType} draws textured, straight lines between a sequence of \rpoints.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-PolyLine",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,1,1",
                "description": "The dimensions of the entity, i.e., the size of the bounding box that contains the \r    lines drawn.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The sequence of points to draw lines between. The values are relative to the entity's\r    position. A maximum of 70 points can be specified. Must be specified in order for the entity to render.",
                "name": "linePoints"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The normal vectors for the line's surface at the <code>linePoints</code>. The values are \r    relative to the entity's orientation. Must be specified in order for the entity to render.",
                "name": "normals"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "The widths, in m, of the line at the <code>linePoints</code>. Must be specified in \r    order for the entity to render.",
                "name": "strokeWidths"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 2,
                "description": "<em>Currently not used.</code>",
                "name": "lineWidth"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "defaultvalue": "[]",
                "description": "<em>Currently not used.</em>",
                "name": "strokeColors"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The base color of the line, which is multiplied with the color of the texture for\r    rendering.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JPG or PNG texture to use for the lines. If you want transparency, use PNG\r    format.",
                "name": "textures"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code>, the texture is stretched to fill the whole line, otherwise \r    the texture repeats along the line.",
                "name": "isUVModeStretch"
            }
        ],
        "examples": [
            "<caption>Draw a textured \"V\".</caption>\rvar entity = Entities.addEntity({\r    type: \"PolyLine\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    linePoints: [\r        { x: -1, y: 0.5, z: 0 },\r        { x: 0, y: 0, z: 0 },\r        { x: 1, y: 0.5, z: 0 }\r    ],\r    normals: [\r        { x: 0, y: 0, z: 1 },\r        { x: 0, y: 0, z: 1 },\r        { x: 0, y: 0, z: 1 }\r    ],\r    strokeWidths: [ 0.1, 0.1, 0.1 ],\r    color: { red: 255, green: 0, blue: 0 },  // Use just the red channel from the image.\r    textures: \"http://hifi-production.s3.amazonaws.com/DomainContent/Toybox/flowArts/trails.png\",\r    isUVModeStretch: true,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-PolyLine",
        "scope": "static"
    },
    {
        "description": "The <code>\"PolyVox\"</code> {@link Entities.EntityType|EntityType} displays a set of textured voxels. \rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.\rIf you have two or more neighboring PolyVox entities of the same size abutting each other, you can display them as joined by\rconfiguring their <code>voxelSurfaceStyle</code> and neighbor ID properties.<br />\rPolyVox entities uses a library from <a href=\"http://www.volumesoffun.com/\">Volumes of Fun</a>. Their\r<a href=\"http://www.volumesoffun.com/polyvox-documentation/\">library documentation</a> may be useful to read.",
        "kind": "typedef",
        "name": "EntityProperties-PolyVox",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "32,32,32",
                "description": "Integer number of voxels along each axis of the entity, in the range \r    <code>1,1,1</code> to <code>128,128,128</code>. The dimensions of each voxel is \r    <code>dimensions / voxelVolumesize</code>.",
                "name": "voxelVolumeSize"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"ABAAEAAQAAAAHgAAEAB42u3BAQ0AAADCoPdPbQ8HFAAAAPBuEAAAAQ==\"",
                "description": "Base-64 encoded compressed dump of \r    the PolyVox data. This property is typically not used in scripts directly; rather, functions that manipulate a PolyVox \r    entity update it.<br />\r    The size of this property increases with the size and complexity of the PolyVox entity, with the size depending on how \r    the particular entity's voxels compress. Because this property value has to fit within a High Fidelity datagram packet \r    there is a limit to the size and complexity of a PolyVox entity, and edits which would result in an overflow are \r    rejected.",
                "name": "voxelData"
            },
            {
                "type": {
                    "names": [
                        "Entities.PolyVoxSurfaceStyle"
                    ]
                },
                "defaultvalue": 2,
                "description": "The style of rendering the voxels' surface and how \r    neighboring PolyVox entities are joined.",
                "name": "voxelSurfaceStyle"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "URL of the texture to map to surfaces perpendicular to the entity's local x-axis. JPG or\r    PNG format. If no texture is specified the surfaces display white.",
                "name": "xTextureURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "URL of the texture to map to surfaces perpendicular to the entity's local y-axis. JPG or \r    PNG format. If no texture is specified the surfaces display white.",
                "name": "yTextureURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "URL of the texture to map to surfaces perpendicular to the entity's local z-axis. JPG or \r    PNG format. If no texture is specified the surfaces display white.",
                "name": "zTextureURL"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "ID of the neighboring PolyVox entity in the entity's -ve local x-axis direction, \r    if you want them joined. Set to {@link Uuid|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "xNNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "ID of the neighboring PolyVox entity in the entity's -ve local y-axis direction, \r    if you want them joined. Set to {@link Uuid|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "yNNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "ID of the neighboring PolyVox entity in the entity's -ve local z-axis direction, \r    if you want them joined. Set to {@link Uuid|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "zNNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "ID of the neighboring PolyVox entity in the entity's +ve local x-axis direction, \r    if you want them joined. Set to {@link Uuid|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "xPNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "ID of the neighboring PolyVox entity in the entity's +ve local y-axis direction, \r    if you want them joined. Set to {@link Uuid|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "yPNeighborID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": "Uuid.NULL",
                "description": "ID of the neighboring PolyVox entity in the entity's +ve local z-axis direction, \r    if you want them joined. Set to {@link Uuid|Uuid.NULL} if there is none or you don't want to join them.",
                "name": "zPNeighborID"
            }
        ],
        "examples": [
            "<caption>Create a textured PolyVox sphere.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));\rvar texture = \"http://public.highfidelity.com/cozza13/tuscany/Concrete2.jpg\";\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: position,\r    dimensions: { x: 2, y: 2, z: 2 },\r    xTextureURL: texture,\r    yTextureURL: texture,\r    zTextureURL: texture,\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setVoxelSphere(polyVox, position, 0.8, 255);"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-PolyVox",
        "scope": "static"
    },
    {
        "description": "The <code>\"Shape\"</code> {@link Entities.EntityType|EntityType} displays an entity of a specified <code>shape</code>.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Shape",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Entities.Shape"
                    ]
                },
                "defaultvalue": "\"Sphere\"",
                "description": "The shape of the entity.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the entity.",
                "name": "color"
            }
        ],
        "examples": [
            "<caption>Create a cylinder.</caption>\rvar shape = Entities.addEntity({\r    type: \"Shape\",\r    shape: \"Cylinder\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.4, y: 0.6, z: 0.4 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Shape",
        "scope": "static"
    },
    {
        "description": "The <code>\"Sphere\"</code> {@link Entities.EntityType|EntityType} is the same as the <code>\"Shape\"</code>\r{@link Entities.EntityType|EntityType} except that its <code>shape</code> value is always set to <code>\"Sphere\"</code>\rwhen the entity is created. If its <code>shape</code> property value is subsequently changed then the entity's \r<code>type</code> will be reported as <code>\"Box\"</code> if the <code>shape</code> is set to <code>\"Cube\"</code>, \rotherwise it will be reported as <code>\"Shape\"</code>.",
        "kind": "typedef",
        "name": "EntityProperties-Sphere",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Sphere",
        "scope": "static"
    },
    {
        "description": "The <code>\"Text\"</code> {@link Entities.EntityType|EntityType} displays a 2D rectangle of text in the domain.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Text",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.01",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The text to display on the face of the entity. Text wraps if necessary to fit. New lines can be\r    created using <code>\\n</code>. Overflowing lines are not displayed.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "The height of each line of text (thus determining the font size).",
                "name": "lineHeight"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the text.",
                "name": "textColor"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The color of the background rectangle.",
                "name": "backgroundColor"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the entity is oriented to face each user's camera (i.e., it\r    differs for each user present).",
                "name": "faceCamera"
            }
        ],
        "examples": [
            "<caption>Create a text entity.</caption>\rvar text = Entities.addEntity({\r    type: \"Text\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.6, y: 0.3, z: 0.01 },\r    lineHeight: 0.12,\r    text: \"Hello\\nthere!\",\r    faceCamera: true,\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Text",
        "scope": "static"
    },
    {
        "description": "The <code>\"Web\"</code> {@link Entities.EntityType|EntityType} displays a browsable Web page. Each user views their own copy \rof the Web page: if one user navigates to another page on the entity, other users do not see the change; if a video is being \rplayed, users don't see it in sync.\rThe entity has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Web",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.01",
                "description": "The dimensions of the entity.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of the Web page to display. This value does not change as you or others navigate \r    on the Web entity.",
                "name": "sourceUrl"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 30,
                "description": "The resolution to display the page at, in dots per inch. If you convert this to dots per meter \r    (multiply by 1 / 0.0254 = 39.3701) then multiply <code>dimensions.x</code> and <code>dimensions.y</code> by that value \r    you get the resolution in pixels.",
                "name": "dpi"
            }
        ],
        "examples": [
            "<caption>Create a Web entity displaying at 1920 x 1080 resolution.</caption>\rvar METERS_TO_INCHES = 39.3701;\rvar entity = Entities.addEntity({\r    type: \"Web\",\r    sourceUrl: \"https://highfidelity.com/\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -4 })),\r    rotation: MyAvatar.orientation,\r    dimensions: {\r        x: 3,\r        y: 3 * 1080 / 1920,\r        z: 0.01\r    },\r    dpi: 1920 / (3 * METERS_TO_INCHES),\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Web",
        "scope": "static"
    },
    {
        "description": "The <code>\"Zone\"</code> {@link Entities.EntityType|EntityType} is a volume of lighting effects and avatar permissions.\rAvatar interaction events such as {@link Entities.enterEntity} are also often used with a Zone entity.\rIt has properties in addition to the common {@link Entities.EntityProperties|EntityProperties}.",
        "kind": "typedef",
        "name": "EntityProperties-Zone",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0.1,0.1,0.1",
                "description": "The size of the volume in which the zone's lighting effects and avatar permissions \r    have effect.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "ShapeType"
                    ]
                },
                "defaultvalue": "\"box\"",
                "description": "The shape of the volume in which the zone's lighting effects and avatar \r    permissions have effect. Reverts to the default value if set to <code>\"none\"</code>, or set to <code>\"compound\"</code> \r    and <code>compoundShapeURL</code> is <code>\"\"</code>.",
                "name": "shapeType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The OBJ file to use for the compound shape if <code>shapeType</code> is \r    <code>\"compound\"</code>.",
                "name": "compoundShapeURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the key light in the zone. Possible values:<br />\r    <code>\"inherit\"</code>: The key light from any enclosing zone continues into this zone.<br />\r    <code>\"disabled\"</code>: The key light from any enclosing zone and the key light of this zone are disabled in this \r        zone.<br />\r    <code>\"enabled\"</code>: The key light properties of this zone are enabled, overriding the key light of from any \r        enclosing zone.",
                "name": "keyLightMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.KeyLight"
                    ]
                },
                "description": "The key light properties of the zone.",
                "name": "keyLight"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the ambient light in the zone. Possible values:<br />\r    <code>\"inherit\"</code>: The ambient light from any enclosing zone continues into this zone.<br />\r    <code>\"disabled\"</code>: The ambient light from any enclosing zone and the ambient light of this zone are disabled in \r        this zone.<br />\r    <code>\"enabled\"</code>: The ambient light properties of this zone are enabled, overriding the ambient light from any \r        enclosing zone.",
                "name": "ambientLightMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.AmbientLight"
                    ]
                },
                "description": "The ambient light properties of the zone.",
                "name": "ambientLight"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the skybox displayed in the zone. Possible values:<br />\r    <code>\"inherit\"</code>: The skybox from any enclosing zone is dislayed in this zone.<br />\r    <code>\"disabled\"</code>: The skybox from any enclosing zone and the skybox of this zone are disabled in this zone.<br />\r    <code>\"enabled\"</code>: The skybox properties of this zone are enabled, overriding the skybox from any enclosing zone.",
                "name": "skyboxMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.Skybox"
                    ]
                },
                "description": "The skybox properties of the zone.",
                "name": "skybox"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the haze in the zone. Possible values:<br />\r    <code>\"inherit\"</code>: The haze from any enclosing zone continues into this zone.<br />\r    <code>\"disabled\"</code>: The haze from any enclosing zone and the haze of this zone are disabled in this zone.<br />\r    <code>\"enabled\"</code>: The haze properties of this zone are enabled, overriding the haze from any enclosing zone.",
                "name": "hazeMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.Haze"
                    ]
                },
                "description": "The haze properties of the zone.",
                "name": "haze"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"inherit\"",
                "description": "Configures the bloom in the zone. Possible values:<br />\r    <code>\"inherit\"</code>: The bloom from any enclosing zone continues into this zone.<br />\r    <code>\"disabled\"</code>: The bloom from any enclosing zone and the bloom of this zone are disabled in this zone.<br />\r    <code>\"enabled\"</code>: The bloom properties of this zone are enabled, overriding the bloom from any enclosing zone.",
                "name": "bloomMode"
            },
            {
                "type": {
                    "names": [
                        "Entities.Bloom"
                    ]
                },
                "description": "The bloom properties of the zone.",
                "name": "bloom"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then visitors can fly in the zone; otherwise they cannot.",
                "name": "flyingAllowed"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then visitors with avatar collisions turned off will not \r    collide with content in the zone; otherwise visitors will always collide with content in the zone.",
                "name": "ghostingAllowed"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The URL of a JavaScript file that filters changes to properties of entities within the \r    zone. It is periodically executed for each entity in the zone. It can, for example, be used to not allow changes to \r    certain properties.<br />\r<pre>\rfunction filter(properties) {\r    // Test and edit properties object values,\r    // e.g., properties.modelURL, as required.\r    return properties;\r}\r</pre>",
                "name": "filterURL"
            }
        ],
        "examples": [
            "<caption>Create a zone that casts a red key light along the x-axis.</caption>\rvar zone = Entities.addEntity({\r    type: \"Zone\",\r    position: MyAvatar.position,\r    dimensions: { x: 100, y: 100, z: 100 },\r    keyLightMode: \"enabled\",\r    keyLight: {\r        \"color\": { \"red\": 255, \"green\": 0, \"blue\": 0 },\r        \"direction\": { \"x\": 1, \"y\": 0, \"z\": 0 }\r    },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.EntityProperties-Zone",
        "scope": "static"
    },
    {
        "description": "The axis-aligned bounding box of an entity.",
        "kind": "typedef",
        "name": "BoundingBox",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The bottom right near (minimum axes values) corner of the AA box.",
                "name": "brn"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The top far left (maximum axes values) corner of the AA box.",
                "name": "tfl"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the AA box.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the AA box.",
                "name": "dimensions"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.BoundingBox",
        "scope": "static"
    },
    {
        "description": "Information on how an entity is rendered. Properties are only filled in for <code>Model</code> entities; other \rentity types have an empty object, <code>{}</code>.",
        "kind": "typedef",
        "name": "RenderInfo",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of vertices in the entity.",
                "name": "verticesCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of textures in the entity.",
                "name": "texturesCount"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total size of the textures in the entity, in bytes.",
                "name": "textureSize"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is <code>true</code> if any of the textures has transparency.",
                "name": "hasTransparent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of draw calls required to render the entity.",
                "name": "drawCalls"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.RenderInfo",
        "scope": "static"
    },
    {
        "description": "The result of a {@link PickRay} search using {@link Entities.findRayIntersection|findRayIntersection} or \r{@link Entities.findRayIntersectionBlocking|findRayIntersectionBlocking}.",
        "kind": "typedef",
        "name": "RayToEntityIntersectionResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link PickRay} intersected an entity, otherwise \r    <code>false</code>.",
                "name": "intersects"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is always <code>true</code>.",
                "name": "accurate"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID if the entity intersected, if any, otherwise <code>null</code>.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance from the {@link PickRay} origin to the intersection point.",
                "name": "distance"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The intersection point.",
                "name": "intersection"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal of the entity at the intersection point.",
                "name": "surfaceNormal"
            },
            {
                "type": {
                    "names": [
                        "BoxFace"
                    ]
                },
                "description": "The face of the entity's axis-aligned box that the ray intersects.",
                "name": "face"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Extra information depending on the entity intersected. Currently, only <code>Model</code> \r    entities provide extra information, and the information provided depends on the <code>precisionPicking</code> parameter \r    value that the search function was called with.",
                "name": "extraInfo"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.RayToEntityIntersectionResult",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>The Entities API provides facilities to create and interact with entities. Entities are 2D and 3D objects that are visible\rto everyone and typically are persisted to the domain. For Interface scripts, the entities available are those that \rInterface has displayed and so knows about.",
        "kind": "namespace",
        "name": "Entities",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Get or set the {@link Entities.EntityType|Web} entity that has keyboard focus.\r    If no entity has keyboard focus, get returns <code>null</code>; set to <code>null</code> or {@link Uuid|Uuid.NULL} to \r    clear keyboard focus.",
                "name": "keyboardFocusEntity"
            }
        ],
        "longname": "Entities",
        "scope": "global"
    },
    {
        "description": "Get the properties of multiple entities.",
        "kind": "function",
        "name": "getMultipleEntityProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "The IDs of the entities to get the properties of.",
                "name": "entityIDs"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>",
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Either string with property name or array of the names of the properties\r    to get. If the array is empty, all properties are returned.",
                "name": "desiredProperties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Entities.EntityProperties>"
                    ]
                },
                "description": "The properties of the entity if the entity can be found, otherwise an empty object."
            }
        ],
        "examples": [
            "<caption>Retrieve the names of the nearby entities</caption>\rvar SEARCH_RADIUS = 50; // meters\rvar entityIds = Entities.findEntities(MyAvatar.position, SEARCH_RADIUS);\rvar propertySets = Entities.getMultipleEntityProperties(entityIds, \"name\");\rprint(\"Nearby entity names: \" + JSON.stringify(propertySets));"
        ],
        "memberof": "Entities",
        "longname": "Entities.getMultipleEntityProperties",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can change the <code>locked</code> property of entities. Locked entities have their \r<code>locked</code> property set to <code>true</code> and cannot be edited or deleted. Whether or not you can change \rentities' <code>locked</code> properties is configured in the domain server's permissions.",
        "kind": "function",
        "name": "canAdjustLocks",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the client can change the <code>locked</code> property of entities,\r    otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Set an entity's <code>locked</code> property to true if you can.</caption>\rif (Entities.canAdjustLocks()) {\r    Entities.editEntity(entityID, { locked: true });\r} else {\r    Window.alert(\"You do not have the permissions to set an entity locked!\");\r}"
        ],
        "memberof": "Entities",
        "longname": "Entities.canAdjustLocks",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can rez (create) new entities in the domain.",
        "kind": "function",
        "name": "canRez",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new entities, \r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRez",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can rez (create) new temporary entities in the domain. Temporary entities are entities with a\rfinite <code>lifetime</code> property value set.",
        "kind": "function",
        "name": "canRezTmp",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new temporary\r    entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmp",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can rez (create) new certified entities in the domain. Certified entities are entities that have\rPoP certificates.",
        "kind": "function",
        "name": "canRezCertified",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new certified\r    entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezCertified",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can rez (create) new temporary certified entities in the domain. Temporary entities are entities\rwith a finite  <code>lifetime</code> property value set. Certified entities are entities that have PoP certificates.",
        "kind": "function",
        "name": "canRezTmpCertified",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to rez (create) new temporary \r    certified entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpCertified",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can make changes to the asset server's assets.",
        "kind": "function",
        "name": "canWriteAssets",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to make changes to the asset server's \r    assets, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canWriteAssets",
        "scope": "static"
    },
    {
        "description": "Check whether or not you can replace the domain's content set.",
        "kind": "function",
        "name": "canReplaceContent",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server will allow the script to replace the domain's content set, \r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canReplaceContent",
        "scope": "static"
    },
    {
        "description": "Add a new entity with specified properties.",
        "kind": "function",
        "name": "addEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The properties of the entity to create.",
                "name": "properties"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code>, or if <code>clientOnly</code> is set <code>true</code> in \r    the properties, the entity is created as an avatar entity; otherwise it is created on the server. An avatar entity \r    follows you to each domain you visit, rendering at the same world coordinates unless it's parented to your avatar.",
                "name": "clientOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity if successfully created, otherwise {@link Uuid|Uuid.NULL}."
            }
        ],
        "examples": [
            "<caption>Create a box entity in front of your avatar.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 }\r});\rprint(\"Entity created: \" + entityID);"
        ],
        "memberof": "Entities",
        "longname": "Entities.addEntity",
        "scope": "static"
    },
    {
        "description": "Create a clone of an entity. A clone can be created by a client that doesn't have rez permissions in the current domain.\rThe entity must have its <code>cloneable</code> property set to <code>true</code>. The clone has a modified name, other \rproperties set per its clone related-properties, and its clone-related properties are set to defaults.",
        "kind": "function",
        "name": "cloneEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to clone.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the new entity if successfully cloned, otherwise {@link Uuid|Uuid.NULL}."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.cloneEntity",
        "scope": "static"
    },
    {
        "description": "Get the properties of an entity.",
        "kind": "function",
        "name": "getEntityProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the properties of.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Array of the names of the properties to get. If the array is empty,\r    all properties are returned.",
                "name": "desiredProperties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The properties of the entity if the entity can be found, otherwise an empty object."
            }
        ],
        "examples": [
            "<caption>Report the color of a new box entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 }\r});\rvar properties = Entities.getEntityProperties(entityID, [\"color\"]);\rprint(\"Entity color: \" + JSON.stringify(properties.color));"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityProperties",
        "scope": "static"
    },
    {
        "description": "Update an entity with specified properties.",
        "kind": "function",
        "name": "editEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to edit.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities.EntityProperties"
                    ]
                },
                "description": "The properties to update the entity with.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity if the edit was successful, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Change the color of an entity.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 }\r});\rvar properties = Entities.getEntityProperties(entityID, [\"color\"]);\rprint(\"Entity color: \" + JSON.stringify(properties.color));\r\rEntities.editEntity(entityID, {\r    color: { red: 255, green: 0, blue: 0 }\r});\rproperties = Entities.getEntityProperties(entityID, [\"color\"]);\rprint(\"Entity color: \" + JSON.stringify(properties.color));"
        ],
        "memberof": "Entities",
        "longname": "Entities.editEntity",
        "scope": "static"
    },
    {
        "description": "Delete an entity.",
        "kind": "function",
        "name": "deleteEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to delete.",
                "name": "entityID"
            }
        ],
        "examples": [
            "<caption>Delete an entity a few seconds after creating it.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 }\r});\r\rScript.setTimeout(function () {\r    Entities.deleteEntity(entityID);\r}, 3000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.deleteEntity",
        "scope": "static"
    },
    {
        "description": "Call a method in a client entity script from a client script or client entity script, or call a method in a server \rentity script from a server entity script. The entity script method must be exposed as a property in the target client \rentity script. Additionally, if calling a server entity script, the server entity script must include the method's name \rin an exposed property called <code>remotelyCallable</code> that is an array of method names that can be called.",
        "kind": "function",
        "name": "callEntityMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to call the method in.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The parameters to call the specified method with.",
                "name": "parameters"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityMethod",
        "scope": "static"
    },
    {
        "description": "Call a method in a server entity script from a client script or client entity script. The entity script method must be \rexposed as a property in the target server entity script. Additionally, the target server entity script must include the \rmethod's name in an exposed property called <code>remotelyCallable</code> that is an array of method names that can be \rcalled.",
        "kind": "function",
        "name": "callEntityServerMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to call the method in.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The parameters to call the specified method with.",
                "name": "parameters"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityServerMethod",
        "scope": "static"
    },
    {
        "description": "Call a method in a specific user's client entity script from a server entity script. The entity script method must be \rexposed as a property in the target client entity script.",
        "kind": "function",
        "name": "callEntityClientMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the user to call the method in.",
                "name": "clientSessionID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to call the method in.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the method to call.",
                "name": "method"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "The parameters to call the specified method with.",
                "name": "parameters"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.callEntityClientMethod",
        "scope": "static"
    },
    {
        "description": "Find the entity with a position closest to a specified point and within a specified radius.",
        "kind": "function",
        "name": "findClosestEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is closest to the <code>center</code> and within the <code>radius</code> if\r    there is one, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Find the closest entity within 10m of your avatar.</caption>\rvar entityID = Entities.findClosestEntity(MyAvatar.position, 10);\rprint(\"Closest entity: \" + entityID);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findClosestEntity",
        "scope": "static"
    },
    {
        "description": "Find all entities that intersect a sphere defined by a center point and radius.",
        "kind": "function",
        "name": "findEntities",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs that were found that intersect the search sphere. The array is empty if no \r    entities could be found."
            }
        ],
        "examples": [
            "<caption>Report how many entities are within 10m of your avatar.</caption>\rvar entityIDs = Entities.findEntities(MyAvatar.position, 10);\rprint(\"Number of entities within 10m: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntities",
        "scope": "static"
    },
    {
        "description": "Find all entities whose axis-aligned boxes intersect a search axis-aligned box defined by its minimum coordinates corner\rand dimensions.",
        "kind": "function",
        "name": "findEntitiesInBox",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The corner of the search AA box with minimum co-ordinate values.",
                "name": "corner"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the search AA box.",
                "name": "dimensions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs whose AA boxes intersect the search AA box. The array is empty if no entities \r    could be found."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesInBox",
        "scope": "static"
    },
    {
        "description": "Find all entities whose axis-aligned boxes intersect a search frustum.",
        "kind": "function",
        "name": "findEntitiesInFrustum",
        "params": [
            {
                "type": {
                    "names": [
                        "ViewFrustum"
                    ]
                },
                "description": "The frustum to search in. The <code>position</code>, <code>orientation</code>, \r    <code>projection</code>, and <code>centerRadius</code> properties must be specified.",
                "name": "frustum"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs axis-aligned boxes intersect the frustum. The array is empty if no entities \r    could be found."
            }
        ],
        "examples": [
            "<caption>Report the number of entities in view.</caption>\rvar entityIDs = Entities.findEntitiesInFrustum(Camera.frustum);\rprint(\"Number of entities in view: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesInFrustum",
        "scope": "static"
    },
    {
        "description": "Find all entities of a particular type that intersect a sphere defined by a center point and radius.",
        "kind": "function",
        "name": "findEntitiesByType",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.EntityType"
                    ]
                },
                "description": "The type of entity to search for.",
                "name": "entityType"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs of the specified type that intersect the search sphere. The array is empty if \r    no entities could be found."
            }
        ],
        "examples": [
            "<caption>Report the number of Model entities within 10m of your avatar.</caption>\rvar entityIDs = Entities.findEntitiesByType(\"Model\", MyAvatar.position, 10);\rprint(\"Number of Model entities within 10m: \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesByType",
        "scope": "static"
    },
    {
        "description": "Find all entities of a particular name that intersect a sphere defined by a center point and radius.",
        "kind": "function",
        "name": "findEntitiesByName",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the entity to search for.",
                "name": "entityName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point about which to search.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius within which to search.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then the search is case-sensitive.",
                "name": "caseSensitive"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity IDs that have the specified name and intersect the search sphere. The array is empty \r    if no entities could be found."
            }
        ],
        "examples": [
            "<caption>Report the number of entities with the name, \"Light-Target\".</caption>\rvar entityIDs = Entities.findEntitiesByName(\"Light-Target\", MyAvatar.position, 10, false);\rprint(\"Number of entities with the name \"Light-Target\": \" + entityIDs.length);"
        ],
        "memberof": "Entities",
        "longname": "Entities.findEntitiesByName",
        "scope": "static"
    },
    {
        "description": "Find the first entity intersected by a {@link PickRay}. <code>Light</code> and <code>Zone</code> entities are not \rintersected unless they've been configured as pickable using {@link Entities.setLightsArePickable|setLightsArePickable}\rand {@link Entities.setZonesArePickable|setZonesArePickable}, respectively.<br />",
        "kind": "function",
        "name": "findRayIntersection",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay to use for finding entities.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> and the intersected entity is a <code>Model</code> \r    entity, the result's <code>extraInfo</code> property includes more information than it otherwise would.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "If not empty then the search is restricted to these entities.",
                "name": "entitiesToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Entities to ignore during the search.",
                "name": "entitiesToDiscard"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then only entities that are \r    <code>{@link Entities.EntityProperties|visible}<code> are searched.",
                "name": "visibleOnly"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> then only entities that are not \r    <code>{@link Entities.EntityProperties|collisionless}</code> are searched.",
                "name": "collideableOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.RayToEntityIntersectionResult"
                    ]
                },
                "description": "The result of the search for the first intersected entity."
            }
        ],
        "examples": [
            "<caption>Find the entity directly in front of your avatar.</caption>\rvar pickRay = {\r    origin: MyAvatar.position,\r    direction: Quat.getFront(MyAvatar.orientation)\r};\r\rvar intersection = Entities.findRayIntersection(pickRay, true);\rif (intersection.intersects) {\r    print(\"Entity in front of avatar: \" + intersection.entityID);\r} else {\r    print(\"No entity in front of avatar.\");\r}"
        ],
        "memberof": "Entities",
        "longname": "Entities.findRayIntersection",
        "scope": "static"
    },
    {
        "description": "Find the first entity intersected by a {@link PickRay}. <code>Light</code> and <code>Zone</code> entities are not \rintersected unless they've been configured as pickable using {@link Entities.setLightsArePickable|setLightsArePickable} \rand {@link Entities.setZonesArePickable|setZonesArePickable}, respectively.<br />\rThis is a synonym for {@link Entities.findRayIntersection|findRayIntersection}.",
        "kind": "function",
        "name": "findRayIntersectionBlocking",
        "params": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The PickRay to use for finding entities.",
                "name": "pickRay"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> and the intersected entity is a <code>Model</code>\r    entity, the result's <code>extraInfo</code> property includes more information than it otherwise would.",
                "name": "precisionPicking"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "If not empty then the search is restricted to these entities.",
                "name": "entitiesToInclude"
            },
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "Entities to ignore during the search.",
                "name": "entitiesToDiscard"
            }
        ],
        "deprecated": "This function is deprecated and will soon be removed. Use \r   {@link Entities.findRayIntersection|findRayIntersection} instead; it blocks and performs the same function.",
        "memberof": "Entities",
        "longname": "Entities.findRayIntersectionBlocking",
        "scope": "static"
    },
    {
        "description": "Reloads an entity's server entity script such that the latest version re-downloaded.",
        "kind": "function",
        "name": "reloadServerScripts",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to reload the server entity script of.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the reload request was successfully sent to the server, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.reloadServerScripts",
        "scope": "static"
    },
    {
        "description": "Gets the status of server entity script attached to an entity",
        "kind": "function",
        "name": "getServerScriptStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the server entity script status for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities~getServerScriptStatusCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> always."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getServerScriptStatus",
        "scope": "static"
    },
    {
        "description": "Called when {@link Entities.getServerScriptStatus} is complete.",
        "kind": "typedef",
        "name": "getServerScriptStatusCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the server entity script status could be obtained, otherwise \r    <code>false</code>.",
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there is a server entity script running, otherwise <code>false</code>.",
                "name": "isRunning"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"running\"</code> if there is a server entity script running, otherwise an error string.",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"\"</code> if there is a server entity script running, otherwise it may contain extra \r    information on the error.",
                "name": "errorInfo"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities~getServerScriptStatusCallback",
        "scope": "inner"
    },
    {
        "description": "Get metadata for certain entity properties such as <code>script</code> and <code>serverScripts</code>.",
        "kind": "function",
        "name": "queryPropertyMetadata",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the metadata for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The property name to get the metadata for.",
                "name": "property"
            },
            {
                "type": {
                    "names": [
                        "Entities~queryPropertyMetadataCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the request for metadata was successfully sent to the server, otherwise \r    <code>false</code>."
            }
        ],
        "exceptions": [
            {
                "description": "Throws an error if <code>property</code> is not handled yet or <code>callback</code> is not a function."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.queryPropertyMetadata",
        "scope": "static"
    },
    {
        "description": "Get metadata for certain entity properties such as <code>script</code> and <code>serverScripts</code>.",
        "kind": "function",
        "name": "queryPropertyMetadata",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the metadata for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The property name to get the metadata for.",
                "name": "property"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The \"<code>this</code>\" context that the callback will be executed within.",
                "name": "scope"
            },
            {
                "type": {
                    "names": [
                        "Entities~queryPropertyMetadataCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the request for metadata was successfully sent to the server, otherwise \r    <code>false</code>."
            }
        ],
        "exceptions": [
            {
                "description": "Throws an error if <code>property</code> is not handled yet or <code>callback</code> is not a function."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.queryPropertyMetadata",
        "scope": "static"
    },
    {
        "description": "Called when {@link Entities.queryPropertyMetadata} is complete.",
        "kind": "typedef",
        "name": "queryPropertyMetadataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>undefined</code> if there was no error, otherwise an error message.",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The metadata for the requested entity property if there was no error, otherwise\r    <code>undefined</code>.",
                "name": "result"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities~queryPropertyMetadataCallback",
        "scope": "inner"
    },
    {
        "description": "Set whether or not ray picks intersect the bounding box of {@link Entities.EntityType|Light} entities. By default, Light \rentities are not intersected. The setting lasts for the Interface session. Ray picks are done using \r    {@link Entities.findRayIntersection|findRayIntersection} or \r    {@link Entities.findRayIntersectionBlocking|findRayIntersectionBlocking}, or the {@link Picks} and {@link RayPick} \r    APIs.",
        "kind": "function",
        "name": "setLightsArePickable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set <code>true</code> to make ray picks intersect the bounding box of \r    {@link Entities.EntityType|Light} entities, otherwise <code>false</code>.",
                "name": "value"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLightsArePickable",
        "scope": "static"
    },
    {
        "description": "Get whether or not ray picks intersect the bounding box of {@link Entities.EntityType|Light} entities. Ray picks are \r    done using {@link Entities.findRayIntersection|findRayIntersection} or \r    {@link Entities.findRayIntersectionBlocking|findRayIntersectionBlocking}, or the {@link Picks} and {@link RayPick} \r    APIs.",
        "kind": "function",
        "name": "getLightsArePickable",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if ray picks intersect the bounding box of {@link Entities.EntityType|Light} \r    entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLightsArePickable",
        "scope": "static"
    },
    {
        "description": "Set whether or not ray picks intersect the bounding box of {@link Entities.EntityType|Zone} entities. By default, Light \rentities are not intersected. The setting lasts for the Interface session. Ray picks are done using \r    {@link Entities.findRayIntersection|findRayIntersection} or \r    {@link Entities.findRayIntersectionBlocking|findRayIntersectionBlocking}, or the {@link Picks} and {@link RayPick} \r    APIs.",
        "kind": "function",
        "name": "setZonesArePickable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set <code>true</code> to make ray picks intersect the bounding box of \r    {@link Entities.EntityType|Zone} entities, otherwise <code>false</code>.",
                "name": "value"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setZonesArePickable",
        "scope": "static"
    },
    {
        "description": "Get whether or not ray picks intersect the bounding box of {@link Entities.EntityType|Zone} entities. Ray picks are \r    done using {@link Entities.findRayIntersection|findRayIntersection} or \r    {@link Entities.findRayIntersectionBlocking|findRayIntersectionBlocking}, or the {@link Picks} and {@link RayPick} \r    APIs.",
        "kind": "function",
        "name": "getZonesArePickable",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if ray picks intersect the bounding box of {@link Entities.EntityType|Zone} \r     entities, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getZonesArePickable",
        "scope": "static"
    },
    {
        "description": "Set whether or not {@link Entities.EntityType|Zone} entities' boundaries should be drawn. <em>Currently not used.</em>",
        "kind": "function",
        "name": "setDrawZoneBoundaries",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Set to <code>true</code> if {@link Entities.EntityType|Zone} entities' boundaries should be \r    drawn, otherwise <code>false</code>.",
                "name": "value"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setDrawZoneBoundaries",
        "scope": "static"
    },
    {
        "description": "Get whether or not {@link Entities.EntityType|Zone} entities' boundaries should be drawn. <em>Currently not used.</em>",
        "kind": "function",
        "name": "getDrawZoneBoundaries",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if {@link Entities.EntityType|Zone} entities' boundaries should be drawn, \r   otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getDrawZoneBoundaries",
        "scope": "static"
    },
    {
        "description": "Set the values of all voxels in a spherical portion of a {@link Entities.EntityType|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxelSphere",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the sphere of voxels to set, in world coordinates.",
                "name": "center"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the sphere of voxels to set, in world coordinates.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox sphere.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: position,\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 32, y: 32, z: 32 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setVoxelSphere(polyVox, position, 0.9, 255);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxelSphere",
        "scope": "static"
    },
    {
        "description": "Set the values of all voxels in a capsule-shaped portion of a {@link Entities.EntityType|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxelCapsule",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the sphere of voxels to set, in world coordinates.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The center of the sphere of voxels to set, in world coordinates.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of the capsule cylinder and spherical ends, in world coordinates.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox capsule shape.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 }));\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: position,\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 32, y: 32, z: 32 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar startPosition = Vec3.sum({ x: -0.5, y: 0, z: 0 }, position);\rvar endPosition = Vec3.sum({ x: 0.5, y: 0, z: 0 }, position);\rEntities.setVoxelCapsule(polyVox, startPosition, endPosition, 0.5, 255);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxelCapsule",
        "scope": "static"
    },
    {
        "description": "Set the value of a particular voxels in a {@link Entities.EntityType|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxel",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position relative to the minimum axes values corner of the entity. The \r    <code>position</code> coordinates are rounded to the nearest integer to get the voxel coordinate. The minimum axes \r    corner voxel is <code>{ x: 0, y: 0, z: 0 }</code>.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then voxel is cleared, otherwise the voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a cube PolyVox entity and clear the minimum axes corner voxel.</caption>\rvar entity = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(entity, 1);\rEntities.setVoxel(entity, { x: 0, y: 0, z: 0 }, 0);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxel",
        "scope": "static"
    },
    {
        "description": "Set the values of all voxels in a {@link Entities.EntityType|PolyVox} entity.",
        "kind": "function",
        "name": "setAllVoxels",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox cube.</caption>\rvar entity = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(entity, 1);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setAllVoxels",
        "scope": "static"
    },
    {
        "description": "Set the values of all voxels in a cubic portion of a {@link Entities.EntityType|PolyVox} entity.",
        "kind": "function",
        "name": "setVoxelsInCuboid",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the minimum axes value corner of the cube of voxels to set, in voxel \r    coordinates.",
                "name": "lowPosition"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The size of the cube of voxels to set, in voxel coordinates.",
                "name": "cuboidSize"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "If <code>value % 256 == 0</code> then each voxel is cleared, otherwise each voxel is set.",
                "name": "value"
            }
        ],
        "examples": [
            "<caption>Create a PolyVox cube and clear the voxels in one corner.</caption>\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(polyVox, 1);\rvar cuboidPosition = { x: 12, y: 12, z: 12 };\rvar cuboidSize = { x: 4, y: 4, z: 4 };\rEntities.setVoxelsInCuboid(polyVox, cuboidPosition, cuboidSize, 0);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setVoxelsInCuboid",
        "scope": "static"
    },
    {
        "description": "Convert voxel coordinates in a {@link Entities.EntityType|PolyVox} entity to world coordinates. Voxel coordinates are \rrelative to the minimum axes values corner of the entity with a scale of <code>Vec3.ONE</code> being the dimensions of \reach voxel.",
        "kind": "function",
        "name": "voxelCoordsToWorldCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates. May be fractional and outside the entity's bounding box.",
                "name": "voxelCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world coordinates of the <code>voxelCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityType|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Create a PolyVox cube with the 0,0,0 voxel replaced by a sphere.</caption>\r// Cube PolyVox with 0,0,0 voxel missing.\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rEntities.setAllVoxels(polyVox, 1);\rEntities.setVoxel(polyVox, { x: 0, y: 0, z: 0 }, 0);\r\r// Red sphere in 0,0,0 corner position.\rvar cornerPosition = Entities.voxelCoordsToWorldCoords(polyVox, { x: 0, y: 0, z: 0 });\rvar voxelDimensions = Vec3.multiply(2 / 16, Vec3.ONE);\rvar sphere = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(cornerPosition, Vec3.multiply(0.5, voxelDimensions)),\r    dimensions: voxelDimensions,\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.voxelCoordsToWorldCoords",
        "scope": "static"
    },
    {
        "description": "Convert world coordinates to voxel coordinates in a {@link Entities.EntityType|PolyVox} entity. Voxel coordinates are \rrelative to the minimum axes values corner of the entity, with a scale of <code>Vec3.ONE</code> being the dimensions of \reach voxel.",
        "kind": "function",
        "name": "worldCoordsToVoxelCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The world coordinates. May be outside the entity's bounding box.",
                "name": "worldCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates of the <code>worldCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityType|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}. The value may be fractional."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.worldCoordsToVoxelCoords",
        "scope": "static"
    },
    {
        "description": "Convert voxel coordinates in a {@link Entities.EntityType|PolyVox} entity to local coordinates relative to the minimum \raxes value corner of the entity, with the scale being the same as world coordinates.",
        "kind": "function",
        "name": "voxelCoordsToLocalCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates. May be fractional and outside the entity's bounding box.",
                "name": "voxelCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local coordinates of the <code>voxelCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityType|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}."
            }
        ],
        "examples": [
            "<caption>Get the world dimensions of a voxel in a PolyVox entity.</caption>\rvar polyVox = Entities.addEntity({\r    type: \"PolyVox\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.5, z: -8 })),\r    dimensions: { x: 2, y: 2, z: 2 },\r    voxelVolumeSize: { x: 16, y: 16, z: 16 },\r    lifetime: 300  // Delete after 5 minutes.\r});\rvar voxelDimensions = Entities.voxelCoordsToLocalCoords(polyVox, Vec3.ONE);\rprint(\"Voxel dimensions: \" + JSON.stringify(voxelDimensions));"
        ],
        "memberof": "Entities",
        "longname": "Entities.voxelCoordsToLocalCoords",
        "scope": "static"
    },
    {
        "description": "Convert local coordinates to voxel coordinates in a {@link Entities.EntityType|PolyVox} entity. Local coordinates are \rrelative to the minimum axes value corner of the entity, with the scale being the same as world coordinates.",
        "kind": "function",
        "name": "localCoordsToVoxelCoords",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|PolyVox} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local coordinates. May be outside the entity's bounding box.",
                "name": "localCoords"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The voxel coordinates of the <code>worldCoords</code> if the <code>entityID</code> is a \r    {@link Entities.EntityType|PolyVox} entity, otherwise {@link Vec3(0)|Vec3.ZERO}. The value may be fractional."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.localCoordsToVoxelCoords",
        "scope": "static"
    },
    {
        "description": "Set the <code>linePoints</code> property of a {@link Entities.EntityType|Line} entity.",
        "kind": "function",
        "name": "setAllPoints",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|Line} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The array of points to set the entity's <code>linePoints</code> property to.",
                "name": "points"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity's property was updated, otherwise <code>false</code>. The property \r    may fail to be updated if the entity does not exist, the entity is not a {@link Entities.EntityType|Line} entity, \r    one of the points is outside the entity's dimensions, or the number of points is greater than the maximum allowed."
            }
        ],
        "examples": [
            "<caption>Change the shape of a Line entity.</caption>\r// Draw a horizontal line between two points.\rvar entity = Entities.addEntity({\r    type: \"Line\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 1 },\r    linePoints: [\r        { x: -1, y: 0, z: 0 },\r        { x:1, y: -0, z: 0 }\r    ],\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Change the line to be a \"V\".\rScript.setTimeout(function () {\r    Entities.setAllPoints(entity, [\r        { x: -1, y: 1, z: 0 },\r        { x: 0, y: -1, z: 0 },\r        { x: 1, y: 1, z: 0 },\r    ]);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setAllPoints",
        "scope": "static"
    },
    {
        "description": "Append a point to a {@link Entities.EntityType|Line} entity.",
        "kind": "function",
        "name": "appendPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|Line} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to add to the line. The coordinates are relative to the entity's position.",
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the point was added to the line, otherwise <code>false</code>. The point may \r    fail to be added if the entity does not exist, the entity is not a {@link Entities.EntityType|Line} entity, the \r    point is outside the entity's dimensions, or the maximum number of points has been reached."
            }
        ],
        "examples": [
            "<caption>Append a point to a Line entity.</caption>\r// Draw a line between two points.\rvar entity = Entities.addEntity({\r    type: \"Line\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    rotation: MyAvatar.orientation,\r    dimensions: { x: 2, y: 2, z: 1 },\r    linePoints: [\r        { x: -1, y: 1, z: 0 },\r        { x: 0, y: -1, z: 0 }\r    ],\r    color: { red: 255, green: 0, blue: 0 },\r    lifetime: 300  // Delete after 5 minutes.\r});\r\r// Add a third point to create a \"V\".\rEntities.appendPoint(entity, { x: 1, y: 1, z: 0 });"
        ],
        "memberof": "Entities",
        "longname": "Entities.appendPoint",
        "scope": "static"
    },
    {
        "description": "Dumps debug information about all entities in Interface's local in-memory tree of entities it knows about &mdash; domain\rand client-only &mdash; to the program log.",
        "kind": "function",
        "name": "dumpTree",
        "memberof": "Entities",
        "longname": "Entities.dumpTree",
        "scope": "static"
    },
    {
        "description": "Add an action to an entity. An action is registered with the physics engine and is applied every physics simulation \rstep. Any entity may have more than one action associated with it, but only as many as will fit in an entity's \r<code>actionData</code> property.",
        "kind": "function",
        "name": "addAction",
        "params": [
            {
                "type": {
                    "names": [
                        "Entities.ActionType"
                    ]
                },
                "description": "The type of action.",
                "name": "actionType"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to add the action to.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities.ActionArguments"
                    ]
                },
                "description": "Configure the action.",
                "name": "arguments"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action added if successfully added, otherwise <code>null</code>."
            }
        ],
        "examples": [
            "<caption>Constrain a cube to move along a vertical line.</caption>\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0.75, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    dynamic: true,\r    collisionless: false,\r    userData: \"{ \\\"grabbableKey\\\": { \\\"grabbable\\\": true, \\\"kinematic\\\": false } }\",\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar actionID = Entities.addAction(\"slider\", entityID, {\r    axis: { x: 0, y: 1, z: 0 },\r    linearLow: 0,\r    linearHigh: 0.6\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.addAction",
        "scope": "static"
    },
    {
        "description": "Update an entity action.",
        "kind": "function",
        "name": "updateAction",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity with the action to update.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action to update.",
                "name": "actionID"
            },
            {
                "type": {
                    "names": [
                        "Entities.ActionArguments"
                    ]
                },
                "description": "The arguments to update.",
                "name": "arguments"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the update was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.updateAction",
        "scope": "static"
    },
    {
        "description": "Delete an action from an entity.",
        "kind": "function",
        "name": "deleteAction",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of entity to delete the action from.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action to delete.",
                "name": "actionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the update was successful, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.deleteAction",
        "scope": "static"
    },
    {
        "description": "Get the IDs of the actions that  are associated with an entity.",
        "kind": "function",
        "name": "getActionIDs",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The entity to get the action IDs for.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of action IDs if any are found, otherwise an empty array."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getActionIDs",
        "scope": "static"
    },
    {
        "description": "Get the arguments of an action.",
        "kind": "function",
        "name": "getActionArguments",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity with the action.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the action to get the arguments of.",
                "name": "actionID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Entities.ActionArguments"
                    ]
                },
                "description": "The arguments of the requested action if found, otherwise an empty object."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getActionArguments",
        "scope": "static"
    },
    {
        "description": "Get the translation of a joint in a {@link Entities.EntityType|Model} entity relative to the entity's position and \rorientation.",
        "kind": "function",
        "name": "getAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to the entity's position and orientation if the entity is a\r    {@link Entities.EntityType|Model} entity, the entity is loaded, and the joint index is valid; otherwise \r    <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Get the translation of a joint in a {@link Entities.EntityType|Model} entity relative to the entity's position and \rorientation.",
        "kind": "function",
        "name": "getAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to the entity's orientation if the entity is a\r    {@link Entities.EntityType|Model} entity, the entity is loaded, and the joint index is valid; otherwise \r    <code>{@link Quat(0)|Quat.IDENTITY}</code>."
            }
        ],
        "examples": [
            "<caption>Compare the local and absolute rotations of an avatar model's left hand joint.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"LeftHand\");\r    var localRotation = Entities.getLocalJointRotation(entityID, index);\r    var absoluteRotation = Entities.getAbsoluteJointRotationInObjectFrame(entityID, index);\r    print(\"Left hand local rotation: \" + JSON.stringify(Quat.safeEulerAngles(localRotation)));\r    print(\"Left hand absolute rotation: \" + JSON.stringify(Quat.safeEulerAngles(absoluteRotation)));\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Set the translation of a joint in a {@link Entities.EntityType|Model} entity relative to the entity's position and \rorientation.",
        "kind": "function",
        "name": "setAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation to set the joint to relative to the entity's position and orientation.",
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code>if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded, \r    the joint index is valid, and the translation is different to the joint's current translation; otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Set the rotation of a joint in a {@link Entities.EntityType|Model} entity relative to the entity's position and \rorientation.",
        "kind": "function",
        "name": "setAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation to set the joint to relative to the entity's orientation.",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded, \r    the joint index is valid, and the rotation is different to the joint's current rotation; otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Raise an avatar model's left palm.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"LeftHand\");\r    var absoluteRotation = Entities.getAbsoluteJointRotationInObjectFrame(entityID, index);\r    absoluteRotation = Quat.multiply(Quat.fromPitchYawRollDegrees(0, 0, 90), absoluteRotation);\r    var success = Entities.setAbsoluteJointRotationInObjectFrame(entityID, index, absoluteRotation);\r    print(\"Success: \" + success);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "description": "Get the local translation of a joint in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "getLocalJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local translation of the joint if the entity is a {@link Entities.EntityType|Model} entity, the \r    entity is loaded, and the joint index is valid; otherwise <code>{@link Vec3(0)|Vec3.ZERO}</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLocalJointTranslation",
        "scope": "static"
    },
    {
        "description": "Get the local rotation of a joint in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "getLocalJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The local rotation of the joint if the entity is a {@link Entities.EntityType|Model} entity, the entity \r    is loaded, and the joint index is valid; otherwise <code>{@link Quat(0)|Quat.IDENTITY}</code>."
            }
        ],
        "examples": [
            "<caption>Report the local rotation of an avatar model's head joint.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"Head\");\r    var rotation = Entities.getLocalJointRotation(entityID,  index);\r    print(\"Head local rotation: \" + JSON.stringify(Quat.safeEulerAngles(rotation)));\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getLocalJointRotation",
        "scope": "static"
    },
    {
        "description": "Set the local translation of a joint in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "setLocalJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The local translation to set the joint to.",
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code>if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded, \r    the joint index is valid, and the translation is different to the joint's current translation; otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointTranslation",
        "scope": "static"
    },
    {
        "description": "Set the local rotation of a joint in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "setLocalJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint.",
                "name": "jointIndex"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The local rotation to set the joint to.",
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded, \r    the joint index is valid, and the rotation is different to the joint's current rotation; otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Make an avatar model turn its head left.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"Head\");\r    var rotation = Quat.fromPitchYawRollDegrees(0, 60, 0);\r    var success = Entities.setLocalJointRotation(entityID, index, rotation);\r    print(\"Success: \" + success);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointRotation",
        "scope": "static"
    },
    {
        "description": "Set the local translations of joints in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "setLocalJointTranslations",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The local translations to set the joints to.",
                "name": "translations"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code>if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded, \r    the model has joints, and at least one of the translations is different to the model's current translations; \r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointTranslations",
        "scope": "static"
    },
    {
        "description": "Set the local rotations of joints in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "setLocalJointRotations",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The local rotations to set the joints to.",
                "name": "rotations"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded, \r    the model has joints, and at least one of the rotations is different to the model's current rotations; otherwise \r    <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Raise both palms of an avatar model.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r\r    // Get all the joint rotations.\r    var jointNames = Entities.getJointNames(entityID);\r    var jointRotations = [];\r    for (var i = 0, length = jointNames.length; i < length; i++) {\r        var index = Entities.getJointIndex(entityID, jointNames[i]);\r        jointRotations.push(Entities.getLocalJointRotation(entityID, index));\r    }\r\r    // Raise both palms.\r    var index = jointNames.indexOf(\"LeftHand\");\r    jointRotations[index] = Quat.multiply(Quat.fromPitchYawRollDegrees(-90, 0, 0), jointRotations[index]);\r    index = jointNames.indexOf(\"RightHand\");\r    jointRotations[index] = Quat.multiply(Quat.fromPitchYawRollDegrees(-90, 0, 0), jointRotations[index]);\r\r    // Update all the joint rotations.\r    var success = Entities.setLocalJointRotations(entityID, jointRotations);\r    print(\"Success: \" + success);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointRotations",
        "scope": "static"
    },
    {
        "description": "Set the local rotations and translations of joints in a {@link Entities.EntityType|Model} entity. This is the same as \rcalling both {@link Entities.setLocalJointRotations|setLocalJointRotations} and \r{@link Entities.setLocalJointTranslations|setLocalJointTranslations} at the same time.",
        "kind": "function",
        "name": "setLocalJointsData",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The local rotations to set the joints to.",
                "name": "rotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "The local translations to set the joints to.",
                "name": "translations"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity is a {@link Entities.EntityType|Model} entity, the entity is loaded,\r    the model has joints, and at least one of the rotations or translations is different to the model's current values; \r    otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setLocalJointsData",
        "scope": "static"
    },
    {
        "description": "Get the index of a named joint in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "getJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The integer index of the joint if the entity is a {@link Entities.EntityType|Model} entity, the entity \r    is loaded, and the joint is present; otherwise <code>-1</code>. The joint indexes are in order per \r    {@link Entities.getJointNames|getJointNames}."
            }
        ],
        "examples": [
            "<caption>Report the index of a model's head joint.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var index = Entities.getJointIndex(entityID, \"Head\");\r    print(\"Head joint index: \" + index);\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getJointIndex",
        "scope": "static"
    },
    {
        "description": "Get the names of all the joints in a {@link Entities.EntityType|Model} entity.",
        "kind": "function",
        "name": "getJointNames",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|Model} entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The names of all the joints in the entity if it is a {@link Entities.EntityType|Model} entity and \r    is loaded, otherwise an empty array. The joint names are in order per {@link Entities.getJointIndex|getJointIndex}."
            }
        ],
        "examples": [
            "<caption>Report a model's joint names.</caption>\rentityID = Entities.addEntity({\r    type: \"Model\",\r    modelURL: \"https://hifi-content.s3.amazonaws.com/milad/production/Examples/Models/Avatars/blue_suited.fbx\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    rotation: MyAvatar.orientation,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rScript.setTimeout(function () {\r    // Joint data aren't available until after the model has loaded.\r    var jointNames = Entities.getJointNames(entityID);\r    print(\"Joint names: \" + JSON.stringify(jointNames));\r}, 2000);"
        ],
        "memberof": "Entities",
        "longname": "Entities.getJointNames",
        "scope": "static"
    },
    {
        "description": "Get the IDs of entities, overlays, and avatars that are directly parented to an entity, overlay, or avatar model. Recurse on the IDs returned by the function to get all descendants of an entity, overlay, or avatar.",
        "kind": "function",
        "name": "getChildrenIDs",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity, overlay, or avatar to get the children IDs of.",
                "name": "parentID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity, overlay, and avatar IDs that are parented directly to the <code>parentID</code> \r    entity, overlay, or avatar. Does not include children's children, etc. The array is empty if no children can be found or \r    <code>parentID</code> cannot be found."
            }
        ],
        "examples": [
            "<caption>Report the children of an entity.</caption>\rfunction createEntity(description, position, parent) {\r    var entity = Entities.addEntity({\r        type: \"Sphere\",\r        position: position,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    print(description + \": \" + entity);\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\rvar root = createEntity(\"Root\", position, Uuid.NULL);\rvar child = createEntity(\"Child\", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);\rvar grandChild = createEntity(\"Grandchild\", Vec3.sum(position, { x: 0, y: -2, z: 0 }), child);\r\rvar children = Entities.getChildrenIDs(root);\rprint(\"Children of root: \" + JSON.stringify(children));  // Only the child entity."
        ],
        "memberof": "Entities",
        "longname": "Entities.getChildrenIDs",
        "scope": "static"
    },
    {
        "description": "Get the IDs of entities, overlays, and avatars that are directly parented to an entity, overlay, or avatar model's joint.",
        "kind": "function",
        "name": "getChildrenIDsOfJoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity, overlay, or avatar to get the children IDs of.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of the model joint to get the children IDs of.",
                "name": "jointIndex"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                },
                "description": "An array of entity, overlay, and avatar IDs that are parented directly to the <code>parentID</code> \r    entity, overlay, or avatar at the <code>jointIndex</code> joint. Does not include children's children, etc. The \r    array is empty if no children can be found or <code>parentID</code> cannot be found."
            }
        ],
        "examples": [
            "<caption>Report the children of your avatar's right hand.</caption>\rfunction createEntity(description, position, parent) {\r    var entity = Entities.addEntity({\r        type: \"Sphere\",\r        position: position,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    print(description + \": \" + entity);\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\rvar root = createEntity(\"Root\", position, Uuid.NULL);\rvar child = createEntity(\"Child\", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);\r\rEntities.editEntity(root, {\r    parentID: MyAvatar.sessionUUID,\r    parentJointIndex: MyAvatar.getJointIndex(\"RightHand\")\r});\r\rvar children = Entities.getChildrenIDsOfJoint(MyAvatar.sessionUUID, MyAvatar.getJointIndex(\"RightHand\"));\rprint(\"Children of hand: \" + JSON.stringify(children));  // Only the root entity."
        ],
        "memberof": "Entities",
        "longname": "Entities.getChildrenIDsOfJoint",
        "scope": "static"
    },
    {
        "description": "Check whether an entity or overlay has an entity as an ancestor (parent, parent's parent, etc.).",
        "kind": "function",
        "name": "isChildOfParent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the child entity or overlay to test for being a child, grandchild, etc.",
                "name": "childID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the parent entity to test for being a parent, grandparent, etc.",
                "name": "parentID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>childID</code> entity or overlay has the <code>parentID</code> entity \r    as a parent or grandparent etc., otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Check that a grandchild entity is a child of its grandparent.</caption>\rfunction createEntity(description, position, parent) {\r    var entity = Entities.addEntity({\r        type: \"Sphere\",\r        position: position,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    print(description + \": \" + entity);\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\rvar root = createEntity(\"Root\", position, Uuid.NULL);\rvar child = createEntity(\"Child\", Vec3.sum(position, { x: 0, y: -1, z: 0 }), root);\rvar grandChild = createEntity(\"Grandchild\", Vec3.sum(position, { x: 0, y: -2, z: 0 }), child);\r\rprint(\"grandChild has root as parent: \" + Entities.isChildOfParent(grandChild, root));  // true"
        ],
        "memberof": "Entities",
        "longname": "Entities.isChildOfParent",
        "scope": "static"
    },
    {
        "description": "Get the type &mdash; entity, overlay, or avatar &mdash; of an in-world item.",
        "kind": "function",
        "name": "getNestableType",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the item to get the type of.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of the item: <code>\"entity\"</code> if the item is an entity, <code>\"overlay\"</code> if the \r   the item is an overlay, <code>\"avatar\"</code> if the item is an avatar; otherwise <code>\"unknown\"</code> if the item \r   cannot be found."
            }
        ],
        "examples": [
            "<caption>Print some nestable types.</caption>\rvar entity = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -2 })),\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rprint(Entities.getNestableType(entity));  // \"entity\"\rprint(Entities.getNestableType(Uuid.generate()));  // \"unknown\""
        ],
        "memberof": "Entities",
        "longname": "Entities.getNestableType",
        "scope": "static"
    },
    {
        "description": "Get the ID of the {@link Entities.EntityType|Web} entity that has keyboard focus.",
        "kind": "function",
        "name": "getKeyboardFocusEntity",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|Web} entity that has focus, if any, otherwise <code>null</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getKeyboardFocusEntity",
        "scope": "static"
    },
    {
        "description": "Set the {@link Entities.EntityType|Web} entity that has keyboard focus.",
        "kind": "function",
        "name": "setKeyboardFocusEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|Web} entity to set keyboard focus to. Use \r    <code>null</code> or {@link Uuid|Uuid.NULL} to unset keyboard focus from an entity.",
                "name": "entityID"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setKeyboardFocusEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.mousePressOnEntity|mousePressOnEntity} event.",
        "kind": "function",
        "name": "sendMousePressOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendMousePressOnEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.mouseMoveOnEntity|mouseMoveOnEntity} event.",
        "kind": "function",
        "name": "sendMouseMoveOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendMouseMoveOnEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.mouseReleaseOnEntity|mouseReleaseOnEntity} event.",
        "kind": "function",
        "name": "sendMouseReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendMouseReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.clickDownOnEntity|clickDownOnEntity} event.",
        "kind": "function",
        "name": "sendClickDownOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendClickDownOnEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.holdingClickOnEntity|holdingClickOnEntity} event.",
        "kind": "function",
        "name": "sendHoldingClickOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoldingClickOnEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.clickReleaseOnEntity|clickReleaseOnEntity} event.",
        "kind": "function",
        "name": "sendClickReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendClickReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.hoverEnterEntity|hoverEnterEntity} event.",
        "kind": "function",
        "name": "sendHoverEnterEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoverEnterEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.hoverOverEntity|hoverOverEntity} event.",
        "kind": "function",
        "name": "sendHoverOverEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoverOverEntity",
        "scope": "static"
    },
    {
        "description": "Emit a {@link Entities.hoverLeaveEntity|hoverLeaveEntity} event.",
        "kind": "function",
        "name": "sendHoverLeaveEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to emit the event for.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "The event details.",
                "name": "event"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.sendHoverLeaveEntity",
        "scope": "static"
    },
    {
        "description": "Check whether an entity wants hand controller pointer events. For example, a {@link Entities.EntityType|Web} entity does \rbut a {@link Entities.EntityType|Shape} entity doesn't.",
        "kind": "function",
        "name": "wantsHandControllerPointerEvents",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity can be found and it wants hand controller pointer events, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.wantsHandControllerPointerEvents",
        "scope": "static"
    },
    {
        "description": "Send a script event over a {@link Entities.EntityType|Web} entity's <code>EventBridge</code> to the Web page's scripts.",
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the {@link Entities.EntityType|Web} entity.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to send.",
                "name": "message"
            }
        ],
        "todo": [
            "<em>This function is currently not implemented.</em>"
        ],
        "memberof": "Entities",
        "longname": "Entities.emitScriptEvent",
        "scope": "static"
    },
    {
        "description": "Check whether an axis-aligned box and a capsule intersect.",
        "kind": "function",
        "name": "AABoxIntersectsCapsule",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The bottom right near (minimum axes values) corner of the AA box.",
                "name": "brn"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The dimensions of the AA box.",
                "name": "dimensions"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "One end of the capsule.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The other end of the capsule.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radiues of the capsule.",
                "name": "radius"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the AA box and capsule intersect, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.AABoxIntersectsCapsule",
        "scope": "static"
    },
    {
        "description": "Get the meshes in a {@link Entities.EntityType|Model} or {@link Entities.EntityType|PolyVox} entity.",
        "kind": "function",
        "name": "getMeshes",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the <code>Model</code> or <code>PolyVox</code> entity to get the meshes of.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "Entities~getMeshesCallback"
                    ]
                },
                "description": "The function to call upon completion.",
                "name": "callback"
            }
        ],
        "deprecated": "Use the {@link Graphics} API instead.",
        "memberof": "Entities",
        "longname": "Entities.getMeshes",
        "scope": "static"
    },
    {
        "description": "Called when {@link Entities.getMeshes} is complete.",
        "kind": "typedef",
        "name": "getMeshesCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<MeshProxy>"
                    ]
                },
                "description": "If <code>success<</code> is <code>true</code>, a {@link MeshProxy} per mesh in the \r    <code>Model</code> or <code>PolyVox</code> entity; otherwise <code>undefined</code>.",
                "name": "meshes"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the {@link Entities.getMeshes} call was successful, <code>false</code> \r    otherwise. The call may be unsuccessful if the requested entity could not be found.",
                "name": "success"
            }
        ],
        "deprecated": "Use the {@link Graphics} API instead.",
        "memberof": "Entities",
        "longname": "Entities~getMeshesCallback",
        "scope": "inner"
    },
    {
        "description": "Get the object to world transform, excluding scale, of an entity.",
        "kind": "function",
        "name": "getEntityTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The entity's object to world transform excluding scale (i.e., translation and rotation, with scale of 1) \r   if the entity can be found, otherwise a transform with zero translation and rotation and a scale of 1."
            }
        ],
        "examples": [
            "<caption>Position and rotation in an entity's world transform.</caption>\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 1, z: -2 }));\rvar orientation = MyAvatar.orientation;\rprint(\"Position: \" + JSON.stringify(position));\rprint(\"Orientation: \" + JSON.stringify(orientation));\r\rvar entityID = Entities.addEntity({\r    type: \"Sphere\",\r    position: position,\r    rotation: orientation,\r    dimensions: Vec3.HALF,\r    lifetime: 300  // Delete after 5 minutes.\r});\r\rvar transform = Entities.getEntityTransform(entityID);\rprint(\"Transform: \" + JSON.stringify(transform));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(transform)));  // Same as position.\rprint(\"Rotation: \" + JSON.stringify(Mat4.extractRotation(transform)));  // Same as orientation.\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(transform)));  // { x: 1, y: 1, z: 1 }"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityTransform",
        "scope": "static"
    },
    {
        "description": "Get the object to parent transform, excluding scale, of an entity.",
        "kind": "function",
        "name": "getEntityLocalTransform",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The entity's object to parent transform excluding scale (i.e., translation and rotation, with scale of \r    1) if the entity can be found, otherwise a transform with zero translation and rotation and a scale of 1."
            }
        ],
        "examples": [
            "<caption>Position and rotation in an entity's local transform.</caption>\rfunction createEntity(position, rotation, parent) {\r    var entity = Entities.addEntity({\r        type: \"Box\",\r        position: position,\r        rotation: rotation,\r        dimensions: Vec3.HALF,\r        parentID: parent,\r        lifetime: 300  // Delete after 5 minutes.\r    });\r    return entity;\r}\r\rvar position = Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 2, z: -5 }));\r\rvar parent = createEntity(position, MyAvatar.orientation, Uuid.NULL);\r\rvar childTranslation = { x: 0, y: -1.5, z: 0 };\rvar childRotation = Quat.fromPitchYawRollDegrees(0, 45, 0);\rvar child = createEntity(Vec3.sum(position, childTranslation), Quat.multiply(childRotation, MyAvatar.orientation), parent);\r\rvar transform = Entities.getEntityLocalTransform(child);\rprint(\"Transform: \" + JSON.stringify(transform));\rprint(\"Translation: \" + JSON.stringify(Mat4.extractTranslation(transform)));  // childTranslation\rprint(\"Rotation: \" + JSON.stringify(Quat.safeEulerAngles(Mat4.extractRotation(transform))));  // childRotation\rprint(\"Scale: \" + JSON.stringify(Mat4.extractScale(transform)));  // { x: 1, y: 1, z: 1 }"
        ],
        "memberof": "Entities",
        "longname": "Entities.getEntityLocalTransform",
        "scope": "static"
    },
    {
        "description": "Get the static certificate for an entity. The static certificate contains static properties of the item which cannot \rbe altered.",
        "kind": "function",
        "name": "getStaticCertificateJSON",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to get the static certificate for.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The entity's static certificate as a JSON string if the entity can be found, otherwise an empty string."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getStaticCertificateJSON",
        "scope": "static"
    },
    {
        "description": "Verify the entity's proof of provenance, i.e., that the entity's <code>certificateID</code> property was produced by \rHigh Fidelity signing the entity's static certificate JSON.",
        "kind": "function",
        "name": "verifyStaticCertificateProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity to verify.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the entity can be found an its <code>certificateID</code> property is present \r    and its value matches the entity's static certificate JSON; otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.verifyStaticCertificateProperties",
        "scope": "static"
    },
    {
        "description": "Triggered on the client that is the physics simulation owner during the collision of two entities. Note: Isn't triggered \rfor a collision with an avatar.",
        "kind": "function",
        "name": "collisionWithEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of one entity in the collision. For an entity script, this is the ID of the entity containing \r    the script.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the other entity in the collision.",
                "name": "idB"
            },
            {
                "type": {
                    "names": [
                        "Collision"
                    ]
                },
                "description": "The details of the collision.",
                "name": "collision"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Change the color of an entity when it collides with another entity.</caption>\rvar entityScript = (function () {\r    function randomInteger(min, max) {\r        return Math.floor(Math.random() * (max - min + 1)) + min;\r    }\r\r    this.collisionWithEntity = function (myID, otherID, collision) {\r        Entities.editEntity(myID, {\r            color: {\r                red: randomInteger(128, 255),\r                green: randomInteger(128, 255),\r                blue: randomInteger(128, 255)\r            }\r        });\r    };\r});\r\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    color: { red: 128, green: 128, blue: 128 },\r    gravity: { x: 0, y: -9.8, z: 0 },\r    velocity: { x: 0, y: 0.1, z: 0 },  // Kick off physics.\r    dynamic: true,\r    collisionless: false,  // So that collision events are generated.\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.collisionWithEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to change the <code>locked</code> property of entities changes.",
        "kind": "function",
        "name": "canAdjustLocksChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can change the <code>locked</code> property of an \r    entity, otherwise <code>false</code>.",
                "name": "canAdjustLocks"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when your ability to change locks changes.</caption>\rfunction onCanAdjustLocksChanged(canAdjustLocks) {\r    print(\"You can adjust entity locks: \" + canAdjustLocks);\r}\rEntities.canAdjustLocksChanged.connect(onCanAdjustLocksChanged);"
        ],
        "memberof": "Entities",
        "longname": "Entities.canAdjustLocksChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) entities changes.",
        "kind": "function",
        "name": "canRezChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) entities, otherwise <code>false</code>.",
                "name": "canRez"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) temporary entities changes. Temporary entities are entities with a finite\r<code>lifetime</code> property value set.",
        "kind": "function",
        "name": "canRezTmpChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) temporary entities, otherwise \r    <code>false</code>.",
                "name": "canRezTmp"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) certified entities changes. Certified entities are entities that have PoP\rcertificates.",
        "kind": "function",
        "name": "canRezCertifiedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) certified entities, otherwise \r    <code>false</code>.",
                "name": "canRezCertified"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezCertifiedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to rez (create) temporary certified entities changes. Temporary entities are entities with a\rfinite <code>lifetime</code> property value set. Certified entities are entities that have PoP certificates.",
        "kind": "function",
        "name": "canRezTmpCertifiedChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can rez (create) temporary certified entities,\r    otherwise <code>false</code>.",
                "name": "canRezTmpCertified"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canRezTmpCertifiedChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when your ability to make changes to the asset server's assets changes.",
        "kind": "function",
        "name": "canWriteAssetsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the script can change the <code>?</code> property of an entity,\r    otherwise <code>false</code>.",
                "name": "canWriteAssets"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.canWriteAssetsChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is clicked while the mouse cursor is on an entity, or a controller trigger is fully \rpressed while its laser is on an entity.",
        "kind": "function",
        "name": "mousePressOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was pressed.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an entity is clicked with the mouse or laser.</caption>\rfunction onMousePressOnEntity(entityID, event) {\r    print(\"Clicked on entity: \" + entityID);\r}\r\rEntities.mousePressOnEntity.connect(onMousePressOnEntity);"
        ],
        "memberof": "Entities",
        "longname": "Entities.mousePressOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is double-clicked while the mouse cursor is on an entity.",
        "kind": "function",
        "name": "mouseDoublePressOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was double-pressed.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseDoublePressOnEntity",
        "scope": "static"
    },
    {
        "description": "Repeatedly triggered while the mouse cursor or controller laser moves on an entity.",
        "kind": "function",
        "name": "mouseMoveOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was moved on.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseMoveOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is released after clicking on an entity or the controller trigger is partly or fully \rreleased after pressing on an entity, even if the mouse pointer or controller laser has moved off the entity.",
        "kind": "function",
        "name": "mouseReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was originally pressed.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is clicked while the mouse cursor is not on an entity.",
        "kind": "function",
        "name": "mousePressOffEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mousePressOffEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is double-clicked while the mouse cursor is not on an entity.",
        "kind": "function",
        "name": "mouseDoublePressOffEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.mouseDoublePressOffEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is clicked while the mouse cursor is on an entity. Note: Not triggered by controller.",
        "kind": "function",
        "name": "clickDownOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was clicked.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.clickDownOnEntity",
        "scope": "static"
    },
    {
        "description": "Repeatedly triggered while a mouse button continues to be held after clicking an entity, even if the mouse cursor has \rmoved off the entity. Note: Not triggered by controller.",
        "kind": "function",
        "name": "holdingClickOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was originally clicked.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.holdingClickOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when a mouse button is released after clicking on an entity, even if the mouse cursor has moved off the \rentity. Note: Not triggered by controller.",
        "kind": "function",
        "name": "clickReleaseOnEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was originally clicked.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.clickReleaseOnEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse cursor or controller laser starts hovering on an entity.",
        "kind": "function",
        "name": "hoverEnterEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is being hovered.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hoverEnterEntity",
        "scope": "static"
    },
    {
        "description": "Repeatedly triggered when the mouse cursor or controller laser moves while hovering over an entity.",
        "kind": "function",
        "name": "hoverOverEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is being hovered.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hoverOverEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when the mouse cursor or controller laser stops hovering over an entity.",
        "kind": "function",
        "name": "hoverLeaveEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that was being hovered.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "description": "Details of the event.",
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hoverLeaveEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar enters an entity.",
        "kind": "function",
        "name": "enterEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the avatar entered.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Change the color of an entity when an avatar enters or leaves.</caption>\rvar entityScript = (function () {\r    this.enterEntity = function (entityID) {\r        print(\"Enter entity\");\r        Entities.editEntity(entityID, {\r            color: { red: 255, green: 64, blue: 64 },\r        });\r    };\r    this.leaveEntity = function (entityID) {\r        print(\"Leave entity\");\r        Entities.editEntity(entityID, {\r            color: { red: 128, green: 128, blue: 128 },\r        });\r    };\r});\r\rvar entityID = Entities.addEntity({\r    type: \"Sphere\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 3, y: 3, z: 3 },\r    color: { red: 128, green: 128, blue: 128 },\r    collisionless: true,  // So that avatar can walk through entity.\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.enterEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an avatar leaves an entity.",
        "kind": "function",
        "name": "leaveEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the avatar left.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.leaveEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an entity is deleted.",
        "kind": "function",
        "name": "deletingEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity deleted.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an entity is deleted.</caption>\rEntities.deletingEntity.connect(function (entityID) {\r    print(\"Deleted entity: \" + entityID);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.deletingEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when an entity is added to Interface's local in-memory tree of entities it knows about. This may occur when \rentities are loaded upon visiting a domain, when the user rotates their view so that more entities become visible, and \rwhen a domain or client-only entity is added (e.g., by {@Entities.addEntity|addEntity}).",
        "kind": "function",
        "name": "addingEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity added.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when an entity is added.</caption>\rEntities.addingEntity.connect(function (entityID) {\r    print(\"Added entity: \" + entityID);\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.addingEntity",
        "scope": "static"
    },
    {
        "description": "Triggered when you disconnect from a domain, at which time Interface's local in-memory tree of entities it knows about\ris cleared.",
        "kind": "function",
        "name": "clearingEntities",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when Interfaces's entity tree is cleared.</caption>\rEntities.clearingEntities.connect(function () {\r    print(\"Entities cleared\");\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.clearingEntities",
        "scope": "static"
    },
    {
        "description": "Triggered in when a script in a {@link Entities.EntityType|Web} entity's Web page script sends an event over the \rscript's <code>EventBridge</code>.",
        "kind": "function",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that event was received from.",
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.webEventReceived",
        "scope": "static"
    },
    {
        "description": "<p>An entity may be one of the following types:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th><th>Properties</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"Box\"</code></td><td>A rectangular prism. This is a synonym of <code>\"Shape\"</code> for the case \r      where the entity's <code>shape</code> property value is <code>\"Cube\"</code>.<br />\r      If an entity is created with its <code>type</code> \r      set to <code>\"Box\"</code> it will always be created with a <code>shape</code> property value of \r      <code>\"Cube\"</code>. If an entity of type <code>Shape</code> or <code>Sphere</code> has its <code>shape</code> set \r      to <code>\"Cube\"</code> then its <code>type</code> will be reported as <code>\"Box\"</code>.\r      <td>{@link Entities.EntityProperties-Box|EntityProperties-Box}</td></tr>\r    <tr><td><code>\"Light\"</code></td><td>A local lighting effect.</td>\r      <td>{@link Entities.EntityProperties-Light|EntityProperties-Light}</td></tr>\r    <tr><td><code>\"Line\"</code></td><td>A sequence of one or more simple straight lines.</td>\r      <td>{@link Entities.EntityProperties-Line|EntityProperties-Line}</td></tr>\r    <tr><td><code>\"Material\"</code></td><td>Modifies the existing materials on Model entities, Shape entities (albedo \r      only), {@link Overlays.OverlayType|model overlays}, and avatars.</td>\r      <td>{@link Entities.EntityProperties-Material|EntityProperties-Material}</td></tr>\r    <tr><td><code>\"Model\"</code></td><td>A mesh model from an FBX or OBJ file.</td>\r      <td>{@link Entities.EntityProperties-Model|EntityProperties-Model}</td></tr>\r    <tr><td><code>\"ParticleEffect\"</code></td><td>A particle system that can be used to simulate things such as fire, \r      smoke, snow, magic spells, etc.</td>\r      <td>{@link Entities.EntityProperties-ParticleEffect|EntityProperties-ParticleEffect}</td></tr>\r    <tr><td><code>\"PolyLine\"</code></td><td>A sequence of one or more textured straight lines.</td>\r      <td>{@link Entities.EntityProperties-PolyLine|EntityProperties-PolyLine}</td></tr>\r    <tr><td><code>\"PolyVox\"</code></td><td>A set of textured voxels.</td>\r      <td>{@link Entities.EntityProperties-PolyVox|EntityProperties-PolyVox}</td></tr>\r    <tr><td><code>\"Shape\"</code></td><td>A basic entity such as a cube.\r      See also, the <code>\"Box\"</code> and <code>\"Sphere\"</code> entity types.</td>\r      <td>{@link Entities.EntityProperties-Shape|EntityProperties-Shape}</td></tr>\r    <tr><td><code>\"Sphere\"</code></td><td>A sphere. This is a synonym of <code>\"Shape\"</code> for the case\r      where the entity's <code>shape</code> property value is <code>\"Sphere\"</code>.<br />\r      If an entity is created with its <code>type</code>\r      set to <code>\"Sphere\"</code> it will always be created with a <code>shape</code> property value of\r      <code>\"Sphere\"</code>. If an entity of type <code>Box</code> or <code>Shape</code> has its <code>shape</code> set\r      to <code>\"Sphere\"</code> then its <code>type</code> will be reported as <code>\"Sphere\"</code>.\r      <td>{@link Entities.EntityProperties-Sphere|EntityProperties-Sphere}</td></tr>\r    <tr><td><code>\"Text\"</code></td><td>A pane of text oriented in space.</td>\r      <td>{@link Entities.EntityProperties-Text|EntityProperties-Text}</td></tr>\r    <tr><td><code>\"Web\"</code></td><td>A browsable Web page.</td>\r      <td>{@link Entities.EntityProperties-Web|EntityProperties-Web}</td></tr>\r    <tr><td><code>\"Zone\"</code></td><td>A volume of lighting effects and avatar permissions.</td>\r      <td>{@link Entities.EntityProperties-Zone|EntityProperties-Zone}</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "EntityType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.EntityType",
        "scope": "static"
    },
    {
        "description": "Haze is defined by the following properties.",
        "kind": "typedef",
        "name": "Haze",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "The horizontal distance at which visibility is reduced to 95%; i.e., 95% of each pixel's \r    color is haze.",
                "name": "hazeRange"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "128,154,179",
                "description": "The color of the haze when looking away from the key light.",
                "name": "hazeColor"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then the haze is colored with glare from the key light;\r    <code>hazeGlareColor</code> and <code>hazeGlareAngle</code> are used.",
                "name": "hazeEnableGlare"
            },
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,299,179",
                "description": "The color of the haze when looking towards the key light.",
                "name": "hazeGlareColor"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 20,
                "description": "The angle in degrees across the circle around the key light that the glare color and \r    haze color are blended 50/50.",
                "name": "hazeGlareAngle"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then haze decreases with altitude as defined by the \r    entity's local coordinate system; <code>hazeBaseRef</code> and </code>hazeCeiling</code> are used.",
                "name": "hazeAltitudeEffect"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The y-axis value in the entity's local coordinate system at which the haze density starts \r    reducing with altitude.",
                "name": "hazeBaseRef"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 200,
                "description": "The y-axis value in the entity's local coordinate system at which the haze density has \r    reduced to 5%.",
                "name": "hazeCeiling"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The proportion of the skybox image to show through the haze: <code>0.0</code> \r    displays no skybox image; <code>1.0</code> displays no haze.",
                "name": "hazeBackgroundBlend"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "<em>Currently not supported.</em>",
                "name": "hazeAttenuateKeyLight"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1000,
                "description": "<em>Currently not supported.</em>",
                "name": "hazeKeyLightRange"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 200,
                "description": "<em>Currently not supported.</em>",
                "name": "hazeKeyLightAltitude"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Haze",
        "scope": "static"
    },
    {
        "description": "A key light is defined by the following properties.",
        "kind": "typedef",
        "name": "KeyLight",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "255,255,255",
                "description": "The color of the light.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The intensity of the light.",
                "name": "intensity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,-1,0",
                "description": "The direction the light is shining.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code> then shadows are cast. Shadows are cast by avatars, plus \r    {@link Entities.EntityType|Model} and {@link Entities.EntityType|Shape} entities that have their \r    <code>{@link Entities.EntityProperties|canCastShadow}</code> property set to <code>true</code>.",
                "name": "castShadows"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.KeyLight",
        "scope": "static"
    },
    {
        "description": "<p>A <code>PolyVoxSurfaceStyle</code> may be one of the following:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Type</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Marching cubes.</td><td>Chamfered edges. Open volume.\r      Joins neighboring PolyVox entities reasonably well.</td></tr>\r    <tr><td><code>1</code></td><td>Cubic.</td><td>Square edges. Open volume.\r      Joins neighboring PolyVox entities cleanly.</td></tr>\r    <tr><td><code>2</code></td><td>Edged cubic.</td><td>Square edges. Enclosed volume.\r      Joins neighboring PolyVox entities cleanly.</td></tr>\r    <tr><td><code>3</code></td><td>Edged marching cubes.</td><td>Chamfered edges. Enclosed volume.\r      Doesn't join neighboring PolyVox entities.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PolyVoxSurfaceStyle",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.PolyVoxSurfaceStyle",
        "scope": "static"
    },
    {
        "description": "<p>A <code>Shape</code>, <code>Box</code>, or <code>Sphere</code> {@link Entities.EntityType|EntityType} may display as \rone of the following geometrical shapes:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Dimensions</th><th>Notes</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"Circle\"</code></td><td>2D</td><td>A circle oriented in 3D.</td></tr>\r    <tr><td><code>\"Cube\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cone\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Cylinder\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Dodecahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Hexagon\"</code></td><td>3D</td><td>A hexagonal prism.</td></tr>\r    <tr><td><code>\"Icosahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Octagon\"</code></td><td>3D</td><td>An octagonal prism.</td></tr>\r    <tr><td><code>\"Octahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Quad\"</code></td><td>2D</td><td>A square oriented in 3D.</td></tr>\r    <tr><td><code>\"Sphere\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Tetrahedron\"</code></td><td>3D</td><td></td></tr>\r    <tr><td><code>\"Torus\"</code></td><td>3D</td><td><em>Not implemented.</em></td></tr>\r    <tr><td><code>\"Triangle\"</code></td><td>3D</td><td>A triangular prism.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Shape",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.Shape",
        "scope": "static"
    },
    {
        "description": "A skybox is defined by the following properties.",
        "kind": "typedef",
        "name": "Skybox",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Color"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "Sets the color of the sky if <code>url</code> is <code>\"\"</code>, otherwise modifies the \r    color of the cube map image.",
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A cube map image that is used to render the sky.",
                "name": "url"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.Skybox",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "FBXAnimationFrame",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "name": "rotations"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "name": "translations"
            }
        ],
        "longname": "FBXAnimationFrame",
        "scope": "global"
    },
    {
        "description": "<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Points.</td></tr>\r    <tr><td><code>1</code></td><td>Lines.</td></tr>\r    <tr><td><code>2</code></td><td>Line strip.</td></tr>\r    <tr><td><code>3</code></td><td>Triangles.</td></tr>\r    <tr><td><code>4</code></td><td>Triangle strip.</td></tr>\r    <tr><td><code>5</code></td><td>Quads.</td></tr>\r    <tr><td><code>6</code></td><td>Quad strip.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Topology",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Graphics",
        "longname": "Graphics.Topology",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Material",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "opacity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "roughness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "metallic"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "scattering"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "unlit"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "emissiveMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "albedoMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "opacityMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "metallicMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "specularMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "roughnessMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "glossMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "normalMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "bumpMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "occlusionMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "lightmapMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scatteringMap"
            }
        ],
        "tags": [
            {
                "originalTitle": "propety",
                "title": "propety",
                "text": "{Vec3} emissive",
                "value": "{Vec3} emissive"
            },
            {
                "originalTitle": "propety",
                "title": "propety",
                "text": "{Vec3} albedo",
                "value": "{Vec3} albedo"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.Material",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "MaterialLayer",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Graphics.Material"
                    ]
                },
                "description": "This layer's material.",
                "name": "material"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The priority of this layer.  If multiple materials are applied to a mesh part, only the highest priority layer is used.",
                "name": "priority"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.MaterialLayer",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "IFSData",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "mesh name (useful for debugging / debug prints).",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "topology"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "vertex indices to use for the mesh faces.",
                "name": "indices"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "description": "vertex positions (model space)",
                "name": "vertices"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "vertex normals (normalized)",
                "name": "normals"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "vertex colors (normalized)",
                "name": "colors"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec2>"
                    ]
                },
                "optional": true,
                "defaultvalue": "[]",
                "description": "vertex texture coordinates (normalized)",
                "name": "texCoords0"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.IFSData",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The experimental Graphics API <em>(experimental)</em> lets you query and manage certain graphics-related structures (like underlying meshes and textures) from scripting.",
        "kind": "namespace",
        "name": "Graphics",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Graphics",
        "scope": "global"
    },
    {
        "description": "Returns a model reference object associated with the specified UUID ({@link EntityID}, {@link OverlayID}, or {@link AvatarID}).",
        "kind": "function",
        "name": "getModel",
        "params": [
            {
                "type": {
                    "names": [
                        "UUID"
                    ]
                },
                "description": "The objectID of the model whose meshes are to be retrieved.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                },
                "description": "the resulting Model object"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.getModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                },
                "name": "model"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.updateModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canUpdateModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "meshIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "partNumber"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.canUpdateModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "newModel",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Graphics.Mesh>"
                    ]
                },
                "name": "meshes"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.newModel",
        "scope": "static"
    },
    {
        "description": "Create a new Mesh / Mesh Part with the specified data buffers.",
        "kind": "function",
        "name": "newMesh",
        "params": [
            {
                "type": {
                    "names": [
                        "Graphics.IFSData"
                    ]
                },
                "description": "Index-Faced Set (IFS) arrays used to create the new mesh.",
                "name": "ifsMeshData"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Graphics.Mesh"
                    ]
                },
                "description": "the resulting Mesh / Mesh Part object"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.newMesh",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "exportModelToOBJ",
        "params": [
            {
                "type": {
                    "names": [
                        "Graphics.Model"
                    ]
                },
                "name": "model"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.exportModelToOBJ",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Mesh",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<Graphics.MeshPart>"
                    ]
                },
                "description": "Array of submesh part references.",
                "name": "parts"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Vertex attribute names (color, normal, etc.)",
                "name": "attributeNames"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of parts contained in the mesh.",
                "name": "numParts"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of vertex indices in the mesh.",
                "name": "numIndices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of vertices in the Mesh.",
                "name": "numVertices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of currently defined vertex attributes.",
                "name": "numAttributes"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "valid"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "strong"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "extents"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "bufferFormats"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.Mesh",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "MeshPart",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "valid"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The part index (within the containing Mesh).",
                "name": "partIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "firstVertexIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "baseVertexIndex"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lastVertexIndex"
            },
            {
                "type": {
                    "names": [
                        "Graphics.Topology"
                    ]
                },
                "description": "element interpretation (currently only 'triangles' is supported).",
                "name": "topology"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Vertex attribute names (color, normal, etc.)",
                "name": "attributeNames"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of vertex indices that this mesh part refers to.",
                "name": "numIndices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of vertices per face (eg: 3 when topology is 'triangles').",
                "name": "numVerticesPerFace"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of faces represented by the mesh part (numIndices / numVerticesPerFace).",
                "name": "numFaces"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of vertices in the containing Mesh.",
                "name": "numVertices"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Number of currently defined vertex attributes.",
                "name": "numAttributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "extents"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "bufferFormats"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.MeshPart",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Model",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "UUID of corresponding inworld object (if model is associated)",
                "name": "objectID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The number of submeshes contained in the model.",
                "name": "numMeshes"
            },
            {
                "type": {
                    "names": [
                        "Array.<Graphics.Mesh>"
                    ]
                },
                "description": "Array of submesh references.",
                "name": "meshes"
            },
            {
                "type": {
                    "names": [
                        "Object.<string, Array.<Graphics.MaterialLayer>>"
                    ]
                },
                "description": "Map of materials layer lists.  You can look up a material layer list by mesh part number or by material name.",
                "name": "materialLayers"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array of all the material names used by the mesh parts of this model, in order (e.g. materialNames[0] is the name of the first mesh part's material).",
                "name": "materialNames"
            }
        ],
        "memberof": "Graphics",
        "longname": "Graphics.Model",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.Keyboard</code> object has properties representing keyboard, mouse, and display touch \revents. The property values are integer IDs, uniquely identifying each output. <em>Read-only.</em> These can be mapped to \ractions or functions or <code>Controller.Standard</code> items in a {@link RouteObject} mapping. For presses, each data \rvalue is either <code>1.0</code> for \"true\" or <code>0.0</code> for \"false\".</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><td>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code> &ndash; <code>9</code></td><td>number</td><td>number</td><td>A \"0\" &ndash; \"1\" key on the \r      keyboard or keypad is pressed.</td></tr>\r    <tr><td><code>A</code> &ndash; <code>Z</code></td><td>number</td><td>number</td><td>A \"A\" &ndash; \"Z\" key on the \r      keyboard is pressed.</td></tr>\r    <tr><td><code>Space</code></td><td>number</td><td>number</td><td>The space bar on the keyboard is pressed.</td></tr>\r    <tr><td><code>Tab</code></td><td>number</td><td>number</td><td>The tab key on the keyboard is pressed.</td></tr>\r    <tr><td><code>Shift</code></td><td>number</td><td>number</td><td>The shift key on the keyboard is pressed.</td></tr>\r    <tr><td><code>Control</code></td><td>number</td><td>number</td><td>The control key on the keyboard is pressed. (The \r      \"Command\" key on OSX.)</td></tr>\r    <tr><td><code>Left</code></td><td>number</td><td>number</td><td>The left arrow key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>Right</code></td><td>number</td><td>number</td><td>The right arrow key on the keyboard or keypad is \r      pressed.</td></tr>\r    <tr><td><code>Up</code></td><td>number</td><td>number</td><td>The up arrow key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>Down</code></td><td>number</td><td>number</td><td>The down arrow key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>PgUp</code></td><td>number</td><td>number</td><td>The page up key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>PgDown</code></td><td>number</td><td>number</td><td>The page down key on the keyboard or keypad is pressed.\r      </td></tr>\r    <tr><td><code>LeftMouseButton</code></td><td>number</td><td>number</td><td>The left mouse button pressed.</td></tr>\r    <tr><td><code>MiddleMouseButton</code></td><td>number</td><td>number</td><td>The middle mouse button pressed.</td></tr>\r    <tr><td><code>RightMouseButton</code></td><td>number</td><td>number</td><td>The right mouse button pressed.</td></tr>\r    <tr><td><code>LeftMouseClicked</code></td><td>number</td><td>number</td><td>The left mouse button clicked.</td></tr>\r    <tr><td><code>MiddleMouseClicked</code></td><td>number</td><td>number</td><td>The middle mouse button clicked.</td></tr>\r    <tr><td><code>RightMouseClicked</code></td><td>number</td><td>number</td><td>The right mouse button clicked.</td></tr>\r    <tr><td><code>MouseMoveRight</code></td><td>number</td><td>number</td><td>The mouse moved right.</td></tr>\r    <tr><td><code>MouseMoveLeft</code></td><td>number</td><td>number</td><td>The mouse moved left.</td></tr>\r    <tr><td><code>MouseMoveUp</code></td><td>number</td><td>number</td><td>The mouse moved up.</td></tr>\r    <tr><td><code>MouseMoveDown</code></td><td>number</td><td>number</td><td>The mouse moved down.</td></tr>\r    <tr><td><code>MouseX</code></td><td>number</td><td>number</td><td>The mouse x-coordinate changed. The data value is its \r      new x-coordinate value.</td></tr>\r    <tr><td><code>MouseY</code></td><td>number</td><td>number</td><td>The mouse y-coordinate changed. The data value is its \r      new y-coordinate value.</td></tr>\r    <tr><td><code>MouseWheelRight</code></td><td>number</td><td>number</td><td>The mouse wheel rotated left. The data value \r      is the number of units rotated (typically <code>1.0</code>).</td></tr>\r    <tr><td><code>MouseWheelLeft</code></td><td>number</td><td>number</td><td>The mouse wheel rotated left. The data value \r      is the number of units rotated (typically <code>1.0</code>).</td></tr>\r    <tr><td><code>MouseWheelUp</code></td><td>number</td><td>number</td><td>The mouse wheel rotated up. The data value \r      is the number of units rotated (typically <code>1.0</code>).</td></tr>\r    <tr><td><code>MouseWheelDown</code></td><td>number</td><td>number</td><td>The mouse wheel rotated down. The data value \r      is the number of units rotated (typically <code>1.0</code>).</td></tr>\r    <tr><td><code>TouchpadRight</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved right. The data value is how far the average position of all touch points moved.</td></tr>\r    <tr><td><code>TouchpadLeft</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved left. The data value is how far the average position of all touch points moved.</td></tr>\r    <tr><td><code>TouchpadUp</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved up. The data value is how far the average position of all touch points moved.</td></tr>\r    <tr><td><code>TouchpadDown</code></td><td>number</td><td>number</td><td>The average touch on a touch-enabled device \r      moved down. The data value is how far the average position of all touch points moved.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-Keyboard",
        "type": {
            "names": [
                "object"
            ]
        },
        "todo": [
            "<em>Currently, the mouse wheel in an ordinary mouse generates left/right wheel events instead of up/down.</em>"
        ],
        "memberof": "Controller",
        "longname": "Controller.Hardware-Keyboard",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Midi",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Midi",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "description": "Send Raw MIDI packet to a particular device.",
        "kind": "function",
        "name": "sendRawDword",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer device number.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer (DWORD) raw MIDI message.",
                "name": "raw"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.sendRawDword",
        "scope": "static"
    },
    {
        "description": "Send MIDI message to a particular device.",
        "kind": "function",
        "name": "sendMidiMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer device number.",
                "name": "device"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer channel number.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "0x8 is note off, 0x9 is note on (if velocity=0, note off), etc.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "MIDI note number.",
                "name": "note"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note velocity (0 means note off).",
                "name": "velocity"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.sendMidiMessage",
        "scope": "static"
    },
    {
        "description": "Play a note on all connected devices.",
        "kind": "function",
        "name": "playMidiNote",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "0x80 is note off, 0x90 is note on (if velocity=0, note off), etc.",
                "name": "status"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "MIDI note number.",
                "name": "note"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Note velocity (0 means note off).",
                "name": "velocity"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.playMidiNote",
        "scope": "static"
    },
    {
        "description": "Turn off all notes on all connected devices.",
        "kind": "function",
        "name": "allNotesOff",
        "memberof": "Midi",
        "longname": "Midi.allNotesOff",
        "scope": "static"
    },
    {
        "description": "Clean up and re-discover attached devices.",
        "kind": "function",
        "name": "resetDevices",
        "memberof": "Midi",
        "longname": "Midi.resetDevices",
        "scope": "static"
    },
    {
        "description": "Get a list of inputs/outputs.",
        "kind": "function",
        "name": "listMidiDevices",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "output"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.listMidiDevices",
        "scope": "static"
    },
    {
        "description": "Block an input/output by name.",
        "kind": "function",
        "name": "blockMidiDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "output"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.blockMidiDevice",
        "scope": "static"
    },
    {
        "description": "Unblock an input/output by name.",
        "kind": "function",
        "name": "unblockMidiDevice",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "output"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.unblockMidiDevice",
        "scope": "static"
    },
    {
        "description": "Repeat all incoming notes to all outputs (default disabled).",
        "kind": "function",
        "name": "thruModeEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.thruModeEnable",
        "scope": "static"
    },
    {
        "description": "Broadcast on all unblocked devices.",
        "kind": "function",
        "name": "broadcastEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.broadcastEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typeNoteOffEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeNoteOffEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typeNoteOnEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeNoteOnEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typePolyKeyPressureEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typePolyKeyPressureEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typeControlChangeEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeControlChangeEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typeProgramChangeEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeProgramChangeEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typeChanPressureEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeChanPressureEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typePitchBendEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typePitchBendEnable",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "typeSystemMessageEnable",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enable"
            }
        ],
        "memberof": "Midi",
        "longname": "Midi.typeSystemMessageEnable",
        "scope": "static"
    },
    {
        "description": "<p>An RGB or SRGB color value.</p>\r<table>\r  <thead>\r    <tr><th>Index</th><th>Type</th><th>Attributes</th><th>Default</th><th>Value</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>number</td><td></td><td></td>\r      <td>Red component value. Number in the range <code>0.0</code> &ndash; <code>1.0</code>.</td></tr>\r    <tr><td><code>1</code></td><td>number</td><td></td><td></td>\r      <td>Green component value. Number in the range <code>0.0</code> &ndash; <code>1.0</code>.</td></tr>\r    <tr><td><code>2</code></td><td>number</td><td></td><td></td>\r      <td>Blue component value. Number in the range <code>0.0</code> &ndash; <code>1.0</code>.</td></tr>\r    <tr><td><code>3</code></td><td>boolean</td><td>&lt;optional&gt;</td><td>false</td>\r      <td>If <code>true</code> then the color is an SRGB color.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "RGBS",
        "type": {
            "names": [
                "array"
            ]
        },
        "longname": "RGBS",
        "scope": "global"
    },
    {
        "description": "A material or set of materials such as may be used by a {@link Entities.EntityType|Material} entity.",
        "kind": "typedef",
        "name": "MaterialResource",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1,
                "description": "The version of the material. <em>Currently not used.</em>",
                "name": "materialVersion"
            },
            {
                "type": {
                    "names": [
                        "Material",
                        "Array.<Material>"
                    ]
                },
                "description": "The details of the material or materials.",
                "name": "materials"
            }
        ],
        "longname": "MaterialResource",
        "scope": "global"
    },
    {
        "description": "A material such as may be used by a {@link Entities.EntityType|Material} entity.",
        "kind": "typedef",
        "name": "Material",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A name for the material.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"hifi_pbr\"",
                "description": "<em>Currently not used.</em>",
                "name": "model"
            },
            {
                "type": {
                    "names": [
                        "Vec3Color",
                        "RGBS"
                    ]
                },
                "description": "The emissive color, i.e., the color that the material emits. A {@link Vec3Color} value \r    is treated as sRGB. A {@link RGBS} value can be either RGB or sRGB.",
                "name": "emissive"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "1.0",
                "description": "The opacity, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "opacity"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "If <code>true</code>, the material is not lit.",
                "name": "unlit"
            },
            {
                "type": {
                    "names": [
                        "Vec3Color",
                        "RGBS"
                    ]
                },
                "description": "The albedo color. A {@link Vec3Color} value is treated as sRGB. A {@link RGBS} value can \r    be either RGB or sRGB.",
                "name": "albedo"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roughness, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "roughness"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The metallicness, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "metallic"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scattering, <code>0.0</code> &ndash; <code>1.0</code>.",
                "name": "scattering"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of emissive texture image.",
                "name": "emissiveMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of albedo texture image.",
                "name": "albedoMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of opacity texture image. Set value the same as the <code>albedoMap</code> value for \r    transparency.",
                "name": "opacityMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of roughness texture image. Can use this or <code>glossMap</code>, but not both.",
                "name": "roughnessMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of gloss texture image. Can use this or <code>roughnessMap</code>, but not both.",
                "name": "glossMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of metallic texture image. Can use this or <code>specularMap</code>, but not both.",
                "name": "metallicMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of specular texture image. Can use this or <code>metallicMap</code>, but not both.",
                "name": "specularMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of normal texture image. Can use this or <code>bumpMap</code>, but not both.",
                "name": "normalMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of bump texture image. Can use this or <code>normalMap</code>, but not both.",
                "name": "bumpMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of occlusion texture image.",
                "name": "occlusionMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of scattering texture image. Only used if <code>normalMap</code> or \r    <code>bumpMap</code> is specified.",
                "name": "scatteringMap"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of light map texture image. <em>Currently not used.</em>",
                "name": "lightMap"
            }
        ],
        "longname": "Material",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>API to manage model cache resources.",
        "kind": "namespace",
        "name": "ModelCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "ModelCache",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>API to manage texture cache resources.",
        "kind": "namespace",
        "name": "TextureCache",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of total resources. <em>Read-only.</em>",
                "name": "numTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of cached resource. <em>Read-only.</em>",
                "name": "numCached"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all resources. <em>Read-only.</em>",
                "name": "sizeTotal"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Size in bytes of all cached resources. <em>Read-only.</em>",
                "name": "sizeCached"
            }
        ],
        "longname": "TextureCache",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 67108864,
                "name": "maxNumPixels"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                }
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "spectatorCameraFramebufferReset",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.spectatorCameraFramebufferReset",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>The location API provides facilities related to your current location in the metaverse.\r\r<h5>Getter/Setter</h5>\r<p>You can get and set your current metaverse address by directly reading a string value from and writing a string value to \rthe <code>location</code> object. This is an alternative to using the <code>location.href</code> property or this object's\rfunctions.</p>",
        "kind": "namespace",
        "name": "location",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A UUID uniquely identifying the domain you're visiting. Is {@link Uuid|Uuid.NULL} if you're not\r    connected to the domain or are in a serverless domain.\r    <em>Read-only.</em>",
                "name": "domainID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the domain for your current metaverse address (e.g., <code>\"AvatarIsland\"</code>,\r    <code>localhost</code>, or an IP address). Is blank if you're in a serverless domain.\r    <em>Read-only.</em>",
                "name": "hostname"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Your current metaverse address (e.g., <code>\"hifi://avatarisland/15,-10,26/0,0,0,1\"</code>)\r    regardless of whether or not you're connected to the domain. Starts with <code>\"file:///\"</code> if you're in a \r    serverless domain.\r    <em>Read-only.</em>",
                "name": "href"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if you're connected to the domain in your current <code>href</code>\r    metaverse address, otherwise <code>false</code>.",
                "name": "isConnected"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The location and orientation in your current <code>href</code> metaverse address \r    (e.g., <code>\"/15,-10,26/0,0,0,1\"</code>).\r    <em>Read-only.</em>",
                "name": "pathname"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The place name in your current <code>href</code> metaverse address\r    (e.g., <code>\"AvatarIsland\"</code>). Is blank if your <code>hostname</code> is an IP address.\r    <em>Read-only.</em>",
                "name": "placename"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The protocol of your current <code>href</code> metaverse address (e.g., <code>\"hifi\"</code>).\r    <em>Read-only.</em>",
                "name": "protocol"
            }
        ],
        "longname": "location",
        "scope": "global"
    },
    {
        "description": "<p>The reasons for an address lookup via the metaverse API are defined by numeric values:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Name</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>UserInput</strong></td>\r      <td><code>0</code></td>\r      <td>User-typed input.</td>\r    </tr>\r    <tr>\r      <td><strong>Back</strong></td>\r      <td><code>1</code></td>\r      <td>Address from a {@link location.goBack|goBack} call.</td>\r    </tr>\r    <tr>\r      <td><strong>Forward</strong></td>\r      <td><code>2</code></td>\r      <td>Address from a {@link location.goForward|goForward} call.</td>\r    </tr>\r    <tr>\r      <td><strong>StartupFromSettings</strong></td>\r      <td><code>3</code></td>\r      <td>Initial location at Interface start-up from settings.</td>\r    </tr>\r    <tr>\r      <td><strong>DomainPathResponse</strong></td>\r      <td><code>4</code></td>\r      <td>A named path in the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>Internal</strong></td>\r      <td><code>5</code></td>\r      <td>An internal attempt to resolve an alternative path.</td>\r    </tr>\r    <tr>\r      <td><strong>AttemptedRefresh</strong></td>\r      <td><code>6</code></td>\r      <td>A refresh after connecting to a domain.</td>\r    </tr>\r    <tr>\r      <td><strong>Suggestions</strong></td>\r      <td><code>7</code></td>\r      <td>Address from the Goto dialog.</td>\r    </tr>\r    <tr>\r      <td><strong>VisitUserFromPAL</strong></td>\r      <td><code>8</code></td>\r      <td>User from the People dialog.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "LookupTrigger",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "location",
        "longname": "location.LookupTrigger",
        "scope": "static"
    },
    {
        "description": "Go to a specified metaverse address.",
        "kind": "function",
        "name": "handleLookupString",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The address to go to: a <code>\"hifi://\"<code> address, an IP address (e.g., \r<code>\"127.0.0.1\"</code> or <code>\"localhost\"</code>), a domain name, a named path on a domain (starts with \r<code>\"/\"</code>), a position or position and orientation, or a user (starts with <code>\"@\"</code>).",
                "name": "address"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": false,
                "description": "Set to <code>true</code> if the address is obtained from the \"Goto\" dialog.\r   Helps ensure that user's location history is correctly maintained.",
                "name": "fromSuggestions"
            }
        ],
        "memberof": "location",
        "longname": "location.handleLookupString",
        "scope": "static"
    },
    {
        "description": "Go to a position and orientation resulting from a lookup for a named path in the domain (set in the domain server's \rsettings).",
        "kind": "function",
        "name": "goToViewpointForPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The position and orientation corresponding to the named path.",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The named path that was looked up on the server.",
                "name": "namedPath"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.goToViewpointForPath",
        "scope": "static"
    },
    {
        "description": "Go back to the previous location in your navigation history, if there is one.",
        "kind": "function",
        "name": "goBack",
        "memberof": "location",
        "longname": "location.goBack",
        "scope": "static"
    },
    {
        "description": "Go forward to the next location in your navigation history, if there is one.",
        "kind": "function",
        "name": "goForward",
        "memberof": "location",
        "longname": "location.goForward",
        "scope": "static"
    },
    {
        "description": "Go to the local Sandbox server that's running on the same PC as Interface.",
        "kind": "function",
        "name": "goToLocalSandbox",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "The position and orientation to go to (e.g., <code>\"/0,0,0\"</code>).",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "location.LookupTrigger"
                    ]
                },
                "defaultvalue": "StartupFromSettings",
                "description": "The reason for the function call. Helps ensure that user's\r    location history is correctly maintained.",
                "name": "trigger"
            }
        ],
        "memberof": "location",
        "longname": "location.goToLocalSandbox",
        "scope": "static"
    },
    {
        "description": "Go to the default \"welcome\" metaverse address.",
        "kind": "function",
        "name": "goToEntry",
        "params": [
            {
                "type": {
                    "names": [
                        "location.LookupTrigger"
                    ]
                },
                "defaultvalue": "StartupFromSettings",
                "description": "The reason for the function call. Helps ensure that user's\r    location history is correctly maintained.",
                "name": "trigger"
            }
        ],
        "memberof": "location",
        "longname": "location.goToEntry",
        "scope": "static"
    },
    {
        "description": "Go to the specified user's location.",
        "kind": "function",
        "name": "goToUser",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The user's username.",
                "name": "username"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "If <code>true</code> then go to a location just in front of the user and turn to face\r    them, otherwise go to the user's exact location and orientation.",
                "name": "matchOrientation"
            }
        ],
        "memberof": "location",
        "longname": "location.goToUser",
        "scope": "static"
    },
    {
        "description": "Go to the last address tried.  This will be the last URL tried from location.handleLookupString",
        "kind": "function",
        "name": "goToLastAddress",
        "memberof": "location",
        "longname": "location.goToLastAddress",
        "scope": "static"
    },
    {
        "description": "Returns if going back is possible.",
        "kind": "function",
        "name": "canGoBack",
        "memberof": "location",
        "longname": "location.canGoBack",
        "scope": "static"
    },
    {
        "description": "Refresh the current address, e.g., after connecting to a domain in order to position the user to the desired location.",
        "kind": "function",
        "name": "refreshPreviousLookup",
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.refreshPreviousLookup",
        "scope": "static"
    },
    {
        "description": "Update your current metaverse location in Interface's {@link Settings} file as your last-known address. This can be used\rto ensure that you start up at that address if you exit Interface without a later address automatically being saved.",
        "kind": "function",
        "name": "storeCurrentAddress",
        "memberof": "location",
        "longname": "location.storeCurrentAddress",
        "scope": "static"
    },
    {
        "description": "Copy your current metaverse address (i.e., <code>location.href</code> property value) to the OS clipboard.",
        "kind": "function",
        "name": "copyAddress",
        "memberof": "location",
        "longname": "location.copyAddress",
        "scope": "static"
    },
    {
        "description": "Copy your current metaverse location and orientation (i.e., <code>location.pathname</code> property value) to the OS \rclipboard.",
        "kind": "function",
        "name": "copyPath",
        "memberof": "location",
        "longname": "location.copyPath",
        "scope": "static"
    },
    {
        "description": "Retrieve and remember the place name for the given domain ID if the place name is not already known.",
        "kind": "function",
        "name": "lookupShareableNameForDomainID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain.",
                "name": "domainID"
            }
        ],
        "deprecated": "This function is deprecated and will be removed.",
        "memberof": "location",
        "longname": "location.lookupShareableNameForDomainID",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed (successfully or\runsuccessfully).",
        "kind": "function",
        "name": "lookupResultsFinished",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultsFinished",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed and the domain or user is \roffline.",
        "kind": "function",
        "name": "lookupResultIsOffline",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultIsOffline",
        "scope": "static"
    },
    {
        "description": "Triggered when looking up the details of a metaverse user or location to go to has completed and the domain or user could\rnot be found.",
        "kind": "function",
        "name": "lookupResultIsNotFound",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.lookupResultIsNotFound",
        "scope": "static"
    },
    {
        "description": "Triggered when a request is made to go to an IP address.",
        "kind": "function",
        "name": "possibleDomainChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "Url"
                    ]
                },
                "description": "URL for domain",
                "name": "domainURL"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain to go to.",
                "name": "domainID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.possibleDomainChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when a request is made to go to a named domain or user.",
        "kind": "function",
        "name": "possibleDomainChangeRequiredViaICEForID",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "IP address of the ICE server.",
                "name": "iceServerHostName"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the domain to go to.",
                "name": "domainID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "location",
        "longname": "location.possibleDomainChangeRequiredViaICEForID",
        "scope": "static"
    },
    {
        "description": "Triggered when an attempt is made to send your avatar to a specified position on the current domain. For example, when\ryou change domains or enter a position to go to in the \"Goto\" dialog.",
        "kind": "function",
        "name": "locationChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to go to.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then a new <code>orientation</code> has been requested.",
                "name": "hasOrientationChange"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation to change to. Is {@link Quat(0)|Quat.IDENTITY} if \r    <code>hasOrientationChange</code> is <code>false</code>.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "If <code>true</code> then the request is to go to a position near that specified \r    and orient your avatar to face it. For example when you visit someone from the \"People\" dialog.",
                "name": "shouldFaceLocation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report location change requests.</caption>\rfunction onLocationChangeRequired(newPosition, hasOrientationChange, newOrientation, shouldFaceLocation) {\r    print(\"Location change required:\");\r    print(\"- New position = \" + JSON.stringify(newPosition));\r    print(\"- Has orientation change = \" + hasOrientationChange);\r    print(\"- New orientation = \" + JSON.stringify(newOrientation));\r    print(\"- Should face location = \" + shouldFaceLocation);\r}\r\rlocation.locationChangeRequired.connect(onLocationChangeRequired);"
        ],
        "memberof": "location",
        "longname": "location.locationChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when an attempt is made to send your avatar to a new named path on the domain (set in the domain server's\rsettings). For example, when you enter a \"/\" followed by the path's name in the \"GOTO\" dialog.",
        "kind": "function",
        "name": "pathChangeRequired",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the path to go to.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report path change requests.</caption>\rfunction onPathChangeRequired(newPath) {\r    print(\"onPathChangeRequired: newPath = \" + newPath);\r}\r\rlocation.pathChangeRequired.connect(onPathChangeRequired);"
        ],
        "memberof": "location",
        "longname": "location.pathChangeRequired",
        "scope": "static"
    },
    {
        "description": "Triggered when you navigate to a new domain.",
        "kind": "function",
        "name": "hostChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The new domain's host name.",
                "name": "hostname"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when you navigate to a new domain.</caption>\rfunction onHostChanged(host) {\r    print(\"Host changed to: \" + host);\r}\r\rlocation.hostChanged.connect(onHostChanged);"
        ],
        "memberof": "location",
        "longname": "location.hostChanged",
        "scope": "static"
    },
    {
        "description": "Triggered when there's a change in whether or not there's a previous location that can be navigated to using\r{@link location.goBack|goBack}. (Reflects changes in the state of the \"Goto\" dialog's back arrow.)",
        "kind": "function",
        "name": "goBackPossible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a previous location to navigate to, otherwise \r    <code>false</code>.",
                "name": "isPossible"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when ability to navigate back changes.</caption>\rfunction onGoBackPossible(isPossible) {\r    print(\"Go back possible: \" + isPossible);\r}\r\rlocation.goBackPossible.connect(onGoBackPossible);"
        ],
        "memberof": "location",
        "longname": "location.goBackPossible",
        "scope": "static"
    },
    {
        "description": "Triggered when there's a change in whether or not there's a forward location that can be navigated to using\r{@link location.goForward|goForward}. (Reflects changes in the state of the \"Goto\" dialog's forward arrow.)",
        "kind": "function",
        "name": "goForwardPossible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if there's a forward location to navigate to, otherwise\r    <code>false</code>.",
                "name": "isPossible"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when ability to navigate forward changes.</caption>\rfunction onGoForwardPossible(isPossible) {\r    print(\"Go forward possible: \" + isPossible);\r}\r\rlocation.goForwardPossible.connect(onGoForwardPossible);\r\n     "
        ],
        "memberof": "location",
        "longname": "location.goForwardPossible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isValidPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.isValidPath",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isValidFilePath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.isValidFilePath",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getATPUrl",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getATPUrl",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "extractAssetHash",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.extractAssetHash",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isValidHash",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "input"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.isValidHash",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "hashData",
        "params": [
            {
                "name": "data"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.hashData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "hashDataHex",
        "params": [
            {
                "name": "data"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.hashDataHex",
        "scope": "static"
    },
    {
        "description": "<p>The reasons that you may be refused connection to a domain are defined by numeric values:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Reason</th>\r      <th>Value</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>Unknown</strong></td>\r      <td><code>0</code></td>\r      <td>Some unknown reason.</td>\r    </tr>\r    <tr>\r      <td><strong>ProtocolMismatch</strong></td>\r      <td><code>1</code></td>\r      <td>The communications protocols of the domain and your Interface are not the same.</td>\r    </tr>\r    <tr>\r      <td><strong>LoginError</strong></td>\r      <td><code>2</code></td>\r      <td>You could not be logged into the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>NotAuthorized</strong></td>\r      <td><code>3</code></td>\r      <td>You are not authorized to connect to the domain.</td>\r    </tr>\r    <tr>\r      <td><strong>TooManyUsers</strong></td>\r      <td><code>4</code></td>\r      <td>The domain already has its maximum number of users.</td>\r    </tr>\r    <tr>\r      <td><strong>TimedOut</strong></td>\r      <td><code>5</code></td>\r      <td>Connecting to the domain timed out.</td>\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ConnectionRefusedReason",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Window",
        "longname": "Window.ConnectionRefusedReason",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br><p>The Messages API enables text and data to be sent between scripts over named \"channels\". A channel can have an arbitrary \rname to help separate messaging between different sets of scripts.</p>\r\r<p><strong>Note:</strong> If you want to call a function in another script, you should use one of the following rather than \rsending a message:</p>\r<ul>\r  <li>{@link Entities.callEntityClientMethod}</li>\r  <li>{@link Entities.callEntityMethod}</li>\r  <li>{@link Entities.callEntityServerMethod}</li>\r  <li>{@link Script.callEntityScriptMethod}</li>\r</ul>",
        "kind": "namespace",
        "name": "Messages",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Messages",
        "scope": "global"
    },
    {
        "description": "Send a text message on a channel.",
        "kind": "function",
        "name": "sendMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to send the message on.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to send.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>false</code> then the message is sent to all Interface, client entity, \r    server entity, and assignment client scripts in the domain.<br />\r    If <code>true</code> then: if sent from an Interface or client entity script it is received by all Interface and \r    client entity scripts; if sent from a server entity script it is received by all entity server scripts; and if sent \r    from an assignment client script it is received only by that same assignment client script.",
                "name": "localOnly"
            }
        ],
        "examples": [
            "<caption>Send and receive a message.</caption>\r// Receiving script.\rvar channelName = \"com.highfidelity.example.messages-example\";\r\rfunction onMessageReceived(channel, message, sender, localOnly) {\r    print(\"Message received:\");\r    print(\"- channel: \" + channel);\r    print(\"- message: \" + message);\r    print(\"- sender: \" + sender);\r    print(\"- localOnly: \" + localOnly);\r}\r\rMessages.subscribe(channelName);\rMessages.messageReceived.connect(onMessageReceived);\r\rScript.scriptEnding.connect(function () {\r    Messages.messageReceived.disconnect(onMessageReceived);\r    Messages.unsubscribe(channelName);\r});\r\r\r// Sending script.\rvar channelName = \"com.highfidelity.example.messages-example\";\rvar message = \"Hello\";\rMessages.sendMessage(channelName, message);"
        ],
        "memberof": "Messages",
        "longname": "Messages.sendMessage",
        "scope": "static"
    },
    {
        "description": "Send a text message locally on a channel.\rThis is the same as calling {@link Messages.sendMessage|sendMessage} with <code>localOnly</code> set to \r<code>true</code>.",
        "kind": "function",
        "name": "sendLocalMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to send the message on.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message to send.",
                "name": "message"
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.sendLocalMessage",
        "scope": "static"
    },
    {
        "description": "Send a data message on a channel.",
        "kind": "function",
        "name": "sendData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to send the data on.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The data to send. The data is handled as a byte stream, for example as may be provided via a \r    JavaScript <code>Int8Array</code> object.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>false</code> then the message is sent to all Interface, client entity,\r    server entity, and assignment client scripts in the domain.<br />\r    If <code>true</code> then: if sent from an Interface or client entity script it is received by all Interface and\r    client entity scripts; if sent from a server entity script it is received by all entity server scripts; and if sent\r    from an assignment client script it is received only by that same assignment client script.",
                "name": "localOnly"
            }
        ],
        "examples": [
            "<caption>Send and receive data.</caption>\r// Receiving script.\rvar channelName = \"com.highfidelity.example.messages-example\";\r\rfunction onDataReceived(channel, data, sender, localOnly) {\r    var int8data = new Int8Array(data);\r    var dataAsString = \"\";\r    for (var i = 0; i < int8data.length; i++) {\r        if (i > 0) {\r            dataAsString += \", \";\r        }\r        dataAsString += int8data[i];\r    }\r    print(\"Data received:\");\r    print(\"- channel: \" + channel);\r    print(\"- data: \" + dataAsString);\r    print(\"- sender: \" + sender);\r    print(\"- localOnly: \" + localOnly);\r}\r\rMessages.subscribe(channelName);\rMessages.dataReceived.connect(onDataReceived);\r\rScript.scriptEnding.connect(function () {\r    Messages.dataReceived.disconnect(onDataReceived);\r    Messages.unsubscribe(channelName);\r});\r\r\r// Sending script.\rvar channelName = \"com.highfidelity.example.messages-example\";\rvar int8data = new Int8Array([1, 1, 2, 3, 5, 8, 13]);\rMessages.sendData(channelName, int8data.buffer);"
        ],
        "memberof": "Messages",
        "longname": "Messages.sendData",
        "scope": "static"
    },
    {
        "description": "Subscribe the scripting environment &mdash; Interface, the entity script server, or assignment client instance &mdash; \rto receive messages on a specific channel. Note that, for example, if there are two Interface scripts that subscribe to \rdifferent channels, both scripts will receive messages on both channels.",
        "kind": "function",
        "name": "subscribe",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to subscribe to.",
                "name": "channel"
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.subscribe",
        "scope": "static"
    },
    {
        "description": "Unsubscribe the scripting environment from receiving messages on a specific channel.",
        "kind": "function",
        "name": "unsubscribe",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel to unsubscribe from.",
                "name": "channel"
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.unsubscribe",
        "scope": "static"
    },
    {
        "description": "Triggered when the a text message is received.",
        "kind": "function",
        "name": "messageReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel that the message was sent on. You can use this to filter out messages not relevant \r    to your script.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The message received.",
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the sender: the user's session UUID if sent by an Interface or client entity \r    script, the UUID of the entity script server if sent by a server entity script, or the UUID of the assignment client \r    instance if sent by an assignment client script.",
                "name": "senderID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the message was sent with <code>localOnly = true</code>.",
                "name": "localOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.messageReceived",
        "scope": "static"
    },
    {
        "description": "Triggered when a data message is received.",
        "kind": "function",
        "name": "dataReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The channel that the message was sent on. You can use this to filter out messages not relevant\r    to your script.",
                "name": "channel"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The data received. The data is handled as a byte stream, for example as may be used by a \r    JavaScript <code>Int8Array</code> object.",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID of the sender: the user's session UUID if sent by an Interface or client entity\r    script, the UUID of the entity script server if sent by a server entity script, or the UUID of the assignment client\r    script, the UUID of the entity script server if sent by a server entity script, or the UUID of the assignment client\r    instance if sent by an assignment client script.",
                "name": "senderID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the message was sent with <code>localOnly = true</code>.",
                "name": "localOnly"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Messages",
        "longname": "Messages.dataReceived",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "ResourceObject",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of this resource.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "Current loading state.",
                "name": "state"
            }
        ],
        "longname": "ResourceObject",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "typedef",
        "name": "State",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource is queued up, waiting to be loaded.",
                "name": "QUEUED"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource is downloading.",
                "name": "LOADING"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource has finished downloaded by is not complete.",
                "name": "LOADED"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The resource has completely finished loading and is ready.",
                "name": "FINISHED"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Downloading the resource has failed.",
                "name": "FAILED"
            }
        ],
        "memberof": "Resource",
        "longname": "Resource.State",
        "scope": "static"
    },
    {
        "description": "Release this resource.",
        "kind": "function",
        "name": "release",
        "memberof": "ResourceObject",
        "longname": "ResourceObject#release",
        "scope": "instance"
    },
    {
        "description": "Triggered when download progress for this resource has changed.",
        "kind": "function",
        "name": "progressChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Byytes downloaded so far.",
                "name": "bytesReceived"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Total number of bytes in the resource.",
                "name": "bytesTotal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ResourceObject",
        "longname": "ResourceObject#progressChanged",
        "scope": "instance"
    },
    {
        "description": "Triggered when resource loading state has changed.",
        "kind": "function",
        "name": "stateChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "description": "New state.",
                "name": "state"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ResourceObject",
        "longname": "ResourceObject#stateChanged",
        "scope": "instance"
    },
    {
        "description": "Get the list of all resource URLs.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "deltaSize"
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the resource to prefetch.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "extra"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ResourceCache",
        "longname": "ResourceCache.dirty",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Resources",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Resources",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "overrideUrlPrefix",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prefix"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "replacement"
            }
        ],
        "memberof": "Resources",
        "longname": "Resources.overrideUrlPrefix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "restoreUrlPrefix",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "prefix"
            }
        ],
        "memberof": "Resources",
        "longname": "Resources.restoreUrlPrefix",
        "scope": "static"
    },
    {
        "description": "Set the maximum number of entity packets that the client can send per second.",
        "kind": "function",
        "name": "setPacketsPerSecond",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer maximum number of entity packets that the client can send per second.",
                "name": "packetsPerSecond"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.setPacketsPerSecond",
        "scope": "static"
    },
    {
        "description": "Get the maximum number of entity packets that the client can send per second.",
        "kind": "function",
        "name": "getPacketsPerSecond",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer maximum number of entity packets that the client can send per second."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getPacketsPerSecond",
        "scope": "static"
    },
    {
        "description": "Check whether servers exist for the client to send entity packets to, i.e., whether you are connected to a domain and \rits entity server is working.",
        "kind": "function",
        "name": "serversExist",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if servers exist for the client to send entity packets to, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.serversExist",
        "scope": "static"
    },
    {
        "description": "Check whether the client has entity packets waiting to be sent.",
        "kind": "function",
        "name": "hasPacketsToSend",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the client has entity packets waiting to be sent, otherwise <code>false</code>."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.hasPacketsToSend",
        "scope": "static"
    },
    {
        "description": "Get the number of entity packets the client has waiting to be sent.",
        "kind": "function",
        "name": "packetsToSendCount",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of entity packets the client has waiting to be sent."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.packetsToSendCount",
        "scope": "static"
    },
    {
        "description": "Get the entity packets per second send rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity packets per second send rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePPS",
        "scope": "static"
    },
    {
        "description": "Get the entity bytes per second send rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBPS",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity bytes per second send rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBPS",
        "scope": "static"
    },
    {
        "description": "Get the entity packets per second queued rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePPSQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity packets per second queued rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePPSQueued",
        "scope": "static"
    },
    {
        "description": "Get the entity bytes per second queued rate of the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBPSQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Entity bytes per second queued rate of the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBPSQueued",
        "scope": "static"
    },
    {
        "description": "Get the lifetime of the client from the first entity packet sent until now, in microseconds.",
        "kind": "function",
        "name": "getLifetimeInUsecs",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Lifetime of the client from the first entity packet sent until now, in microseconds."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeInUsecs",
        "scope": "static"
    },
    {
        "description": "Get the lifetime of the client from the first entity packet sent until now, in seconds.",
        "kind": "function",
        "name": "getLifetimeInSeconds",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Lifetime of the client from the first entity packet sent until now, in seconds."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeInSeconds",
        "scope": "static"
    },
    {
        "description": "Get the total number of entity packets sent by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePacketsSent",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total number of entity packets sent by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePacketsSent",
        "scope": "static"
    },
    {
        "description": "Get the total bytes of entity packets sent by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBytesSent",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total bytes of entity packets sent by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBytesSent",
        "scope": "static"
    },
    {
        "description": "Get the total number of entity packets queued by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimePacketsQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total number of entity packets queued by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimePacketsQueued",
        "scope": "static"
    },
    {
        "description": "Get the total bytes of entity packets queued by the client over its lifetime.",
        "kind": "function",
        "name": "getLifetimeBytesQueued",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The total bytes of entity packets queued by the client over its lifetime."
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.getLifetimeBytesQueued",
        "scope": "static"
    },
    {
        "description": "The <code>\"offset\"</code> {@link Entities.ActionType|ActionType} moves an entity so that it is a set distance away from a \rtarget point.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-Offset",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target point to offset the entity from.",
                "name": "pointToOffsetFrom"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The distance away from the target point to position the entity.",
                "name": "linearDistance"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "34e+38",
                "description": "Controls how long it takes for the entity's position to catch up with the\r    target offset. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action \r    is applied using an exponential decay.",
                "name": "linearTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Offset",
        "scope": "static"
    },
    {
        "description": "The <code>\"tractor\"</code> {@link Entities.ActionType|ActionType} moves and rotates an entity to a target position and \rorientation, optionally relative to another entity.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-Tractor",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The target position.",
                "name": "targetPosition"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "defaultvalue": "0,0,0,1",
                "description": "The target rotation.",
                "name": "targetRotation"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "If an entity ID, the <code>targetPosition</code> and <code>targetRotation</code> are \r    relative to this entity's position and rotation.",
                "name": "otherID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's position to catch up with the\r    target position. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the action \r    is applied using an exponential decay.",
                "name": "linearTimeScale"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 3.4e+38,
                "description": "Controls how long it takes for the entity's orientation to catch up with the\r    target orientation. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the \r    action is applied using an exponential decay.",
                "name": "angularTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Tractor",
        "scope": "static"
    },
    {
        "description": "The <code>\"travel-oriented\"</code> {@link Entities.ActionType|ActionType} orients an entity to align with its direction of \rtravel.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-TravelOriented",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The axis of the entity to align with the entity's direction of travel.",
                "name": "forward"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0.1,
                "description": "Controls how long it takes for the entity's orientation to catch up with the \r    direction of travel. The value is the time for the action to catch up to 1/e = 0.368 of the target value, where the \r    action is applied using an exponential decay.",
                "name": "angularTimeScale"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-TravelOriented",
        "scope": "static"
    },
    {
        "description": "The <code>\"ball-socket\"</code> {@link Entities.ActionType|ActionType} connects two entities with a ball and socket joint. \rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-BallSocket",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the entity's position.",
                "name": "pivot"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the other entity's position.",
                "name": "otherPivot"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-BallSocket",
        "scope": "static"
    },
    {
        "description": "The <code>\"cone-twist\"</code> {@link Entities.ActionType|ActionType} connects two entities with a joint that can move \rthrough a cone and can twist.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-ConeTwist",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the entity's position.",
                "name": "pivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the entity that moves through the cone. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the other entity's position.",
                "name": "otherPivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the other entity that moves through the cone. Must be a non-zero vector.",
                "name": "otherAxis"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 6.238,
                "description": "The angle through which the joint can move in one axis of the cone, in radians.",
                "name": "swingSpan1"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 6.238,
                "description": "The angle through which the joint can move in the other axis of the cone, in radians.",
                "name": "swingSpan2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 6.238,
                "description": "The angle through with the joint can twist, in radians.",
                "name": "twistSpan"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-ConeTwist",
        "scope": "static"
    },
    {
        "description": "The <code>\"hinge\"</code> {@link Entities.ActionType|ActionType} lets an entity pivot about an axis or connects two entities\rwith a hinge joint.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-Hinge",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the entity's position.",
                "name": "pivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the entity that it pivots about. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint, if any. If none is \r    specified then the first entity simply pivots about its specified <code>axis</code>.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local offset of the joint relative to the other entity's position.",
                "name": "otherPivot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the other entity that it pivots about. Must be a non-zero vector.",
                "name": "otherAxis"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -6.283,
                "description": "The most negative angle that the hinge can take, in radians.",
                "name": "low"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 6.283,
                "description": "The most positive angle that the hinge can take, in radians.",
                "name": "high"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current angle of the hinge. <em>Read-only.</em>",
                "name": "angle"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Hinge",
        "scope": "static"
    },
    {
        "description": "The <code>\"slider\"</code> {@link Entities.ActionType|ActionType} lets an entity slide and rotate along an axis, or connects \rtwo entities that slide and rotate along a shared axis.\rIt has arguments in addition to the common {@link Entities.ActionArguments|ActionArguments}.",
        "kind": "typedef",
        "name": "ActionArguments-Slider",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local position of a point in the entity that slides along the axis.",
                "name": "point"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the entity that slides along the joint. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "defaultvalue": null,
                "description": "The ID of the other entity that is connected to the joint, if any. If non is \r    specified then the first entity simply slides and rotates about its specified <code>axis</code>.",
                "name": "otherEntityID"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "0,0,0",
                "description": "The local position of a point in the other entity that slides along the axis.",
                "name": "otherPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "defaultvalue": "1,0,0",
                "description": "The axis of the other entity that slides along the joint. Must be a non-zero vector.",
                "name": "axis"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 1.17e-38,
                "description": "The most negative linear offset from the entity's initial point that the entity can \r    have along the slider.",
                "name": "linearLow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": "3.40e+38",
                "description": "The most positive linear offset from the entity's initial point that the entity can \r    have along the slider.",
                "name": "linearHigh"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": -6.283,
                "description": "The most negative angle that the entity can rotate about the axis if the action \r    involves only one entity, otherwise the most negative angle the rotation can be between the two entities. In radians.",
                "name": "angularLow"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 6.283,
                "description": "The most positive angle that the entity can rotate about the axis if the action \r    involves only one entity, otherwise the most positive angle the rotation can be between the two entities. In radians.",
                "name": "angularHigh"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current linear offset the entity is from its initial point if the action involves \r    only one entity, otherwise the linear offset between the two entities' action points. <em>Read-only.</em>",
                "name": "linearPosition"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "The current angular offset of the entity from its initial rotation if the action \r    involves only one entity, otherwise the angular offset between the two entities. <em>Read-only.</em>",
                "name": "angularPosition"
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments-Slider",
        "scope": "static"
    },
    {
        "description": "Different entity action types have different arguments: some common to all actions (listed below) and some specific to each \r{@link Entities.ActionType|ActionType} (linked to below). The arguments are accessed as an object of property names and \rvalues.",
        "kind": "typedef",
        "name": "ActionArguments",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Entities.ActionType"
                    ]
                },
                "description": "The type of action.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "defaultvalue": "\"\"",
                "description": "A string that a script can use for its own purposes.",
                "name": "tag"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "defaultvalue": 0,
                "description": "How long the action should exist, in seconds, before it is automatically deleted. A value of \r    <code>0</code> means that the action should not be deleted.",
                "name": "ttl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "defaultvalue": true,
                "description": "Is <code>true</code> if you created the action during your current Interface session, \r    <code>false</code> otherwise. <em>Read-only.</em>",
                "name": "isMine"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is present when the entity hasn't been registered with the physics engine yet (e.g., \r    if the action hasn't been properly configured), otherwise <code>undefined</code>. <em>Read-only.</em>",
                "name": "::no-motion-state"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Is <code>true</code> when the action is modifying the entity's motion, <code>false</code> \r    otherwise. Is present once the entity has been registered with the physics engine, otherwise <code>undefined</code>. \r    <em>Read-only.</em>",
                "name": "::active"
            },
            {
                "type": {
                    "names": [
                        "Entities.PhysicsMotionType"
                    ]
                },
                "description": "How the entity moves with the action. Is present once the entity has \r    been registered with the physics engine, otherwise <code>undefined</code>. <em>Read-only.</em>",
                "name": "::motion-type"
            }
        ],
        "see": [
            "The different action types have additional arguments as follows:",
            "{@link Entities.ActionArguments-FarGrab|ActionArguments-FarGrab}",
            "{@link Entities.ActionArguments-Hold|ActionArguments-Hold}",
            "{@link Entities.ActionArguments-Offset|ActionArguments-Offset}",
            "{@link Entities.ActionArguments-Tractor|ActionArguments-Tractor}",
            "{@link Entities.ActionArguments-TravelOriented|ActionArguments-TravelOriented}",
            "{@link Entities.ActionArguments-Hinge|ActionArguments-Hinge}",
            "{@link Entities.ActionArguments-Slider|ActionArguments-Slider}",
            "{@link Entities.ActionArguments-ConeTwist|ActionArguments-ConeTwist}",
            "{@link Entities.ActionArguments-BallSocket|ActionArguments-BallSocket}"
        ],
        "memberof": "Entities",
        "longname": "Entities.ActionArguments",
        "scope": "static"
    },
    {
        "description": "<p>An entity's physics motion type may be one of the following:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"static\"</code></td><td>There is no motion because the entity is locked  &mdash; its <code>locked</code> \r        property is set to <code>true</code>.</td></tr>\r    <tr><td><code>\"kinematic\"</code></td><td>Motion is applied without physical laws (e.g., damping) because the entity is \r        not locked and has its <code>dynamic</code> property set to <code>false</code>.</td></tr>\r    <tr><td><code>\"dynamic\"</code></td><td>Motion is applied according to physical laws (e.g., damping) because the entity \r        is not locked and has its <code>dynamic</code> property set to <code>true</code>.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PhysicsMotionType",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.PhysicsMotionType",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Steam",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "running"
            }
        ],
        "longname": "Steam",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "isRunning",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Steam",
        "longname": "Steam.isRunning",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "openInviteOverlay",
        "memberof": "Steam",
        "longname": "Steam.openInviteOverlay",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>Enum for different types of Picks and Pointers.",
        "kind": "namespace",
        "name": "PickType",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Ray Picks intersect a ray with the nearest object in front of them, along a given direction.",
                "name": "Ray"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Stylus Picks provide \"tapping\" functionality on/into flat surfaces.",
                "name": "Stylus"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Parabola Picks intersect a parabola with the nearest object in front of them, with a given initial velocity and acceleration.",
                "name": "Parabola"
            }
        ],
        "longname": "PickType(0)",
        "scope": "global"
    },
    {
        "description": "<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>{@link PickType(0)|PickType.Ray}</code></td><td></td></tr>\r    <tr><td><code>{@link PickType(0)|PickType.Stylus}</code></td><td></td></tr>\r    <tr><td><code>{@link PickType(0)|PickType.Parabola}</code></td><td></td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "PickType",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "PickType",
        "scope": "global"
    },
    {
        "kind": "typedef",
        "name": "ResponseType",
        "type": {
            "names": [
                "string"
            ]
        },
        "description": "<p>Available <code>responseType</code> values for use with @{link Assets.getAsset} and @{link Assets.loadFromCache} configuration option. </p>\r<table>\r  <thead>\r    <tr><th>responseType</th><th>typeof response value</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"text\"</code></td><td>contents returned as utf-8 decoded <code>String</code> value</td></tr>\r    <tr><td><code>\"arraybuffer\"</code></td><td>contents as a binary <code>ArrayBuffer</code> object</td></tr>\r    <tr><td><code>\"json\"</code></td><td>contents as a parsed <code>JSON</code> object</td></tr>\r  </tbody>\r</table>",
        "memberof": "Assets.GetOptions",
        "longname": "Assets.GetOptions.ResponseType",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>The Assets API allows you to communicate with the Asset Browser.",
        "kind": "namespace",
        "name": "Assets",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Assets",
        "scope": "global"
    },
    {
        "description": "Upload content to the connected domain's asset server.",
        "kind": "function",
        "name": "uploadData",
        "scope": "static",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "content to upload",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "Assets~uploadDataCallback"
                    ]
                },
                "description": "called when upload is complete",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.uploadData"
    },
    {
        "description": "Called when uploadData is complete",
        "kind": "typedef",
        "name": "uploadDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "hash"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~uploadDataCallback",
        "scope": "inner"
    },
    {
        "description": "Download data from the connected domain's asset server.",
        "kind": "function",
        "name": "downloadData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of asset to download, must be ATP scheme URL.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Assets~downloadDataCallback"
                    ]
                },
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.downloadData",
        "scope": "static"
    },
    {
        "description": "Called when downloadData is complete",
        "kind": "typedef",
        "name": "downloadDataCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "content that was downloaded",
                "name": "data"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~downloadDataCallback",
        "scope": "inner"
    },
    {
        "description": "Sets up a path to hash mapping within the connected domain's asset server",
        "kind": "function",
        "name": "setMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "Assets~setMappingCallback"
                    ]
                },
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.setMapping",
        "scope": "static"
    },
    {
        "description": "Called when setMapping is complete",
        "kind": "typedef",
        "name": "setMappingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "error"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~setMappingCallback",
        "scope": "inner"
    },
    {
        "description": "Look up a path to hash mapping within the connected domain's asset server",
        "kind": "function",
        "name": "getMapping",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "Assets~getMappingCallback"
                    ]
                },
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getMapping",
        "scope": "static"
    },
    {
        "description": "Called when getMapping is complete.",
        "kind": "typedef",
        "name": "getMappingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "hash value if found, else an empty string",
                "name": "assetID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "error description if the path could not be resolved; otherwise a null value.",
                "name": "error"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getMappingCallback",
        "scope": "inner"
    },
    {
        "kind": "function",
        "name": "setBakingEnabled",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            },
            {
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.setBakingEnabled",
        "scope": "static"
    },
    {
        "description": "Called when setBakingEnabled is complete.",
        "kind": "typedef",
        "name": "setBakingEnabledCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "memberof": "Assets",
        "longname": "Assets~setBakingEnabledCallback",
        "scope": "inner"
    },
    {
        "description": "Request Asset data from the ATP Server",
        "kind": "function",
        "name": "getAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "URL",
                        "Assets.GetOptions"
                    ]
                },
                "description": "An atp: style URL, hash, or relative mapped path; or an {@link Assets.GetOptions} object with request parameters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Assets~getAssetCallback"
                    ]
                },
                "description": "A scope callback function to receive (error, results) values",
                "name": "scope"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getAsset",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Assets.getAsset}.",
        "kind": "typedef",
        "name": "GetOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "an \"atp:\" style URL, hash, or relative mapped path to fetch",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "text",
                "description": "the desired reponse type (text | arraybuffer | json)",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether to attempt gunzip decompression on the fetched data\r   See: {@link Assets.putAsset} and its .compress=true option",
                "name": "decompress"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.GetOptions",
        "scope": "static"
    },
    {
        "description": "Called when Assets.getAsset is complete.",
        "kind": "typedef",
        "name": "getAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "contains error message or null value if no error occured fetching the asset",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Asset~getAssetResult"
                    ]
                },
                "description": "result object containing, on success containing asset metadata and contents",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Result value returned by {@link Assets.getAsset}.",
        "kind": "typedef",
        "name": "getAssetResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the resolved \"atp:\" style URL for the fetched asset",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the resolved hash for the fetched asset",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "ArrayBuffer",
                        "Object"
                    ]
                },
                "optional": true,
                "description": "response data (possibly converted per .responseType value)",
                "name": "response"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "response type (text | arraybuffer | json)",
                "name": "responseType"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "detected asset mime-type (autodetected)",
                "name": "contentType"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "response data size in bytes",
                "name": "byteLength"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "flag indicating whether data was decompressed",
                "name": "decompressed"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~getAssetResult",
        "scope": "inner"
    },
    {
        "description": "Upload Asset data to the ATP Server",
        "kind": "function",
        "name": "putAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "Assets.PutOptions"
                    ]
                },
                "description": "A PutOptions object with upload parameters",
                "name": "options"
            },
            {
                "type": {
                    "names": [
                        "Assets~putAssetCallback"
                    ]
                },
                "description": "A scoped callback function invoked with (error, results)",
                "name": "scope[callback"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.putAsset",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Assets.putAsset}.",
        "kind": "typedef",
        "name": "PutOptions",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ArrayBuffer",
                        "string"
                    ]
                },
                "optional": true,
                "description": "byte buffer or string value representing the new asset's content",
                "name": "data"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "ATP path mapping to automatically create (upon successful upload to hash)",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "whether to gzip compress data before uploading",
                "name": "compress"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.PutOptions",
        "scope": "static"
    },
    {
        "description": "Called when Assets.putAsset is complete.",
        "kind": "typedef",
        "name": "puttAssetCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "contains error message (or null value if no error occured while uploading/mapping the new asset)",
                "name": "error"
            },
            {
                "type": {
                    "names": [
                        "Asset~putAssetResult"
                    ]
                },
                "description": "result object containing error or result status of asset upload",
                "name": "result"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~puttAssetCallback",
        "scope": "inner"
    },
    {
        "description": "Result value returned by {@link Assets.putAsset}.",
        "kind": "typedef",
        "name": "putAssetResult",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the resolved \"atp:\" style URL for the uploaded asset (based on .path if specified, otherwise on the resulting ATP hash)",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the uploaded asset's resulting ATP path (or undefined if no path mapping was assigned)",
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the uploaded asset's resulting ATP hash",
                "name": "hash"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "flag indicating whether the data was compressed before upload",
                "name": "compressed"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "flag indicating final byte size of the data uploaded to the ATP server",
                "name": "byteLength"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets~putAssetResult",
        "scope": "inner"
    },
    {
        "kind": "function",
        "name": "deleteAsset",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.deleteAsset",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resolveAsset",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.resolveAsset",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "decompressData",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.decompressData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "compressData",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.compressData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "initializeCache",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.initializeCache",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canWriteCacheValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.canWriteCacheValue",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getCacheStatus",
        "params": [
            {
                "name": "scope"
            },
            {
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.getCacheStatus",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "queryCacheMeta",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.queryCacheMeta",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loadFromCache",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.loadFromCache",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "saveToCache",
        "params": [
            {
                "name": "options"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.saveToCache",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "saveToCache",
        "params": [
            {
                "name": "url"
            },
            {
                "name": "data"
            },
            {
                "name": "metadata"
            },
            {
                "name": "scope"
            },
            {
                "optional": true,
                "name": "callback"
            }
        ],
        "memberof": "Assets",
        "longname": "Assets.saveToCache",
        "scope": "static"
    },
    {
        "description": "Starts playing &mdash; \"injecting\" &mdash; the content of an audio file. The sound is played globally (sent to the audio \rmixer) so that everyone hears it, unless the <code>injectorOptions</code> has <code>localOnly</code> set to \r<code>true</code> in which case only the client hears the sound played. No sound is played if sent to the audio mixer \rbut the client is not connected to an audio mixer. The {@link AudioInjector} object returned by the function can be used \rto control the playback and get information about its current state.",
        "kind": "function",
        "name": "playSound",
        "params": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The content of an audio file, loaded using {@link SoundCache.getSound}. See \r{@link SoundObject} for supported formats.",
                "name": "sound"
            },
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "optional": true,
                "defaultvalue": "{}",
                "description": "Audio injector configuration.",
                "name": "injectorOptions"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AudioInjector"
                    ]
                },
                "description": "The audio injector that plays the audio file."
            }
        ],
        "examples": [
            "<caption>Play a sound.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);"
        ],
        "memberof": "Audio",
        "longname": "Audio.playSound",
        "scope": "static"
    },
    {
        "description": "Start playing the content of an audio file, locally (isn't sent to the audio mixer). This is the same as calling \r{@link Audio.playSound} with {@link AudioInjector.AudioInjectorOptions} <code>localOnly</code> set <code>true</code> and \rthe specified <code>position</code>.",
        "kind": "function",
        "name": "playSystemSound",
        "params": [
            {
                "type": {
                    "names": [
                        "SoundObject"
                    ]
                },
                "description": "The content of an audio file, loaded using {@link SoundCache.getSound}. See \r{@link SoundObject} for supported formats.",
                "name": "sound"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position in the domain to play the sound.",
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "AudioInjector"
                    ]
                },
                "description": "The audio injector that plays the audio file."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.playSystemSound",
        "scope": "static"
    },
    {
        "description": "Set whether or not the audio input should be used in stereo. If the audio input does not support stereo then setting a \rvalue of <code>true</code> has no effect.",
        "kind": "function",
        "name": "setStereoInput",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input should be used in stereo, otherwise <code>false</code>.",
                "name": "stereo"
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.setStereoInput",
        "scope": "static"
    },
    {
        "description": "Get whether or not the audio input is used in stereo.",
        "kind": "function",
        "name": "isStereoInput",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio input is used in stereo, otherwise <code>false</code>."
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.isStereoInput",
        "scope": "static"
    },
    {
        "description": "Triggered when the client is muted by the mixer because their loudness value for the noise background has reached the \rthreshold set for the domain in the server settings.",
        "kind": "function",
        "name": "mutedByMixer",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.mutedByMixer",
        "scope": "static"
    },
    {
        "description": "Triggered when the client is muted by the mixer because they're within a certain radius (50m) of someone who requested \rthe mute through Developer &gt; Audio &gt; Mute Environment.",
        "kind": "function",
        "name": "environmentMuted",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.environmentMuted",
        "scope": "static"
    },
    {
        "description": "Triggered when the client receives its first packet from the audio mixer.",
        "kind": "function",
        "name": "receivedFirstPacket",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.receivedFirstPacket",
        "scope": "static"
    },
    {
        "description": "Triggered when the client is disconnected from the audio mixer.",
        "kind": "function",
        "name": "disconnected",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.disconnected",
        "scope": "static"
    },
    {
        "description": "Triggered when the noise gate is opened: the input audio signal is no longer blocked (fully attenuated) because it has \rrisen above an adaptive threshold set just above the noise floor. Only occurs if <code>Audio.noiseReduction</code> is \r<code>true</code>.",
        "kind": "function",
        "name": "noiseGateOpened",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.noiseGateOpened",
        "scope": "static"
    },
    {
        "description": "Triggered when the noise gate is closed: the input audio signal is blocked (fully attenuated) because it has fallen \rbelow an adaptive threshold set just above the noise floor. Only occurs if <code>Audio.noiseReduction</code> is \r<code>true</code>.",
        "kind": "function",
        "name": "noiseGateClosed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.noiseGateClosed",
        "scope": "static"
    },
    {
        "description": "Triggered when a frame of audio input is processed.",
        "kind": "function",
        "name": "inputReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "Int16Array"
                    ]
                },
                "description": "The audio input processed.",
                "name": "inputSamples"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.inputReceived",
        "scope": "static"
    },
    {
        "description": "Triggered when the input audio use changes between mono and stereo.",
        "kind": "function",
        "name": "isStereoInputChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the input audio is stereo, otherwise <code>false</code>.",
                "name": "isStereo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Audio",
        "longname": "Audio.isStereoInputChanged",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "File",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "File",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "convertUrlToPath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "File",
        "longname": "File.convertUrlToPath",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "runUnzip",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "autoAdd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isZip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isBlocks"
            }
        ],
        "memberof": "File",
        "longname": "File.runUnzip",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTempDir",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "File",
        "longname": "File.getTempDir",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "unzipResult",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "zipFile"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "unzipFile"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "autoAdd"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isZip"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isBlocks"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "File",
        "longname": "File.unzipResult",
        "scope": "static"
    },
    {
        "description": "A keyboard key event.",
        "kind": "typedef",
        "name": "KeyEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The Qt keyboard code of the key pressed. For a list of keyboard codes, see \r    <a href=\"http://doc.qt.io/qt-5/qt.html#Key-enum\">http://doc.qt.io/qt-5/qt.html#Key-enum</a>.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string describing the key. For example, <code>\"a\"</code> for the \"A\" key if the Shift is not \r    pressed, <code>\"F1\"</code> for the F1 key, <code>\"SPACE\"</code> for the space bar.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a Shift key was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a meta key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if a control key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if an Alt key was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isAlt"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the key is on the numeric keypad, otherwise <code>false</code>.",
                "name": "isKeypad"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the event is a repeat for key that is being held down, otherwise \r    <code>false</code>.",
                "name": "isAutoRepeat"
            }
        ],
        "examples": [
            "<caption>Report the KeyEvent details for each key press.</caption>\rController.keyPressEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "KeyEvent",
        "scope": "global"
    },
    {
        "kind": "namespace",
        "name": "Mat4",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Mat4",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m1"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.multiply",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "createFromRotAndTrans",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "rot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "trans"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.createFromRotAndTrans",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "createFromScaleRotAndTrans",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "rot"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "trans"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.createFromScaleRotAndTrans",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "createFromColumns",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "name": "col0"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "name": "col1"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "name": "col2"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "name": "col"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.createFromColumns",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "createFromArray",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "name": "numbers"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.createFromArray",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "extractTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.extractTranslation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "extractRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.extractRotation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "extractScale",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.extractScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "transformPoint",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "point"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.transformPoint",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "transformVector",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.transformVector",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "inverse",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.inverse",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFront",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.getFront",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getForward",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.getForward",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getRight",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.getRight",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.getUp",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "name": "m"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "transpose"
            }
        ],
        "memberof": "Mat4",
        "longname": "Mat4.print",
        "scope": "static"
    },
    {
        "description": "A set of properties that can be passed to {@link Menu.addMenuItem} to create a new menu item.\r\rIf none of <code>position</code>, <code>beforeItem</code>, <code>afterItem</code>, or <code>grouping</code> are specified, \rthe menu item will be placed at the end of the menu.",
        "kind": "typedef",
        "name": "MenuItemProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu. Nested menus can be described using the \">\" symbol.",
                "name": "menuName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of the menu item.",
                "name": "menuItemName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is checkable.",
                "name": "isCheckable"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is checked.",
                "name": "isChecked"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether or not the menu item is a separator.",
                "name": "isSeparator"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "A shortcut key that triggers the menu item.",
                "name": "shortcutKey"
            },
            {
                "type": {
                    "names": [
                        "KeyEvent"
                    ]
                },
                "optional": true,
                "description": "A {@link KeyEvent} that specifies a key that triggers the menu item.",
                "name": "shortcutKeyEvent"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "description": "The position to place the new menu item. An integer number with <code>0</code> being the first\r    menu item.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of the menu item to place this menu item before.",
                "name": "beforeItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of the menu item to place this menu item after.",
                "name": "afterItem"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "The name of grouping to add this menu item to.",
                "name": "grouping"
            }
        ],
        "memberof": "Menu",
        "longname": "Menu.MenuItemProperties",
        "scope": "static"
    },
    {
        "description": "A controller mouse movement or button event.",
        "kind": "typedef",
        "name": "MouseEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer x-coordinate of the event on the Interface window or HMD HUD.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer y-coordinate of the event on the Interface window or HMD HUD.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"LEFT\"</code>, <code>\"MIDDLE\"</code>, or <code>\"RIGHT\"</code> if a button press or release \r    caused the event, otherwise <code>\"NONE\"</code>.",
                "name": "button"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the left button was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the middle button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the right button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Shift key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"meta\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"control\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Alt key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isAlt"
            }
        ],
        "examples": [
            "<caption>Report the MouseEvent details for each mouse move.</caption>\rController.mouseMoveEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "MouseEvent",
        "scope": "global"
    },
    {
        "description": "A quaternion value. See also the {@link Quat(0)|Quat} object.",
        "kind": "typedef",
        "name": "Quat",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component i.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component j.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Imaginary component k.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Real component.",
                "name": "w"
            }
        ],
        "longname": "Quat",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>The Quat API provides facilities for generating and manipulating quaternions.\rQuaternions should be used in preference to Euler angles wherever possible because quaternions don't suffer from the problem\rof gimbal lock.",
        "kind": "namespace",
        "name": "Quat",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: 0, w: 1 }</code> : The identity rotation, i.e., no rotation.\r    <em>Read-only.</em>",
                "name": "IDENTITY"
            }
        ],
        "examples": [
            "<caption>Print the <code>IDENTITY</code> value.</caption>\rprint(JSON.stringify(Quat.IDENTITY)); // { x: 0, y: 0, z: 0, w: 1 }\rprint(JSON.stringify(Quat.safeEulerAngles(Quat.IDENTITY))); // { x: 0, y: 0, z: 0 }"
        ],
        "longname": "Quat(0)",
        "scope": "global"
    },
    {
        "description": "Multiply two quaternions.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>q1</code> multiplied with <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Calculate the orientation of your avatar's right hand in world coordinates.</caption>\rvar handController = Controller.Standard.RightHand;\rvar handPose = Controller.getPoseValue(handController);\rif (handPose.valid) {\r    var handOrientation = Quat.multiply(MyAvatar.orientation, handPose.rotation);\r}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).multiply",
        "scope": "static"
    },
    {
        "description": "Normalizes a quaternion.",
        "kind": "function",
        "name": "normalize",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to normalize.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>q</code> normalized to have unit length."
            }
        ],
        "examples": [
            "<caption>Normalize a repeated delta rotation so that maths rounding errors don't accumulate.</caption>\rvar deltaRotation = Quat.fromPitchYawRollDegrees(0, 0.1, 0);\rvar currentRotation = Quat.ZERO;\rwhile (Quat.safeEulerAngles(currentRotation).y < 180) {\r    currentRotation = Quat.multiply(deltaRotation, currentRotation);\r    currentRotation = Quat.normalize(currentRotation);\r    // Use currentRotatation for something.\r}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).normalize",
        "scope": "static"
    },
    {
        "description": "Calculate the conjugate of a quaternion. For a unit quaternion, its conjugate is the same as its \r    {@link Quat(0).inverse|Quat.inverse}.",
        "kind": "function",
        "name": "conjugate",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to conjugate.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The conjugate of <code>q</code>."
            }
        ],
        "examples": [
            "<caption>A unit quaternion multiplied by its conjugate is a zero rotation.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\rQuat.print(\"quaternion\", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)\rvar conjugate = Quat.conjugate(quaternion);\rQuat.print(\"conjugate\", conjugate, true); // dvec3(1.116056, -22.242186, -28.451778)\rvar identity = Quat.multiply(conjugate, quaternion);\rQuat.print(\"identity\", identity, true); // dvec3(0.000000, 0.000000, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).conjugate",
        "scope": "static"
    },
    {
        "description": "Calculate a camera orientation given eye position, point of interest, and \"up\" direction. The camera's negative z-axis is\rthe forward direction. The result has zero roll about its forward direction with respect to the given \"up\" direction.",
        "kind": "function",
        "name": "lookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eye position.",
                "name": "eye"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to look at.",
                "name": "target"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The \"up\" direction.",
                "name": "up"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to\rbe the cross product of the eye-to-target and up vectors."
            }
        ],
        "examples": [
            "<caption>Rotate your view in independent mode to look at the world origin upside down.</caption>\rCamera.mode = \"independent\";\rCamera.orientation = Quat.lookAt(Camera.position, Vec3.ZERO, Vec3.UNIT_NEG_Y);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).lookAt",
        "scope": "static"
    },
    {
        "description": "Calculate a camera orientation given eye position and point of interest. The camera's negative z-axis is the forward \rdirection. The result has zero roll about its forward direction.",
        "kind": "function",
        "name": "lookAtSimple",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The eye position.",
                "name": "eye"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to look at.",
                "name": "target"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to be\r    the cross product of the eye-to-target and an \"up\" vector. The \"up\" vector is the y-axis unless the eye-to-target\r    vector is nearly aligned with it (i.e., looking near vertically up or down), in which case the x-axis is used as the\r    \"up\" vector."
            }
        ],
        "examples": [
            "<caption>Rotate your view in independent mode to look at the world origin.</caption>\rCamera.mode = \"independent\";\rCamera.orientation = Quat.lookAtSimple(Camera.position, Vec3.ZERO);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).lookAtSimple",
        "scope": "static"
    },
    {
        "description": "Calculate the shortest rotation from a first vector onto a second.",
        "kind": "function",
        "name": "rotationBetween",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation from <code>v1</code> onto <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>Apply a change in velocity to an entity and rotate it to face the direction it's travelling.</caption>\rvar newVelocity = Vec3.sum(entityVelocity, deltaVelocity);\rvar properties = { velocity: newVelocity };\rif (Vec3.length(newVelocity) > 0.001) {\r    properties.rotation = Quat.rotationBetween(entityVelocity, newVelocity);\r}\rEntities.editEntity(entityID, properties);\rentityVelocity = newVelocity;"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).rotationBetween",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from a {@link Vec3} of Euler angles in degrees.",
        "kind": "function",
        "name": "fromVec3Degrees",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector of three Euler angles in degrees, the angles being the rotations about the x, y, and z\r    axes.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created from the Euler angles in <code>vector</code>."
            }
        ],
        "examples": [
            "<caption>Zero out pitch and roll from an orientation.</caption>\rvar eulerAngles = Quat.safeEulerAngles(orientation);\reulerAngles.x = 0;\reulerAngles.z = 0;\rvar newOrientation = Quat.fromVec3Degrees(eulerAngles);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromVec3Degrees",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from a {@link Vec3} of Euler angles in radians.",
        "kind": "function",
        "name": "fromVec3Radians",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector of three Euler angles in radians, the angles being the rotations about the x, y, and z\r    axes.",
                "name": "vector"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created using the Euler angles in <code>vector</code>."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromVec3Radians({ x: 0, y: Math.PI, z: 0 });"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromVec3Radians",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from pitch, yaw, and roll values in degrees.",
        "kind": "function",
        "name": "fromPitchYawRollDegrees",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch angle in degrees.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw angle in degrees.",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll angle in degrees.",
                "name": "roll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created using the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromPitchYawRollDgrees(0, 180, 0 );"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromPitchYawRollDegrees",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion from pitch, yaw, and roll values in radians.",
        "kind": "function",
        "name": "fromPitchYawRollRadians",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The pitch angle in radians.",
                "name": "pitch"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The yaw angle in radians.",
                "name": "yaw"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The roll angle in radians.",
                "name": "roll"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion created from the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles."
            }
        ],
        "examples": [
            "<caption>Create a rotation of 180 degrees about the y axis.</caption>\rvar rotation = Quat.fromPitchYawRollRadians(0, Math.PI, 0);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).fromPitchYawRollRadians",
        "scope": "static"
    },
    {
        "description": "Calculate the inverse of a quaternion. For a unit quaternion, its inverse is the same as its\r    {@link Quat(0).conjugate|Quat.conjugate}.",
        "kind": "function",
        "name": "inverse",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The inverse of <code>q</code>."
            }
        ],
        "examples": [
            "<caption>A quaternion multiplied by its inverse is a zero rotation.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\rQuat.print(\"quaternion\", quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)\rvar inverse = Quat.invserse(quaternion);\rQuat.print(\"inverse\", inverse, true); // dvec3(1.116056, -22.242186, -28.451778)\rvar identity = Quat.multiply(inverse, quaternion);\rQuat.print(\"identity\", identity, true); // dvec3(0.000000, 0.000000, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).inverse",
        "scope": "static"
    },
    {
        "description": "Get the \"front\" direction that the camera would face if its orientation was set to the quaternion value.\rThis is a synonym for {@link Quat(0).getForward|Quat.getForward}.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getFront",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getFront",
        "scope": "static"
    },
    {
        "description": "Get the \"forward\" direction that the camera would face if its orientation was set to the quaternion value.\rThis is a synonym for {@link Quat(0).getFront|Quat.getFront}.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getForward",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The negative z-axis rotated by <code>orientation</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate that the \"forward\" vector is for the negative z-axis.</caption>\rvar forward = Quat.getForward(Quat.IDENTITY);\rprint(JSON.stringify(forward)); // {\"x\":0,\"y\":0,\"z\":-1}"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getForward",
        "scope": "static"
    },
    {
        "description": "Get the \"right\" direction that the camera would have if its orientation was set to the quaternion value.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getRight",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The x-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getRight",
        "scope": "static"
    },
    {
        "description": "Get the \"up\" direction that the camera would have if its orientation was set to the quaternion value.\rThe High Fidelity camera has axes x = right, y = up, -z = forward.",
        "kind": "function",
        "name": "getUp",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The y-axis rotated by <code>orientation</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).getUp",
        "scope": "static"
    },
    {
        "description": "Calculate the Euler angles for the quaternion, in degrees. (The \"safe\" in the name signifies that the angle results will\rnot be garbage even when the rotation is particularly difficult to decompose with pitches around +/-90 degrees.)",
        "kind": "function",
        "name": "safeEulerAngles",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A {@link Vec3} of Euler angles for the <code>orientation</code>, in degrees, the angles being the \rrotations about the x, y, and z axes."
            }
        ],
        "examples": [
            "<caption>Report the camera yaw.</caption>\rvar eulerAngles = Quat.safeEulerAngles(Camera.orientation);\rprint(\"Camera yaw: \" + eulerAngles.y);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).safeEulerAngles",
        "scope": "static"
    },
    {
        "description": "Generate a quaternion given an angle to rotate through and an axis to rotate about.",
        "kind": "function",
        "name": "angleAxis",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle to rotate through, in degrees.",
                "name": "angle"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The unit axis to rotate about.",
                "name": "axis"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion that is a rotation through <code>angle</code> degrees about the <code>axis</code>. \r<strong>WARNING:</strong> This value is in degrees whereas the value returned by {@link Quat(0).angle|Quat.angle} is\rin radians."
            }
        ],
        "examples": [
            "<caption>Calculate a rotation of 90 degrees about the direction your camera is looking.</caption>\rvar rotation = Quat.angleAxis(90, Quat.getForward(Camera.orientation));"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).angleAxis",
        "scope": "static"
    },
    {
        "description": "Get the rotation axis for a quaternion.",
        "kind": "function",
        "name": "axis",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normalized rotation axis for <code>q</code>."
            }
        ],
        "examples": [
            "<caption>Get the rotation axis of a quaternion.</caption>\rvar forward = Quat.getForward(Camera.orientation);\rvar rotation = Quat.angleAxis(90, forward);\rvar axis = Quat.axis(rotation);\rprint(\"Forward: \" + JSON.stringify(forward));\rprint(\"Axis: \" + JSON.stringify(axis)); // Same value as forward."
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).axis",
        "scope": "static"
    },
    {
        "description": "Get the rotation angle for a quaternion.",
        "kind": "function",
        "name": "angle",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion.",
                "name": "q"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The rotation angle for <code>q</code>, in radians. <strong>WARNING:</strong> This value is in radians \rwhereas the value used by {@link Quat(0).angleAxis|Quat.angleAxis} is in degrees."
            }
        ],
        "examples": [
            "<caption>Get the rotation angle of a quaternion.</caption>\rvar forward = Quat.getForward(Camera.orientation);\rvar rotation = Quat.angleAxis(90, forward);\rvar angle = Quat.angle(rotation);\rprint(\"Angle: \" + angle * 180 / Math.PI);  // 90 degrees."
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).angle",
        "scope": "static"
    },
    {
        "description": "Compute a spherical linear interpolation between two rotations, safely handling two rotations that are very similar.\rSee also, {@link Quat(0).slerp|Quat.slerp}.",
        "kind": "function",
        "name": "mix",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The beginning rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The ending rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion\r    of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns \r    <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Animate between one rotation and another.</caption>\rvar dt = amountOfTimeThatHasPassed;\rvar mixFactor = amountOfTimeThatHasPassed / TIME_TO_COMPLETE;\rif (mixFactor > 1) {\r    mixFactor = 1;\r}\rvar newRotation = Quat.mix(startRotation, endRotation, mixFactor);"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).mix",
        "scope": "static"
    },
    {
        "description": "Compute a spherical linear interpolation between two rotations, for rotations that are not very similar.\rSee also, {@link Quat(0).mix|Quat.mix}.",
        "kind": "function",
        "name": "slerp",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The beginning rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The ending rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion\r    of <code>q2</code>'s value to return in favor of <code>q1</code>'s value. A value of <code>0.0</code> returns\r    <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).slerp",
        "scope": "static"
    },
    {
        "description": "Compute a spherical quadrangle interpolation between two rotations along a path oriented toward two other rotations.\rEquivalent to: <code>Quat.slerp(Quat.slerp(q1, q2, alpha), Quat.slerp(s1, s2, alpha), 2 * alpha * (1.0 - alpha))</code>.",
        "kind": "function",
        "name": "squad",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Initial rotation.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Final rotation.",
                "name": "q2"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "First control point.",
                "name": "s1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "Second control point.",
                "name": "s2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The mixture coefficient between <code>0.0</code> and <code>1.0</code>. A value of \r    <code>0.0</code> returns <code>q1</code>'s value; <code>1.0</code> returns <code>q2s</code>'s value.",
                "name": "alpha"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A spherical quadrangle interpolation between rotations <code>q1</code> and <code>q2</code> using control\r    points <code>s1</code> and <code>s2</code>."
            }
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).squad",
        "scope": "static"
    },
    {
        "description": "Calculate the dot product of two quaternions. The closer the quaternions are to each other the more non-zero the value is\r(either positive or negative). Identical unit rotations have a dot product of +/- 1.",
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dot product of <code>q1</code> and <code>q2</code>."
            }
        ],
        "examples": [
            "<caption>Testing unit quaternions for equality.</caption>\rvar q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rvar q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rprint(Quat.equal(q1, q2)); // true\rvar q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);\rprint(Quat.equal(q1, q3)); // false\r\rvar dot = Quat.dot(q1, q3);\rprint(dot); // -0.9999999403953552\rvar equal = Math.abs(1 - Math.abs(dot)) < 0.000001;\rprint(equal); // true"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).dot",
        "scope": "static"
    },
    {
        "description": "Print to the program log a text label followed by a quaternion's pitch, yaw, and roll Euler angles.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The quaternion to print.",
                "name": "q"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If <code>true</code> the angle values are printed in degrees, otherwise they are\r    printed in radians.",
                "name": "asDegrees"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label plus a quaternion's Euler angles.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(0, 45, 0);\r\r// Quaternion: dvec3(0.000000, 45.000004, 0.000000)\rQuat.print(\"Quaternion:\", quaternion,  true);\r\r// Quaternion: {\"x\":0,\"y\":45.000003814697266,\"z\":0}\rprint(\"Quaternion: \" + JSON.stringify(Quat.safeEulerAngles(quaternion)));"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).print",
        "scope": "static"
    },
    {
        "description": "Test whether two quaternions are equal. <strong>Note:</strong> The quaternions must be exactly equal in order for \r<code>true</code> to be returned; it is often better to use {@link Quat(0).dot|Quat.dot} and test for closeness to +/-1.",
        "kind": "function",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The first quaternion.",
                "name": "q1"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The second quaternion.",
                "name": "q2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the quaternions are equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Testing unit quaternions for equality.</caption>\rvar q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rvar q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);\rprint(Quat.equal(q1, q2)); // true\rvar q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);\rprint(Quat.equal(q1, q3)); // false\r\rvar dot = Quat.dot(q1, q3);\rprint(dot); // -0.9999999403953552\rvar equal = Math.abs(1 - Math.abs(dot)) < 0.000001;\rprint(equal); // true"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).equal",
        "scope": "static"
    },
    {
        "description": "Cancels out the roll and pitch component of a quaternion so that its completely horizontal with a yaw pointing in the \rgiven quaternion's direction.",
        "kind": "function",
        "name": "cancelOutRollAndPitch",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>orientation</code> with its roll and pitch canceled out."
            }
        ],
        "examples": [
            "<caption>Two ways of calculating a camera orientation in the x-z plane with a yaw pointing in the direction of\r    a given quaternion.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\r\rvar noRollOrPitch = Quat.cancelOutRollAndPitch(quaternion);\rQuat.print(\"\", noRollOrPitch, true); // dvec3(0.000000, 22.245995, 0.000000)\r\rvar front = Quat.getFront(quaternion);\rvar lookAt = Quat.lookAtSimple(Vec3.ZERO, { x: front.x, y: 0, z: front.z });\rQuat.print(\"\", lookAt, true); // dvec3(0.000000, 22.245996, 0.000000)"
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).cancelOutRollAndPitch",
        "scope": "static"
    },
    {
        "description": "Cancels out the roll component of a quaternion so that its horizontal axis is level.",
        "kind": "function",
        "name": "cancelOutRoll",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "A quaternion representing an orientation.",
                "name": "orientation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "<code>orientation</code> with its roll canceled out."
            }
        ],
        "examples": [
            "<caption>Two ways of calculating a camera orientation that points in the direction of a given quaternion but\r    keeps the camera's horizontal axis level.</caption>\rvar quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);\r\rvar noRoll = Quat.cancelOutRoll(quaternion);\rQuat.print(\"\", noRoll, true); // dvec3(-1.033004, 22.245996, -0.000000)\r\rvar front = Quat.getFront(quaternion);\rvar lookAt = Quat.lookAtSimple(Vec3.ZERO, front);\rQuat.print(\"\", lookAt, true); // dvec3(-1.033004, 22.245996, -0.000000)\r\n    "
        ],
        "memberof": "Quat(0)",
        "longname": "Quat(0).cancelOutRoll",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Recording",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAssignmentClient": true,
        "longname": "Recording",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "loadRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Recording~loadRecordingCallback"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "callback"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.loadRecording",
        "scope": "static"
    },
    {
        "description": "Called when {@link Recording.loadRecording} is complete.",
        "kind": "typedef",
        "name": "loadRecordingCallback",
        "type": {
            "names": [
                "function"
            ]
        },
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording~loadRecordingCallback",
        "scope": "inner"
    },
    {
        "kind": "function",
        "name": "startPlaying",
        "memberof": "Recording",
        "longname": "Recording.startPlaying",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "pausePlayer",
        "memberof": "Recording",
        "longname": "Recording.pausePlayer",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "stopPlaying",
        "memberof": "Recording",
        "longname": "Recording.stopPlaying",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isPlaying",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.isPlaying",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isPaused",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.isPaused",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "playerElapsed",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.playerElapsed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "playerLength",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.playerLength",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerVolume",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "volume"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerVolume",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerAudioOffset",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "audioOffset"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerAudioOffset",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerTime",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "time"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerTime",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerLoop",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "loop"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerLoop",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerUseDisplayName",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "useDisplayName"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseDisplayName",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerUseAttachments",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "useAttachments"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseAttachments",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerUseHeadModel",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "useHeadModel"
            }
        ],
        "todo": [
            "<strong>Note:</strong> This function currently has no effect."
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseHeadModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayerUseSkeletonModel",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "useSkeletonModel"
            }
        ],
        "todo": [
            "<strong>Note:</strong> This function currently doesn't work."
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayerUseSkeletonModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPlayFromCurrentLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "playFromCurrentLocation"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.setPlayFromCurrentLocation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPlayerUseDisplayName",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseDisplayName",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPlayerUseAttachments",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseAttachments",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPlayerUseHeadModel",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseHeadModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPlayerUseSkeletonModel",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayerUseSkeletonModel",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPlayFromCurrentLocation",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getPlayFromCurrentLocation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "startRecording",
        "memberof": "Recording",
        "longname": "Recording.startRecording",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "stopRecording",
        "memberof": "Recording",
        "longname": "Recording.stopRecording",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isRecording",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.isRecording",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "recorderElapsed",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.recorderElapsed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDefaultRecordingSaveDirectory",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.getDefaultRecordingSaveDirectory",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "saveRecording",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.saveRecording",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "saveRecordingToAsset",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "getClipAtpUrl"
            }
        ],
        "memberof": "Recording",
        "longname": "Recording.saveRecordingToAsset",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loadLastRecording",
        "memberof": "Recording",
        "longname": "Recording.loadLastRecording",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Location",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "longitude"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "latitude"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "altitude"
            }
        ],
        "memberof": "Scene.Stage",
        "longname": "Scene.Stage.Location",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Time",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "hour"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "day"
            }
        ],
        "memberof": "Scene.Stage",
        "longname": "Scene.Stage.Time",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "KeyLight",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "color"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "intensity"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "ambientIntensity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "direction"
            }
        ],
        "memberof": "Scene.Stage",
        "longname": "Scene.Stage.KeyLight",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "Stage",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "backgroundMode"
            },
            {
                "type": {
                    "names": [
                        "Scene.Stage.KeyLight"
                    ]
                },
                "name": "keyLight"
            },
            {
                "type": {
                    "names": [
                        "Scene.Stage.Location"
                    ]
                },
                "name": "location"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "sunModel"
            },
            {
                "type": {
                    "names": [
                        "Scene.Stage.Time"
                    ]
                },
                "name": "time"
            }
        ],
        "memberof": "Scene",
        "longname": "Scene.Stage",
        "scope": "static",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "setOrientation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "orientation"
            }
        ],
        "memberof": "Scene.Stage",
        "longname": "Scene.Stage.setOrientation",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setLocation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "longitude"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "latitude"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "altitude"
            }
        ],
        "memberof": "Scene.Stage",
        "longname": "Scene.Stage.setLocation",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Scene",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "shouldRenderAvatars"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "shouldRenderEntities"
            },
            {
                "type": {
                    "names": [
                        "Scene.Stage"
                    ]
                },
                "name": "stage"
            }
        ],
        "longname": "Scene",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "shouldRenderAvatarsChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "shouldRenderAvatars"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Scene",
        "longname": "Scene.shouldRenderAvatarsChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "shouldRenderEntitiesChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "shouldRenderEntities"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Scene",
        "longname": "Scene.shouldRenderEntitiesChanged",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>Plays &mdash; \"injects\" &mdash; the content of an audio file. Used in the {@link Audio} API.",
        "kind": "class",
        "name": "AudioInjector",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio is currently playing, otherwise <code>false</code>. \r    <em>Read-only.</em>",
                "name": "playing"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness in the last frame of audio, range <code>0.0</code> &ndash; <code>1.0</code>. \r    <em>Read-only.</em>",
                "name": "loudness"
            },
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "description": "Configures how the injector plays the audio.",
                "name": "options"
            }
        ],
        "longname": "AudioInjector",
        "scope": "global"
    },
    {
        "description": "Stop current playback, if any, and start playing from the beginning.",
        "kind": "function",
        "name": "restart",
        "memberof": "AudioInjector",
        "longname": "AudioInjector.restart",
        "scope": "static"
    },
    {
        "description": "Stop audio playback.",
        "kind": "function",
        "name": "stop",
        "examples": [
            "<caption>Stop playing a sound before it finishes.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);\r\rScript.setTimeout(function () {\r    injector.stop();\r}, 2000);"
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.stop",
        "scope": "static"
    },
    {
        "description": "Get the current configuration of the audio injector.",
        "kind": "function",
        "name": "getOptions",
        "returns": [
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "description": "Configuration of how the injector plays the audio."
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.getOptions",
        "scope": "static"
    },
    {
        "description": "Configure how the injector plays the audio.",
        "kind": "function",
        "name": "setOptions",
        "params": [
            {
                "type": {
                    "names": [
                        "AudioInjector.AudioInjectorOptions"
                    ]
                },
                "description": "Configuration of how the injector plays the audio.",
                "name": "options"
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.setOptions",
        "scope": "static"
    },
    {
        "description": "Get the loudness of the most recent frame of audio played.",
        "kind": "function",
        "name": "getLoudness",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The loudness of the most recent frame of audio played, range <code>0.0</code> &ndash; <code>1.0</code>."
            }
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.getLoudness",
        "scope": "static"
    },
    {
        "description": "Get whether or not the audio is currently playing.",
        "kind": "function",
        "name": "isPlaying",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the audio is currently playing, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>See if a sound is playing.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r}, 1000);\r\rScript.setTimeout(function () {\r    print(\"Sound is playing: \" + injector.isPlaying());\r}, 2000);"
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.isPlaying",
        "scope": "static"
    },
    {
        "description": "Triggered when the audio has finished playing.",
        "kind": "function",
        "name": "finished",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report when a sound has finished playing.</caption>\rvar sound = SoundCache.getSound(Script.resourcesPath() + \"sounds/sample.wav\");\rvar injector;\rvar injectorOptions = {\r    position: MyAvatar.position\r};\r\rScript.setTimeout(function () { // Give the sound time to load.\r    injector = Audio.playSound(sound, injectorOptions);\r    injector.finished.connect(function () {\r        print(\"Finished playing sound\");\r    });\r}, 1000);"
        ],
        "memberof": "AudioInjector",
        "longname": "AudioInjector.finished",
        "scope": "static"
    },
    {
        "description": "Stop audio playback. (Synonym of {@link AudioInjector.stop|stop}.)",
        "kind": "function",
        "name": "stopInjectorImmediately",
        "memberof": "AudioInjector",
        "longname": "AudioInjector.stopInjectorImmediately",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Resource",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Resource.State"
                    ]
                },
                "name": "State"
            }
        ],
        "longname": "Resource",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "description": "Triggered when the script starts for a user.\r<p>Note: Can only be connected to via <code>this.preload = function (...) { ... }</code> in the entity script.</p>\r<table><tr><th>Available in:</th><td>Client Entity Scripts</td><td>Server Entity Scripts</td></tr></table>",
        "kind": "function",
        "name": "preload",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that the script is running in.",
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Get the ID of the entity that a client entity script is running in.</caption>\rvar entityScript = (function () {\r    this.entityID = Uuid.NULL;\r\r    this.preload = function (entityID) {\r        this.entityID = entityID;\r        print(\"Entity ID: \" + this.entityID);\r    };\r);\r\rvar entityID = Entities.addEntity({\r    type: \"Box\",\r    position: Vec3.sum(MyAvatar.position, Vec3.multiplyQbyV(MyAvatar.orientation, { x: 0, y: 0, z: -5 })),\r    dimensions: { x: 0.5, y: 0.5, z: 0.5 },\r    color: { red: 255, green: 0, blue: 0 },\r    script: \"(\" + entityScript + \")\",  // Could host the script on a Web server instead.\r    lifetime: 300  // Delete after 5 minutes.\r});"
        ],
        "memberof": "Entities",
        "longname": "Entities.preload",
        "scope": "static"
    },
    {
        "description": "Triggered when the script terminates for a user.\r<p>Note: Can only be connected to via <code>this.unoad = function () { ... }</code> in the entity script.</p>\r<table><tr><th>Available in:</th><td>Client Entity Scripts</td><td>Server Entity Scripts</td></tr></table>",
        "kind": "function",
        "name": "unload",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Entities",
        "longname": "Entities.unload",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Script",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "context"
            }
        ],
        "longname": "Script",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "description": "Stop the current script.",
        "kind": "function",
        "name": "stop",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "marshal"
            }
        ],
        "memberof": "Script",
        "longname": "Script.stop",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerGlobalObject",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "object"
            }
        ],
        "memberof": "Script",
        "longname": "Script.registerGlobalObject",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerGetterSetter",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "getter"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "setter"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "parent"
            }
        ],
        "memberof": "Script",
        "longname": "Script.registerGetterSetter",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "numArguments"
            }
        ],
        "memberof": "Script",
        "longname": "Script.registerFunction",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerFunction",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "parent"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "numArguments"
            }
        ],
        "memberof": "Script",
        "longname": "Script.registerFunction",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "registerValue",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "Script",
        "longname": "Script.registerValue",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "evaluate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "program"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": -1,
                "name": "lineNumber"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.evaluate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "evaluateInClosure",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "locals"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "program"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.evaluateInClosure",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getContext",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.getContext",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isClientScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.isClientScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isDebugMode",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.isDebugMode",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isEntityClientScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.isEntityClientScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isEntityServerScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.isEntityServerScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isAgentScript",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.isAgentScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "addEventHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "eventName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "handler"
            }
        ],
        "memberof": "Script",
        "longname": "Script.addEventHandler",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "removeEventHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "eventName"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "handler"
            }
        ],
        "memberof": "Script",
        "longname": "Script.removeEventHandler",
        "scope": "static"
    },
    {
        "description": "Start a new Interface or entity script.",
        "kind": "function",
        "name": "load",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the script to load. Can be relative to the current script.",
                "name": "filename"
            }
        ],
        "examples": [
            "<caption>Load a script from another script.</caption>\r// First file: scriptA.js\rprint(\"This is script A\");\r\r// Second file: scriptB.js\rprint(\"This is script B\");\rScript.load(\"scriptA.js\");\r\r// If you run scriptB.js you should see both scripts in the running scripts list.\r// And you should see the following output:\r// This is script B\r// This is script A"
        ],
        "memberof": "Script",
        "longname": "Script.load",
        "scope": "static"
    },
    {
        "description": "Include JavaScript from other files in the current script. If a callback is specified the files are loaded and included \rasynchronously, otherwise they are included synchronously (i.e., script execution blocks while the files are included).",
        "kind": "function",
        "name": "include",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The URLs of the scripts to include. Each can be relative to the current script.",
                "name": "filenames"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "The function to call back when the scripts have been included. Can be an in-line \rfunction or the name of a function.",
                "name": "callback"
            }
        ],
        "memberof": "Script",
        "longname": "Script.include",
        "scope": "static"
    },
    {
        "description": "Include JavaScript from another file in the current script. If a callback is specified the file is loaded and included \rasynchronously, otherwise it is included synchronously (i.e., script execution blocks while the file is included).",
        "kind": "function",
        "name": "include",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the script to include. Can be relative to the current script.",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "description": "The function to call back when the script has been included. Can be an in-line \rfunction or the name of a function.",
                "name": "callback"
            }
        ],
        "examples": [
            "<caption>Include a script file asynchronously.</caption>\r// First file: scriptA.js\rprint(\"This is script A\");\r\r// Second file: scriptB.js\rprint(\"This is script B\");\rScript.include(\"scriptA.js\", function () {\r    print(\"Script A has been included\");\r});\r\r// If you run scriptB.js you should see only scriptB.js in the running scripts list.\r// And you should see the following output:\r// This is script B\r// This is script A\r// Script A has been included"
        ],
        "memberof": "Script",
        "longname": "Script.include",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "require",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "module"
            }
        ],
        "memberof": "Script",
        "longname": "Script.require",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetModuleCache",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "deleteScriptCache"
            }
        ],
        "memberof": "Script",
        "longname": "Script.resetModuleCache",
        "scope": "static"
    },
    {
        "description": "Call a function at a set interval.",
        "kind": "function",
        "name": "setInterval",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call. Can be an in-line function or the name of a function.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The interval at which to call the function, in ms.",
                "name": "interval"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "A handle to the interval timer. Can be used by {@link Script.clearInterval}."
            }
        ],
        "examples": [
            "<caption>Print a message every second.</caption>\rScript.setInterval(function () {\r    print(\"Timer fired\");\r}, 1000);"
        ],
        "memberof": "Script",
        "longname": "Script.setInterval",
        "scope": "static"
    },
    {
        "description": "Call a function after a delay.",
        "kind": "function",
        "name": "setTimeout",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call. Can be an in-line function or the name of a function.",
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The delay after which to call the function, in ms.",
                "name": "timeout"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "A handle to the timeout timer. Can be used by {@link Script.clearTimeout}."
            }
        ],
        "examples": [
            "<caption>Print a message after a second.</caption>\rScript.setTimeout(function () {\r    print(\"Timer fired\");\r}, 1000);"
        ],
        "memberof": "Script",
        "longname": "Script.setTimeout",
        "scope": "static"
    },
    {
        "description": "Stop an interval timer set by {@link Script.setInterval|setInterval}.",
        "kind": "function",
        "name": "clearInterval",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The interval timer to clear.",
                "name": "timer"
            }
        ],
        "examples": [
            "<caption>Stop an interval timer.</caption>\r// Print a message every second.\rvar timer = Script.setInterval(function () {\r    print(\"Timer fired\");\r}, 1000);\r\r// Stop the timer after 10 seconds.\rScript.setTimeout(function () {\r    print(\"Stop timer\");\r    Script.clearInterval(timer);\r}, 10000);"
        ],
        "memberof": "Script",
        "longname": "Script.clearInterval",
        "scope": "static"
    },
    {
        "description": "Clear a timeout timer set by {@link Script.setTimeout|setTimeout}.",
        "kind": "function",
        "name": "clearTimeout",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The timeout timer to clear.",
                "name": "timer"
            }
        ],
        "examples": [
            "<caption>Stop a timeout timer.</caption>\r// Print a message after two seconds.\rvar timer = Script.setTimeout(function () {\r    print(\"Timer fired\");\r}, 2000);\r\r// Uncomment the following line to stop the timer from firing.\r//Script.clearTimeout(timer);"
        ],
        "memberof": "Script",
        "longname": "Script.clearTimeout",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "Script",
        "longname": "Script.print",
        "scope": "static"
    },
    {
        "description": "Resolve a relative path to an absolute path.",
        "kind": "function",
        "name": "resolvePath",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The relative path to resolve.",
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The absolute path."
            }
        ],
        "memberof": "Script",
        "longname": "Script.resolvePath",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resourcesPath",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.resourcesPath",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "beginProfileRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "label"
            }
        ],
        "memberof": "Script",
        "longname": "Script.beginProfileRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "endProfileRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "label"
            }
        ],
        "memberof": "Script",
        "longname": "Script.endProfileRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isEntityScriptRunning",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.isEntityScriptRunning",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loadEntityScript",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "script"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "forceRedownload"
            }
        ],
        "memberof": "Script",
        "longname": "Script.loadEntityScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "unloadEntityScript",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "shouldRemoveFromMap"
            }
        ],
        "memberof": "Script",
        "longname": "Script.unloadEntityScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "unloadAllEntityScripts",
        "memberof": "Script",
        "longname": "Script.unloadAllEntityScripts",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "callEntityScriptMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "parameters"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "optional": true,
                "defaultvalue": "Uuid.NULL",
                "name": "remoteCallerID"
            }
        ],
        "memberof": "Script",
        "longname": "Script.callEntityScriptMethod",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "callEntityScriptMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "PointerEvent"
                    ]
                },
                "name": "event"
            }
        ],
        "memberof": "Script",
        "longname": "Script.callEntityScriptMethod",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "callEntityScriptMethod",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "methodName"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "otherID"
            },
            {
                "type": {
                    "names": [
                        "Collision"
                    ]
                },
                "name": "collision"
            }
        ],
        "memberof": "Script",
        "longname": "Script.callEntityScriptMethod",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "requestGarbageCollection",
        "memberof": "Script",
        "longname": "Script.requestGarbageCollection",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "generateUUID",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.generateUUID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "callAnimationStateHandler",
        "params": [
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "name": "callback"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "parameters"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "names"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "useNames"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "resultHandler"
            }
        ],
        "memberof": "Script",
        "longname": "Script.callAnimationStateHandler",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateMemoryCost",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "deltaSize"
            }
        ],
        "memberof": "Script",
        "longname": "Script.updateMemoryCost",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.scriptLoaded",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "errorLoadingScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.errorLoadingScript",
        "scope": "static"
    },
    {
        "description": "Triggered regularly at a system-determined frequency.",
        "kind": "function",
        "name": "update",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The time since the last update, in s.",
                "name": "deltaTime"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.update",
        "scope": "static"
    },
    {
        "description": "Triggered when the script is ending.",
        "kind": "function",
        "name": "scriptEnding",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Connect to the <code>scriptEnding</code> signal.</caption>\rprint(\"Script started\");\r\rScript.scriptEnding.connect(function () {\r    print(\"Script ending\");\r});\r\rScript.setTimeout(function () {\r    print(\"Stopping script\");\r    Script.stop();\r}, 1000);"
        ],
        "memberof": "Script",
        "longname": "Script.scriptEnding",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "finished",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "engine"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.finished",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "cleanupMenuItem",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "menuItem"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.cleanupMenuItem",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "printedMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.printedMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "errorMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.errorMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "warningMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.warningMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "infoMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.infoMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "runningStateChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.runningStateChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearDebugWindow",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loadScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isUserLoaded"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.loadScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "reloadScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isUserLoaded"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.reloadScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "doneRunning",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.doneRunning",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "entityScriptDetailsUpdated",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.entityScriptDetailsUpdated",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "entityScriptPreloadFinished",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script.entityScriptPreloadFinished",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "executeOnScriptThread",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "function"
            },
            {
                "type": {
                    "names": [
                        "ConnectionType"
                    ]
                },
                "optional": true,
                "defaultvalue": 2,
                "name": "type"
            }
        ],
        "memberof": "Script",
        "longname": "Script.executeOnScriptThread",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "_requireResolve",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "module"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "relativeTo"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Script",
        "longname": "Script._requireResolve",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "entityScriptContentAvailable",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptOrURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "contents"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isURL"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "success"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "status"
            }
        ],
        "memberof": "Script",
        "longname": "Script.entityScriptContentAvailable",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "ScriptDiscoveryService",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "debugScriptUrl"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "defaultScriptsPath"
            },
            {
                "type": {
                    "names": [
                        "ScriptsModel"
                    ]
                },
                "name": "scriptsModel"
            },
            {
                "type": {
                    "names": [
                        "ScriptsModelFilter"
                    ]
                },
                "name": "scriptsModelFilter"
            }
        ],
        "longname": "ScriptDiscoveryService",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "loadOneScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.loadOneScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loadScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "name": "isUserLoaded"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "loadScriptFromEditor"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "activateMainWindow"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "reload"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "quitWhenFinished"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.loadScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "stopScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptHash"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "restart"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.stopScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "reloadAllScripts",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.reloadAllScripts",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "stopAllScripts",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "restart"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.stopAllScripts",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getRunning",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.getRunning",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPublic",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.getPublic",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getLocal",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.getLocal",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptCountChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.scriptCountChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptsReloading",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.scriptsReloading",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptLoadError",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "error"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.scriptLoadError",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "printedMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "engineName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.printedMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "errorMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "engineName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.errorMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "warningMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "engineName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.warningMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "infoMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "engineName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.infoMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "errorLoadingScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.errorLoadingScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearDebugWindow",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onPrintedMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onPrintedMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onErrorMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onErrorMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onWarningMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onWarningMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onInfoMessage",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "message"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "scriptName"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onInfoMessage",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onErrorLoadingScript",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onErrorLoadingScript",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onClearDebugWindow",
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onClearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "onScriptFinished",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "filename"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "engine"
            }
        ],
        "memberof": "ScriptDiscoveryService",
        "longname": "ScriptDiscoveryService.onScriptFinished",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br><p>Provided as a property of {@link ScriptDiscoveryService}.</p>\r<p>Has properties and functions below in addition to those of <a href=\"http://doc.qt.io/qt-5/qabstractitemmodel.html\">\rhttp://doc.qt.io/qt-5/qabstractitemmodel.html</a>.</p>",
        "kind": "class",
        "name": "ScriptsModel",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "ScriptsModel",
        "scope": "global"
    },
    {
        "kind": "function",
        "name": "index",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "row"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "column"
            },
            {
                "type": {
                    "names": [
                        "QModelIndex"
                    ]
                },
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "QModelIndex"
                    ]
                }
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.index",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "parent",
        "params": [
            {
                "type": {
                    "names": [
                        "QModelIndex"
                    ]
                },
                "name": "child"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "QModelIndex"
                    ]
                }
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.parent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "data",
        "params": [
            {
                "type": {
                    "names": [
                        "QModelIndex"
                    ]
                },
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": 0,
                "description": "returns {string}",
                "name": "role"
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.data",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "rowCount",
        "params": [
            {
                "type": {
                    "names": [
                        "QmodelIndex"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.rowCount",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "columnCount",
        "params": [
            {
                "type": {
                    "names": [
                        "QmodelIndex"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.columnCount",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTreeNodeFromIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "QmodelIndex"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TreeNodeBase"
                    ]
                }
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.getTreeNodeFromIndex",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getFolderNodes",
        "params": [
            {
                "type": {
                    "names": [
                        "TreeNodeFolder"
                    ]
                },
                "name": "parent"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<TreeNodeBase>"
                    ]
                }
            }
        ],
        "memberof": "ScriptsModel",
        "longname": "ScriptsModel.getFolderNodes",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br><p>Provided as a property of {@link ScriptDiscoveryService}.</p>\r<p>Has properties and functions per <a href=\"http://doc.qt.io/qt-5/qsortfilterproxymodel.html\">\rhttp://doc.qt.io/qt-5/qsortfilterproxymodel.html</a>.</p>",
        "kind": "class",
        "name": "ScriptsModelFilter",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "ScriptsModelFilter",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>A UUID (Universally Unique IDentifier) is used to uniquely identify entities, overlays, avatars, and the like. It is\rrepresented in JavaScript as a string in the format, <code>{nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}</code>, where the \"n\"s are\rhexadecimal digits.",
        "kind": "namespace",
        "name": "Uuid",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The null UUID, <code>{00000000-0000-0000-0000-000000000000}</code>.",
                "name": "NULL"
            }
        ],
        "longname": "Uuid",
        "scope": "global"
    },
    {
        "description": "Generates a UUID from a string representation of the UUID.",
        "kind": "function",
        "name": "fromString",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "A string representation of a UUID. The curly braces are optional.",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A UUID if the given <code>string</code> is valid, <code>null</code> otherwise."
            }
        ],
        "examples": [
            "<caption>Valid and invalid parameters.</caption>\rvar uuid = Uuid.fromString(\"{527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\");\rprint(uuid); // {527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\r\ruuid = Uuid.fromString(\"527c27ea-6d7b-4b47-9ae2-b3051d50d2cd\");\rprint(uuid); // {527c27ea-6d7b-4b47-9ae2-b3051d50d2cd}\r\ruuid = Uuid.fromString(\"527c27ea\");\rprint(uuid); // null"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.fromString",
        "scope": "static"
    },
    {
        "description": "Generates a string representation of a UUID. However, because UUIDs are represented in JavaScript as strings, this is in\reffect a no-op.",
        "kind": "function",
        "name": "toString",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to generate a string from.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "- A string representation of the UUID."
            }
        ],
        "memberof": "Uuid",
        "longname": "Uuid.toString",
        "scope": "static"
    },
    {
        "description": "Generate a new UUID.",
        "kind": "function",
        "name": "generate",
        "returns": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "A new UUID."
            }
        ],
        "examples": [
            "<caption>Generate a new UUID and reports its JavaScript type.</caption>\rvar uuid = Uuid.generate();\rprint(uuid);        // {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\rprint(typeof uuid); // string"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.generate",
        "scope": "static"
    },
    {
        "description": "Test whether two given UUIDs are equal.",
        "kind": "function",
        "name": "isEqual",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The first UUID to compare.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The second UUID to compare.",
                "name": "idB"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the two UUIDs are equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>\rvar uuidA = Uuid.generate();\rvar uuidB = Uuid.generate();\rprint(Uuid.isEqual(uuidA, uuidB)); // false\ruuidB = uuidA;\rprint(Uuid.isEqual(uuidA, uuidB)); // true"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.isEqual",
        "scope": "static"
    },
    {
        "description": "Test whether a given UUID is null.",
        "kind": "function",
        "name": "isNull",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to test.",
                "name": "id"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the UUID equals Uuid.NULL or is <code>null</code>, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Demonstrate <code>true</code> and <code>false</code> cases.</caption>\rvar uuid; // undefined\rprint(Uuid.isNull(uuid)); // false\ruuid = Uuid.generate();\rprint(Uuid.isNull(uuid)); // false\ruuid = Uuid.NULL;\rprint(Uuid.isNull(uuid)); // true\ruuid = null;\rprint(Uuid.isNull(uuid)); // true"
        ],
        "memberof": "Uuid",
        "longname": "Uuid.isNull",
        "scope": "static"
    },
    {
        "description": "Print to the program log a text label followed by the UUID value.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The UUID to print.",
                "name": "id"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label plus UUID.</caption>\rvar uuid = Uuid.generate();\rUuid.print(\"Generated UUID:\", uuid); // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\rprint(\"Generated UUID: \" + uuid);    // Generated UUID: {nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn}\r\n     "
        ],
        "memberof": "Uuid",
        "longname": "Uuid.print",
        "scope": "static"
    },
    {
        "description": "A display or device touch event.",
        "kind": "typedef",
        "name": "TouchEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer x-coordinate of the average position of the touch events.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer y-coordinate of the average position of the touch events.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the touch point has just been pressed, otherwise <code>false</code>.",
                "name": "isPressed"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the touch point has moved, otherwise <code>false</code>.",
                "name": "isMoved"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the touch point has not moved, otherwise <code>false</code>.",
                "name": "isStationary"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the  touch point has just been released, otherwise <code>false</code>.",
                "name": "isReleased"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Shift key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"meta\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"control\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Alt key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isAlt"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of touch points.",
                "name": "touchPoints"
            },
            {
                "type": {
                    "names": [
                        "Array.<Vec2>"
                    ]
                },
                "description": "The coordinates of the touch points.",
                "name": "points"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The radius of a circle centered on their average position that encompasses the touch points.",
                "name": "radius"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>radius</code> has reduced since the most recent touch event \r    with a different <code>radius</code> value, otherwise <code>false</code>.",
                "name": "isPinching"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>radius</code> has increased since the most recent touch \r    event with a different <code>radius</code> value, otherwise <code>false</code>.",
                "name": "isPinchOpening"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "An angle calculated from the touch points, in degrees.",
                "name": "angle"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The change in the <code>angle</code> value since the previous touch event, in degrees, if \r    the number of touch points is the same, otherwise <code>0.0</code>.",
                "name": "deltaAngle"
            },
            {
                "type": {
                    "names": [
                        "Array.<number>"
                    ]
                },
                "description": "The angles of each touch point about the center of all the touch points, in degrees.",
                "name": "angles"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the <code>angle</code> of the touch event has changed since the \r    previous touch event and the number of touch points is the same, otherwise <code>false</code>.",
                "name": "isRotating"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<code>\"clockwise\"</code> or <code>\"counterClockwise\"</code> if the <code>angle</code> of the \r    touch event has changed since the previous touch event and the number of touch points is the same, otherwise \r    <code>\"none\"</code>.",
                "name": "rotating"
            }
        ],
        "examples": [
            "<caption>Report the TouchEvent details when a touch event starts.</caption>\rController.touchBeginEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "TouchEvent",
        "scope": "global"
    },
    {
        "kind": "namespace",
        "name": "Users",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server allows the node or avatar to kick (ban) avatars,\r    otherwise <code>false</code>. <em>Read-only.</em>",
                "name": "canKick"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the avatar requests extra data from the mixers (such as \r    positional data of an avatar you've ignored). <em>Read-only.</em>",
                "name": "requestsDomainListData"
            }
        ],
        "longname": "Users",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>"
    },
    {
        "description": "Personally ignore another user, making them disappear for you and you disappear for them.",
        "kind": "function",
        "name": "ignore",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user you want to ignore.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True for ignored; false for un-ignored.",
                "name": "enable"
            }
        ],
        "memberof": "Users",
        "longname": "Users.ignore",
        "scope": "static"
    },
    {
        "description": "Get whether or not you have ignored the node with the given UUID.",
        "kind": "function",
        "name": "getIgnoreStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user whose ignore status you want.",
                "name": "nodeID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.getIgnoreStatus",
        "scope": "static"
    },
    {
        "description": "Mute another user for you and you only. They won't be able to hear you, and you won't be able to hear them.",
        "kind": "function",
        "name": "personalMute",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user you want to mute.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "True for enabled; false for disabled.",
                "name": "muteEnabled"
            }
        ],
        "memberof": "Users",
        "longname": "Users.personalMute",
        "scope": "static"
    },
    {
        "description": "Get whether or not you have personally muted the node with the given UUID.",
        "kind": "function",
        "name": "requestPersonalMuteStatus",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user whose personal mute status you want.",
                "name": "nodeID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.requestPersonalMuteStatus",
        "scope": "static"
    },
    {
        "description": "Sets an avatar's gain for you and you only.\rUnits are Decibels (dB)",
        "kind": "function",
        "name": "setAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user whose gain you want to modify, or null to set the master gain.",
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The gain of the avatar you'd like to set. Units are dB.",
                "name": "gain"
            }
        ],
        "memberof": "Users",
        "longname": "Users.setAvatarGain",
        "scope": "static"
    },
    {
        "description": "Gets an avatar's gain for you and you only.",
        "kind": "function",
        "name": "getAvatarGain",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user whose gain you want to get, or null to get the master gain.",
                "name": "nodeID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "gain (in dB)"
            }
        ],
        "memberof": "Users",
        "longname": "Users.getAvatarGain",
        "scope": "static"
    },
    {
        "description": "Kick/ban another user. Removes them from the server and prevents them from returning. Bans by either user name (if \ravailable) or machine fingerprint otherwise. This will only do anything if you're an admin of the domain you're in.",
        "kind": "function",
        "name": "kick",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user you want to kick.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.kick",
        "scope": "static"
    },
    {
        "description": "Mutes another user's microphone for everyone. Not permanent; the silenced user can unmute themselves with the UNMUTE \rbutton in their HUD. This will only do anything if you're an admin of the domain you're in.",
        "kind": "function",
        "name": "mute",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user you want to mute.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.mute",
        "scope": "static"
    },
    {
        "description": "Request the user name and machine fingerprint associated with the given UUID. The user name will be returned in a \r{@link Users.usernameFromIDReply|usernameFromIDReply} signal. This will only do anything if you're an admin of the domain \ryou're in.",
        "kind": "function",
        "name": "requestUsernameFromID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The node or session ID of the user whose user name you want.",
                "name": "nodeID"
            }
        ],
        "memberof": "Users",
        "longname": "Users.requestUsernameFromID",
        "scope": "static"
    },
    {
        "description": "Returns `true` if the DomainServer will allow this Node/Avatar to make kick.",
        "kind": "function",
        "name": "getCanKick",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the domain server allows the client to kick (ban) other users, otherwise \r    <code>false</code>."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getCanKick",
        "scope": "static"
    },
    {
        "description": "Toggle the state of the space bubble feature.",
        "kind": "function",
        "name": "toggleIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.toggleIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Enables the space bubble feature.",
        "kind": "function",
        "name": "enableIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.enableIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Disables the space bubble feature.",
        "kind": "function",
        "name": "disableIgnoreRadius",
        "memberof": "Users",
        "longname": "Users.disableIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Returns `true` if the space bubble feature is enabled.",
        "kind": "function",
        "name": "getIgnoreRadiusEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the space bubble is enabled, otherwise <code>false</code>."
            }
        ],
        "memberof": "Users",
        "longname": "Users.getIgnoreRadiusEnabled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "canKickChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "canKick"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.canKickChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "ignoreRadiusEnabledChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isEnabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.ignoreRadiusEnabledChanged",
        "scope": "static"
    },
    {
        "description": "Notifies scripts that another user has entered the ignore radius.",
        "kind": "function",
        "name": "enteredIgnoreRadius",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.enteredIgnoreRadius",
        "scope": "static"
    },
    {
        "description": "Triggered in response to a {@link Users.requestUsernameFromID|requestUsernameFromID} call. Provides the user name and \rmachine fingerprint associated with a UUID.\rUsername and machineFingerprint will be their default constructor output if the requesting user isn't an admin.",
        "kind": "function",
        "name": "usernameFromIDReply",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "nodeID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "userName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "machineFingerprint"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "isAdmin"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.usernameFromIDReply",
        "scope": "static"
    },
    {
        "description": "Notifies scripts that a user has disconnected from the domain.",
        "kind": "function",
        "name": "avatarDisconnected",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The session ID of the avatar that has disconnected.",
                "name": "nodeID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Users",
        "longname": "Users.avatarDisconnected",
        "scope": "static"
    },
    {
        "description": "A 3-dimensional vector. See also the {@link Vec3(0)|Vec3} object.",
        "kind": "typedef",
        "name": "Vec3",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the vector.",
                "name": "z"
            }
        ],
        "longname": "Vec3",
        "scope": "global"
    },
    {
        "description": "A color vector. See also the {@link Vec3(0)|Vec3} object.",
        "kind": "typedef",
        "name": "Vec3Color",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Red component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Green component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Blue component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "z"
            }
        ],
        "longname": "Vec3Color",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>The Vec3 API facilities for generating and manipulating 3-dimensional vectors. High Fidelity uses a right-handed \rCartesian coordinate system where the y-axis is the \"up\" and the negative z-axis is the \"front\" direction.\r<img alt=\"High Fidelity coordinate system\" src=\"https://docs.highfidelity.com/images/opengl-coord-system.jpg\" />",
        "kind": "namespace",
        "name": "Vec3",
        "variation": "0",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 1, y: 0, z: 0 }</code> : Unit vector in the x-axis direction. <em>Read-only.</em>",
                "name": "UNIT_X"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 1, z: 0 }</code> : Unit vector in the y-axis direction. <em>Read-only.</em>",
                "name": "UNIT_Y"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: 1 }</code> : Unit vector in the z-axis direction. <em>Read-only.</em>",
                "name": "UNIT_Z"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: -1, y: 0, z: 0 }</code> : Unit vector in the negative x-axis direction. \r    <em>Read-only.</em>",
                "name": "UNIT_NEG_X"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: -1, z: 0 }</code> : Unit vector in the negative y-axis direction. \r    <em>Read-only.</em>",
                "name": "UNIT_NEG_Y"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: -1 }</code> : Unit vector in the negative z-axis direction. \r    <em>Read-only.</em>",
                "name": "UNIT_NEG_Z"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.707107, y: 0.707107, z: 0 }</code> : Unit vector in the direction of the diagonal \r    between the x and y axes. <em>Read-only.</em>",
                "name": "UNIT_XY"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.707107, y: 0, z: 0.707107 }</code> : Unit vector in the direction of the diagonal \r    between the x and z axes. <em>Read-only.</em>",
                "name": "UNIT_XZ"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0.707107, z: 0.707107 }</code> : Unit vector in the direction of the diagonal \r    between the y and z axes. <em>Read-only.</em>",
                "name": "UNIT_YZ"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.577350, y: 0.577350, z: 0.577350 }</code> : Unit vector in the direction of the \r    diagonal between the x, y, and z axes. <em>Read-only.</em>",
                "name": "UNIT_XYZ"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 3.402823e+38, y: 3.402823e+38, z: 3.402823e+38 }</code> : Vector with all axis \r    values set to the maximum floating point value. <em>Read-only.</em>",
                "name": "FLOAT_MAX"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: -3.402823e+38, y: -3.402823e+38, z: -3.402823e+38 }</code> : Vector with all axis \r    values set to the negative of the maximum floating point value. <em>Read-only.</em>",
                "name": "FLOAT_MIN"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: 0 }</code> : Vector with all axis values set to <code>0</code>. \r    <em>Read-only.</em>",
                "name": "ZERO"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 1, y: 1, z: 1 }</code> : Vector with all axis values set to <code>1</code>. \r    <em>Read-only.</em>",
                "name": "ONE"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 2, y: 2, z: 2 }</code> : Vector with all axis values set to <code>2</code>. \r    <em>Read-only.</em>",
                "name": "TWO"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0.5, y: 0.5, z: 0.5 }</code> : Vector with all axis values set to <code>0.5</code>. \r    <em>Read-only.</em>",
                "name": "HALF"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 1, y: 0, z: 0 }</code> : Unit vector in the \"right\" direction. Synonym for \r    <code>UNIT_X</code>. <em>Read-only.</em>",
                "name": "RIGHT"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 1, z: 0 }</code> : Unit vector in the \"up\" direction. Synonym for \r    <code>UNIT_Y</code>. <em>Read-only.</em>",
                "name": "UP"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>{ x: 0, y: 0, z: -1 }</code> : Unit vector in the \"front\" direction. Synonym for \r    <code>UNIT_NEG_Z</code>. <em>Read-only.</em>",
                "name": "FRONT"
            }
        ],
        "longname": "Vec3(0)",
        "scope": "global"
    },
    {
        "description": "Calculate the reflection of a vector in a plane.",
        "kind": "function",
        "name": "reflect",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to reflect.",
                "name": "v"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The normal of the plane.",
                "name": "normal"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector reflected in the plane given by the normal."
            }
        ],
        "examples": [
            "<caption>Reflect a vector in the x-z plane.</caption>\rvar v = { x: 1, y: 2, z: 3 };\rvar normal = Vec3.UNIT_Y;\rvar reflected = Vec3.reflect(v, normal);\rprint(JSON.stringify(reflected));  // {\"x\":1,\"y\":-2,\"z\":3}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).reflect",
        "scope": "static"
    },
    {
        "description": "Calculate the cross product of two vectors.",
        "kind": "function",
        "name": "cross",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The cross product of <code>v1</code> and <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>The cross product of x and y unit vectors is the z unit vector.</caption>\rvar v1 = { x: 1, y: 0, z: 0 };\rvar v2 = { x: 0, y: 1, z: 0 };\rvar crossProduct = Vec3.cross(v1, v2);\rprint(JSON.stringify(crossProduct)); // {\"x\":0,\"y\":0,\"z\":1}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).cross",
        "scope": "static"
    },
    {
        "description": "Calculate the dot product of two vectors.",
        "kind": "function",
        "name": "dot",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dot product of <code>v1</code> and <code>v2</code>."
            }
        ],
        "examples": [
            "<caption>The dot product of vectors at right angles is <code>0</code>.</caption>\rvar v1 = { x: 1, y: 0, z: 0 };\rvar v2 = { x: 0, y: 1, z: 0 };\rvar dotProduct = Vec3.dot(v1, v2);\rprint(dotProduct); // 0"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).dot",
        "scope": "static"
    },
    {
        "description": "Multiply a vector by a scale factor.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector.",
                "name": "v"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale factor.",
                "name": "scale"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector with each ordinate value multiplied by the <code>scale</code>."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiply",
        "scope": "static"
    },
    {
        "description": "Multiply a vector by a scale factor.",
        "kind": "function",
        "name": "multiply",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The scale factor.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector with each ordinate value multiplied by the <code>scale</code>."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiply",
        "scope": "static"
    },
    {
        "description": "Multiply two vectors.",
        "kind": "function",
        "name": "multiplyVbyV",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "A vector formed by multiplying the ordinates of two vectors: <code>{ x: v1.x * v2.x, y: v1.y * v2.y, \r    z: v1.z * v2.z }</code>."
            }
        ],
        "examples": [
            "<caption>Multiply two vectors.</caption>\rvar v1 = { x: 1, y: 2, z: 3 };\rvar v2 = { x: 1, y: 2, z: 3 };\rvar multiplied = Vec3.multiplyVbyV(v1, v2);\rprint(JSON.stringify(multiplied));  // {\"x\":1,\"y\":4,\"z\":9}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiplyVbyV",
        "scope": "static"
    },
    {
        "description": "Rotate a vector.",
        "kind": "function",
        "name": "multiplyQbyV",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation to apply.",
                "name": "q"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to rotate.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "<code>v</code> rotated by <code>q</code>."
            }
        ],
        "examples": [
            "<caption>Rotate the negative z-axis by 90 degrees about the x-axis.</caption>\rvar v = Vec3.UNIT_NEG_Z;\rvar q = Quat.fromPitchYawRollDegrees(90, 0, 0);\rvar result = Vec3.multiplyQbyV(q, v);\rprint(JSON.stringify(result));  // {\"x\":0,\"y\":1.000,\"z\":1.19e-7}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).multiplyQbyV",
        "scope": "static"
    },
    {
        "description": "Calculate the sum of two vectors.",
        "kind": "function",
        "name": "sum",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The sum of the two vectors."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).sum",
        "scope": "static"
    },
    {
        "description": "Calculate one vector subtracted from another.",
        "kind": "function",
        "name": "subtract",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector subtracted from the first."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).subtract",
        "scope": "static"
    },
    {
        "description": "Calculate the length of a vector",
        "kind": "function",
        "name": "length",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The length of the vector."
            }
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).length",
        "scope": "static"
    },
    {
        "description": "Calculate the distance between two points.",
        "kind": "function",
        "name": "distance",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first point.",
                "name": "p1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second point.",
                "name": "p2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The distance between the two points."
            }
        ],
        "examples": [
            "<caption>The distance between two points is aways positive.</caption>\rvar p1 = { x: 0, y: 0, z: 0 };\rvar p2 = { x: 0, y: 0, z: 10 };\rvar distance = Vec3.distance(p1, p2);\rprint(distance); // 10\r\rp2 = { x: 0, y: 0, z: -10 };\rdistance = Vec3.distance(p1, p2);\rprint(distance); // 10"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).distance",
        "scope": "static"
    },
    {
        "description": "Calculate the angle of rotation from one vector onto another, with the sign depending on a reference vector.",
        "kind": "function",
        "name": "orientedAngle",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Reference vector.",
                "name": "ref"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle of rotation from the first vector to the second, in degrees, with a positive sign if the \rrotation axis aligns with the reference vector (has a positive dot product) otherwise a negative sign."
            }
        ],
        "examples": [
            "<caption>Compare <code>Vec3.angle()</code> and <code>Vec3.orientedAngle()</code>.</caption>\rvar v1 = { x: 5, y: 0, z: 0 };\rvar v2 = { x: 5, y: 0, z: 5 };\rvar angle = Vec3.getAngle(v1, v2);\rprint(angle * 180 / Math.PI);  // 45\r\rprint(Vec3.orientedAngle(v1, v2, Vec3.UNIT_Y));  // -45\rprint(Vec3.orientedAngle(v1, v2, Vec3.UNIT_NEG_Y));  // 45\rprint(Vec3.orientedAngle(v1, v2, { x: 1, y: 2, z: -1 }));  // -45\rprint(Vec3.orientedAngle(v1, v2, { x: 1, y: -2, z: -1 }));  // 45"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).orientedAngle",
        "scope": "static"
    },
    {
        "description": "Normalize a vector so that its length is <code>1</code>.",
        "kind": "function",
        "name": "normalize",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector to normalize.",
                "name": "v"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector normalized to have a length of <code>1</code>."
            }
        ],
        "examples": [
            "<caption>Normalize a vector.</caption>\rvar v = { x: 10, y: 10, z: 0 };\rvar normalized = Vec3.normalize(v);\rprint(JSON.stringify(normalized));  // {\"x\":0.7071,\"y\":0.7071,\"z\":0}\rprint(Vec3.length(normalized));  // 1"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).normalize",
        "scope": "static"
    },
    {
        "description": "Calculate a linear interpolation between two vectors.",
        "kind": "function",
        "name": "mix",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The interpolation factor in the range <code>0.0</code> to <code>1.0</code>.",
                "name": "factor"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The linear interpolation between the two vectors: <code>(1 - factor) * v1 + factor * v2</code>."
            }
        ],
        "examples": [
            "<caption>Linear interpolation between two vectors.</caption>\rvar v1 = { x: 10, y: 0, z: 0 };\rvar v2 = { x: 0, y: 10, z: 0 };\rvar interpolated = Vec3.mix(v1, v2, 0.75);  // 1/4 of v1 and 3/4 of v2.\rprint(JSON.stringify(interpolated));  // {\"x\":2.5,\"y\":7.5\",\"z\":0}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).mix",
        "scope": "static"
    },
    {
        "description": "Print to the program log a text label followed by a vector value.",
        "kind": "function",
        "name": "print",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The label to print.",
                "name": "label"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The vector value to print.",
                "name": "v"
            }
        ],
        "examples": [
            "<caption>Two ways of printing a label and vector value.</caption>\rvar v = { x: 1, y: 2, z: 3 };\rVec3.print(\"Vector: \", v);  // dvec3(1.000000, 2.000000, 3.000000)\rprint(\"Vector: \" + JSON.stringify(v));  // {\"x\":1,\"y\":2,\"z\":3}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).print",
        "scope": "static"
    },
    {
        "description": "Test whether two vectors are equal. <strong>Note:</strong> The vectors must be exactly equal in order for \r<code>true</code> to be returned; it is often better to use {@link Vec3(0).withinEpsilon|withinEpsilon}.",
        "kind": "function",
        "name": "equal",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the two vectors are exactly equal, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption> Vectors are only equal if exactly the same.</caption>\rvar v1 = { x: 10, y: 10, z: 10 };\rvar v2 = { x: 10, y: 10, z: 10 };\rvar equal = Vec3.equal(v1, v2);\rprint(equal);  // true\r\rv2 = { x: 10, y: 10, z: 10.0005 };\requal = Vec3.equal(v1, v2);\rprint(equal);  // false"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).equal",
        "scope": "static"
    },
    {
        "description": "Test whether two vectors are equal within a tolerance. <strong>Note:</strong> It is often better to use this function \rthan {@link Vec3(0).equal|equal}.",
        "kind": "function",
        "name": "withinEpsilon",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The maximum distance between the two vectors.",
                "name": "epsilon"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the distance between the points represented by the vectors is less than or equal \rto the <code>epsilon</code>, otherwise <code>false</code>."
            }
        ],
        "examples": [
            "<caption>Testing vectors for near equality.</caption>\rvar v1 = { x: 10, y: 10, z: 10 };\rvar v2 = { x: 10, y: 10, z: 10.0005 };\rvar equal = Vec3.equal(v1, v2);\rprint(equal);  // false\r\requal = Vec3.withinEpsilon(v1, v2, 0.001);\rprint(equal);  // true"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).withinEpsilon",
        "scope": "static"
    },
    {
        "description": "Calculate polar coordinates (elevation, azimuth, radius) that transform the unit z-axis vector onto a point.",
        "kind": "function",
        "name": "toPolar",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point to calculate the polar coordinates for.",
                "name": "p"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Vector of polar coordinates for the point: <code>x</code> elevation rotation about the x-axis in \r    radians, <code>y</code> azimuth rotation about the y-axis in radians, and <code>z</code> scale."
            }
        ],
        "examples": [
            "<caption>Polar coordinates for a point.</caption>\rvar v = { x: 5, y: 2.5, z: 5 };\rvar polar = Vec3.toPolar(v);\rprint(\"Elevation: \" + polar.x * 180 / Math.PI);  // -19.471\rprint(\"Azimuth: \" + polar.y * 180 / Math.PI);  // 45\rprint(\"Radius: \" + polar.z);  // 7.5"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).toPolar",
        "scope": "static"
    },
    {
        "description": "Calculate the coordinates of a point from polar coordinate transformation of the unit z-axis vector.",
        "kind": "function",
        "name": "fromPolar",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The polar coordinates of a point: <code>x</code> elevation rotation about the x-axis in radians, \r   <code>y</code> azimuth rotation about the y-axis in radians, and <code>z</code> scale.",
                "name": "polar"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The coordinates of the point."
            }
        ],
        "examples": [
            "<caption>Polar coordinates to Cartesian.</caption>\rvar polar = { x: -19.471 * Math.PI / 180, y: 45 * Math.PI / 180, z: 7.5 };\rvar p = Vec3.fromPolar(polar);\rprint(JSON.stringify(p));  // {\"x\":5,\"y\":2.5,\"z\":5}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).fromPolar",
        "scope": "static"
    },
    {
        "description": "Calculate the unit vector corresponding to polar coordinates elevation and azimuth transformation of the unit z-axis \rvector.",
        "kind": "function",
        "name": "fromPolar",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotation about the x-axis, in radians.",
                "name": "elevation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Rotation about the y-axis, in radians.",
                "name": "azimuth"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Unit vector for the direction specified by <code>elevation</code> and <code>azimuth</code>."
            }
        ],
        "examples": [
            "<caption>Polar coordinates to Cartesian.</caption>\rvar elevation = -19.471 * Math.PI / 180;\rvar rotation = 45 * Math.PI / 180;\rvar p = Vec3.fromPolar(elevation, rotation);\rprint(JSON.stringify(p));  // {\"x\":0.667,\"y\":0.333,\"z\":0.667}\r\rp = Vec3.multiply(7.5, p);\rprint(JSON.stringify(p));  // {\"x\":5,\"y\":2.5,\"z\":5}"
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).fromPolar",
        "scope": "static"
    },
    {
        "description": "Calculate the angle between two vectors.",
        "kind": "function",
        "name": "getAngle",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The first vector.",
                "name": "v1"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The second vector.",
                "name": "v2"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The angle between the two vectors, in radians."
            }
        ],
        "examples": [
            "<caption>Calculate the angle between two vectors.</caption>\rvar v1 = { x: 10, y: 0, z: 0 };\rvar v2 = { x: 0, y: 0, z: 10 };\rvar angle = Vec3.getAngle(v1, v2);\rprint(angle * 180 / Math.PI);  // 90\r\n     "
        ],
        "memberof": "Vec3(0)",
        "longname": "Vec3(0).getAngle",
        "scope": "static"
    },
    {
        "description": "A mouse wheel event.",
        "kind": "typedef",
        "name": "WheelEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer x-coordinate of the event on the Interface window or HMD HUD.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer y-coordinate of the event on the Interface window or HMD HUD.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number indicating the direction and speed to scroll: positive numbers to scroll up, and \r    negative numers to scroll down.",
                "name": "delta"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The orientation of the wheel: <code>\"VERTICAL\"</code> for a typical mouse; \r    <code>\"HORIZONTAL\"</code> for a \"horizontal\" wheel.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the left button was pressed when the event was generated, otherwise \r    <code>false</code>.",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the middle button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the right button was pressed when the event was generated, \r    otherwise <code>false</code>.",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Shift key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isShifted"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"meta\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"meta\" key is the Windows key; on OSX it is the Control (Splat) key.",
                "name": "isMeta"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the \"control\" key was pressed when the event was generated, otherwise\r    <code>false</code>. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command key.",
                "name": "isControl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the Alt key was pressed when the event was generated, otherwise\r    <code>false</code>.",
                "name": "isAlt"
            }
        ],
        "examples": [
            "<caption>Report the WheelEvent details for each wheel rotation.</caption>\rController.wheelEvent.connect(function (event) {\r    print(JSON.stringify(event));\r});\r\n "
        ],
        "longname": "WheelEvent",
        "scope": "global"
    },
    {
        "description": "<p>A <code>BoxFace</code> specifies the face of an axis-aligned (AA) box.\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"MIN_X_FACE\"</code></td><td>The minimum x-axis face.</td></tr>\r    <tr><td><code>\"MAX_X_FACE\"</code></td><td>The maximum x-axis face.</td></tr>\r    <tr><td><code>\"MIN_Y_FACE\"</code></td><td>The minimum y-axis face.</td></tr>\r    <tr><td><code>\"MAX_Y_FACE\"</code></td><td>The maximum y-axis face.</td></tr>\r    <tr><td><code>\"MIN_Z_FACE\"</code></td><td>The minimum z-axis face.</td></tr>\r    <tr><td><code>\"MAX_Z_FACE\"</code></td><td>The maximum z-axis face.</td></tr>\r    <tr><td><code>\"UNKNOWN_FACE\"</code></td><td>Unknown value.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "BoxFace",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "BoxFace",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>Helper functions to render ephemeral debug markers and lines.\rDebugDraw markers and lines are only visible locally, they are not visible by other users.",
        "kind": "namespace",
        "name": "DebugDraw",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "longname": "DebugDraw",
        "scope": "global"
    },
    {
        "description": "Draws a line in world space, but it will only be visible for a single frame.",
        "kind": "function",
        "name": "drawRay",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "start position of line in world space.",
                "name": "start"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "end position of line in world space.",
                "name": "end"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of line, each component should be in the zero to one range.  x = red, y = blue, z = green, w = alpha.",
                "name": "color"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.drawRay",
        "scope": "static"
    },
    {
        "description": "Adds a debug marker to the world. This marker will be drawn every frame until it is removed with DebugDraw.removeMarker.\rThis can be called repeatedly to change the position of the marker.",
        "kind": "function",
        "name": "addMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name to uniquely identify this marker, later used for DebugDraw.removeMarker.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "start position of line in world space.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "position of the marker in world space.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of the marker.",
                "name": "color"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.addMarker",
        "scope": "static"
    },
    {
        "description": "Removes debug marker from the world.  Once a marker is removed, it will no longer be visible.",
        "kind": "function",
        "name": "removeMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of marker to remove.",
                "name": "key"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.removeMarker",
        "scope": "static"
    },
    {
        "description": "Adds a debug marker to the world, this marker will be drawn every frame until it is removed with DebugDraw.removeMyAvatarMarker.\rThis can be called repeatedly to change the position of the marker.",
        "kind": "function",
        "name": "addMyAvatarMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name to uniquely identify this marker, later used for DebugDraw.removeMyAvatarMarker.",
                "name": "key"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "start position of line in avatar space.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "position of the marker in avatar space.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec4"
                    ]
                },
                "description": "color of the marker.",
                "name": "color"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.addMyAvatarMarker",
        "scope": "static"
    },
    {
        "description": "Removes debug marker from the world.  Once a marker is removed, it will no longer be visible",
        "kind": "function",
        "name": "removeMyAvatarMarker",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "name of marker to remove.",
                "name": "key"
            }
        ],
        "memberof": "DebugDraw",
        "longname": "DebugDraw.removeMyAvatarMarker",
        "scope": "static"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Paths API provides absolute paths to the scripts and resources directories.",
        "kind": "namespace",
        "name": "Paths",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "deprecated": "The Paths API is deprecated. Use {@link Script.resolvePath} and {@link Script.resourcesPath} instead.",
        "readonly": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the scripts directory. <em>Read-only.</em>",
                "name": "defaultScripts"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The path to the resources directory. <em>Read-only.</em>",
                "name": "resources"
            }
        ],
        "longname": "Paths",
        "scope": "global"
    },
    {
        "description": "<p>An entity may collide with the following types of items:</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th>\r  </thead>\r  <tbody>\r    <tr><td><code>1</code></td><td>Static entities &mdash; non-dynamic entities with no velocity.</td></tr>\r    <tr><td><code>2</code></td><td>Dynamic entities &mdash; entities that have their <code>dynamic</code> property set to\r        <code>true</code>.</td></tr>\r    <tr><td><code>4</code></td><td>Kinematic entities &mdash; non-dynamic entities with velocity.</td></tr>\r    <tr><td><code>8</code></td><td>My avatar.</td></tr>\r    <tr><td><code>16</code></td><td>Other avatars.</td></tr>\r  </tbody>\r</table>\r<p>The values for the collision types that are enabled are added together to give the CollisionMask value. For example, a\rvalue of <code>31</code> means that an entity will collide with all item types.</p>",
        "kind": "typedef",
        "name": "CollisionMask",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Entities",
        "longname": "Entities.CollisionMask",
        "scope": "static"
    },
    {
        "description": "A PointerEvent defines a 2D or 3D mouse or similar pointer event.",
        "kind": "typedef",
        "name": "PointerEvent",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of event: <code>\"Press\"</code>, <code>\"DoublePress\"</code>, <code>\"Release\"</code>, or\r    <code>\"Move\"</code>.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number used to identify the pointer: <code>0</code> = hardware mouse, <code>1</code> = left\r    controller, <code>2</code> = right controller.",
                "name": "id"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "description": "The 2D position of the event on the intersected overlay or entity XY plane, where applicable.",
                "name": "pos2D"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The 3D position of the event on the intersected overlay or entity, where applicable.",
                "name": "pos3D"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The surface normal at the intersection point.",
                "name": "normal"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction of the intersection ray.",
                "name": "direction"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the button pressed: <code>None</code>, <code>Primary</code>, <code>Secondary</code>,\r   or <code>Tertiary</code>.",
                "name": "button"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the primary button, otherwise \r    <code>undefined</code>;",
                "name": "isPrimaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the primary button, otherwise\r    <code>undefined</code>;",
                "name": "isLeftButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the secondary button, otherwise\r    <code>undefined</code>;",
                "name": "isSecondaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the secondary button, otherwise\r    <code>undefined</code>;",
                "name": "isRightButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the tertiary button, otherwise\r    <code>undefined</code>;",
                "name": "isTertiaryButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the button pressed was the tertiary button, otherwise\r    <code>undefined</code>;",
                "name": "isMiddleButton"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the primary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isPrimaryHeld"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the secondary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isSecondaryHeld"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> if the tertiary button is currently being pressed, otherwise\r    <code>false</code>",
                "name": "isTertiaryHeld"
            },
            {
                "type": {
                    "names": [
                        "KeyboardModifiers"
                    ]
                },
                "description": "Integer value with bits set according to which keyboard modifier keys were\r    pressed when the event was generated.",
                "name": "keyboardModifiers"
            }
        ],
        "longname": "PointerEvent",
        "scope": "global"
    },
    {
        "description": "<p>A KeyboardModifiers value is used to specify which modifier keys on the keyboard are pressed. The value is the sum \r(bitwise OR) of the relevant combination of values from the following table:</p>\r<table>\r  <thead>\r    <tr><th>Key</th><th>Hexadecimal value</th><th>Decimal value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td>Shift</td><td><code>0x02000000</code></td><td><code>33554432</code></td>\r        <td>A Shift key on the keyboard is pressed.</td></tr>\r    <tr><td>Control</td><td><code>0x04000000</code></td><td><code>67108864</code></td>\r        <td>A control key on the keyboard is pressed. On Windows the \"control\" key is the Ctrl key; on OSX it is the Command \r        key.</td></tr>\r    <tr><td>Alt</td><td><code>0x08000000</code></td><td><code>134217728</code></td>\r        <td>An Alt key on the keyboard is pressed.</td></tr>\r    <tr><td>Meta</td><td><code>0x10000000</code></td><td><code>268435456</code></td>\r        <td>A meta key on the keyboard is pressed. On Windows the \"meta\" key is the Windows key; on OSX it is the Control \r        (Splat) key.</td></tr>\r    <tr><td>Keypad</td><td><code>0x20000000</code></td><td><code>536870912</code></td>\r        <td>A keypad button is pressed.</td></tr>\r    <tr><td>Group</td><td><code>0x40000000</code></td><td><code>1073741824</code></td>\r        <td>X11 operating system only: An AltGr / Mode_switch key on the keyboard is pressed.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "KeyboardModifiers",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "KeyboardModifiers",
        "scope": "global"
    },
    {
        "description": "Defines a rectangular portion of an image or screen, or similar.",
        "kind": "typedef",
        "name": "Rect",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Left, x-coordinate value.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Top, y-coordinate value.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Width of the rectangle.",
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Height of the rectangle.",
                "name": "height"
            }
        ],
        "longname": "Rect",
        "scope": "global"
    },
    {
        "description": "An RGB color value.",
        "kind": "typedef",
        "name": "Color",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Red component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "red"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Green component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "green"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Blue component value. Integer in the range <code>0</code> - <code>255</code>.",
                "name": "blue"
            }
        ],
        "longname": "Color",
        "scope": "global"
    },
    {
        "description": "An axis-aligned cube, defined as the bottom right near (minimum axes values) corner of the cube plus the dimension of its \rsides.",
        "kind": "typedef",
        "name": "AACube",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X coordinate of the brn corner of the cube.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y coordinate of the brn corner of the cube.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z coordinate of the brn corner of the cube.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The dimensions of each side of the cube.",
                "name": "scale"
            }
        ],
        "longname": "AACube",
        "scope": "global"
    },
    {
        "kind": "typedef",
        "name": "Collision",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "ContactEventType"
                    ]
                },
                "description": "The contact type of the collision event.",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of one of the entities in the collision.",
                "name": "idA"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the other of the entities in the collision.",
                "name": "idB"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The amount of penetration between the two entities.",
                "name": "penetration"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The point of contact.",
                "name": "contactPoint"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The change in relative velocity of the two entities, in m/s.",
                "name": "velocityChange"
            }
        ],
        "longname": "Collision",
        "scope": "global"
    },
    {
        "description": "A 2D size value.",
        "kind": "typedef",
        "name": "Size",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The height value.",
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The width value.",
                "name": "width"
            }
        ],
        "longname": "Size",
        "scope": "global"
    },
    {
        "kind": "typedef",
        "name": "AnimationDetails",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "role"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "fps"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "priority"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "loop"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "hold"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "startAutomatically"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "firstFrame"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "lastFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "running"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "currentFrame"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "allowTranslation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.AnimationDetails",
        "scope": "static"
    },
    {
        "description": "A 4-dimensional vector.",
        "kind": "typedef",
        "name": "Vec4",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Z-coordinate of the vector.",
                "name": "z"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "W-coordinate of the vector.",
                "name": "w"
            }
        ],
        "longname": "Vec4",
        "scope": "global"
    },
    {
        "description": "A 2-dimensional vector.",
        "kind": "typedef",
        "name": "Vec2",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate of the vector.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate of the vector.",
                "name": "y"
            }
        ],
        "longname": "Vec2",
        "scope": "global"
    },
    {
        "description": "A PickRay defines a vector with a starting point. It is used, for example, when finding entities or overlays that lie under a\rmouse click or intersect a laser beam.",
        "kind": "typedef",
        "name": "PickRay",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting position of the PickRay.",
                "name": "origin"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The direction that the PickRay travels.",
                "name": "direction"
            }
        ],
        "longname": "PickRay",
        "scope": "global"
    },
    {
        "description": "A StylusTip defines the tip of a stylus.",
        "kind": "typedef",
        "name": "StylusTip",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The hand the tip is attached to: <code>0</code> for left, <code>1</code> for right.",
                "name": "side"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the stylus tip.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the stylus tip.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The velocity of the stylus tip.",
                "name": "velocity"
            }
        ],
        "longname": "StylusTip",
        "scope": "global"
    },
    {
        "description": "A PickParabola defines a parabola with a starting point, intitial velocity, and acceleration.",
        "kind": "typedef",
        "name": "PickParabola",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting position of the PickParabola.",
                "name": "origin"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The starting velocity of the parabola.",
                "name": "velocity"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The acceleration that the parabola experiences.",
                "name": "acceleration"
            }
        ],
        "longname": "PickParabola",
        "scope": "global"
    },
    {
        "description": "A CollisionRegion defines a volume for checking collisions in the physics simulation.",
        "kind": "typedef",
        "name": "CollisionRegion",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Shape"
                    ]
                },
                "description": "The information about the collision region's size and shape. Dimensions are in world space, but will scale with the parent if defined.",
                "name": "shape"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the collision region, relative to a parent if defined.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the collision region, relative to a parent if defined.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "float"
                    ]
                },
                "description": "The approximate minimum penetration depth for a test object to be considered in contact with the collision region.\rThe depth is measured in world space, but will scale with the parent if defined.",
                "name": "threshold"
            },
            {
                "type": {
                    "names": [
                        "CollisionMask"
                    ]
                },
                "optional": true,
                "defaultvalue": 8,
                "description": "The type of object this collision pick collides as. Objects whose collision masks overlap with the pick's collision group\rwill be considered colliding with the pick.",
                "name": "collisionGroup"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the parent, either an avatar, an entity, or an overlay.",
                "name": "parentID"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The joint of the parent to parent to, for example, the joints on the model of an avatar. (default = 0, no joint)",
                "name": "parentJointIndex"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "If \"Mouse,\" parents the pick to the mouse. If \"Avatar,\" parents the pick to MyAvatar's head. Otherwise, parents to the joint of the given name on MyAvatar.",
                "name": "joint"
            }
        ],
        "longname": "CollisionRegion",
        "scope": "global"
    },
    {
        "description": "<p>The type of a collision contact event.\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Start of the collision.</td></tr>\r    <tr><td><code>1</code></td><td>Continuation of the collision.</td></tr>\r    <tr><td><code>2</code></td><td>End of the collision.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ContactEventType",
        "type": {
            "names": [
                "number"
            ]
        },
        "longname": "ContactEventType",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td><td>Server Entity Scripts</td><td>Assignment Client Scripts</td></tr></table><br>A handle for a mesh in an entity, such as returned by {@link Entities.getMeshes}.",
        "kind": "class",
        "name": "MeshProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "hifiServerEntity": true,
        "hifiAssignmentClient": true,
        "deprecated": "Use the {@link Graphics} API instead.",
        "longname": "MeshProxy",
        "scope": "global"
    },
    {
        "description": "Get the number of vertices in the mesh.",
        "kind": "function",
        "name": "getNumVertices",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer number of vertices in the mesh."
            }
        ],
        "deprecated": "Use the {@link Graphics} API instead.",
        "memberof": "MeshProxy",
        "longname": "MeshProxy#getNumVertices",
        "scope": "instance"
    },
    {
        "description": "Get the position of a vertex in the mesh.",
        "kind": "function",
        "name": "getPos",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Integer index of the mesh vertex.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Local position of the vertex relative to the mesh."
            }
        ],
        "deprecated": "Use the {@link Graphics} API instead.",
        "memberof": "MeshProxy",
        "longname": "MeshProxy#getPos",
        "scope": "instance"
    },
    {
        "description": "<p>A ShapeType defines the shape used for collisions or zones.</p>\r<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>\"none\"</code></td><td>No shape.</td></tr>\r    <tr><td><code>\"box\"</code></td><td>A cube.</td></tr>\r    <tr><td><code>\"sphere\"</code></td><td>A sphere.</td></tr>\r    <tr><td><code>\"capsule-x\"</code></td><td>A capsule (cylinder with spherical ends) oriented on the x-axis.</td></tr>\r    <tr><td><code>\"capsule-y\"</code></td><td>A capsule (cylinder with spherical ends) oriented on the y-axis.</td></tr>\r    <tr><td><code>\"capsule-z\"</code></td><td>A capsule (cylinder with spherical ends) oriented on the z-axis.</td></tr>\r    <tr><td><code>\"cylinder-x\"</code></td><td>A cylinder oriented on the x-axis.</td></tr>\r    <tr><td><code>\"cylinder-y\"</code></td><td>A cylinder oriented on the y-axis.</td></tr>\r    <tr><td><code>\"cylinder-z\"</code></td><td>A cylinder oriented on the z-axis.</td></tr>\r    <tr><td><code>\"hull\"</code></td><td><em>Not used.</em></td></tr>\r    <tr><td><code>\"compound\"</code></td><td>A compound convex hull specified in an OBJ file.</td></tr>\r    <tr><td><code>\"simple-hull\"</code></td><td>A convex hull automatically generated from the model.</td></tr>\r    <tr><td><code>\"simple-compound\"</code></td><td>A compound convex hull automatically generated from the model, using \r        sub-meshes.</td></tr>\r    <tr><td><code>\"static-mesh\"</code></td><td>The exact shape of the model.</td></tr>\r    <tr><td><code>\"plane\"</code></td><td>A plane.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "ShapeType",
        "type": {
            "names": [
                "string"
            ]
        },
        "longname": "ShapeType",
        "scope": "global"
    },
    {
        "description": "<p>Camera modes affect the position of the camera and the controls for camera movement. The camera can be in one of the\rfollowing modes:</p>\r<table>\r  <thead>\r    <tr>\r      <th>Mode</th>\r      <th>String</th>\r      <th>Description</th>\r    </tr>\r  </thead>\r  <tbody>\r    <tr>\r      <td><strong>First&nbsp;Person</strong></td>\r      <td><code>\"first&nbsp;person\"</code></td>\r      <td>The camera is positioned such that you have the same view as your avatar. The camera moves and rotates with your\r      avatar.</td>\r    </tr>\r    <tr>\r      <td><strong>Third&nbsp;Person</strong></td>\r      <td><code>\"third&nbsp;person\"</code></td>\r      <td>The camera is positioned such that you have a view from just behind your avatar. The camera moves and rotates with\r      your avatar.</td>\r    </tr>\r    <tr>\r      <td><strong>Mirror</strong></td>\r      <td><code>\"mirror\"</code></td>\r      <td>The camera is positioned such that you are looking directly at your avatar. The camera moves and rotates with your \r      avatar.</td>\r    </tr>\r    <tr>\r      <td><strong>Independent</strong></td>\r      <td><code>\"independent\"</code></td>\r      <td>The camera's position and orientation don't change with your avatar movement. Instead, they can be set via \r      scripting.</td>\r    </tr>\r    <tr>\r      <td><strong>Entity</strong></td>\r      <td><code>\"entity\"</code></td>\r      <td>The camera's position and orientation are set to be the same as a specified entity's, and move with the entity as\r      it moves.\r    </tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Mode",
        "type": {
            "names": [
                "string"
            ]
        },
        "memberof": "Camera",
        "longname": "Camera.Mode",
        "scope": "static"
    },
    {
        "description": "A ViewFrustum has a \"keyhole\" shape: a regular frustum for stuff that is visible plus a central sphere for stuff that is\rnearby (for physics simulation).",
        "kind": "typedef",
        "name": "ViewFrustum",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The location of the frustum's apex.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The direction that the frustum is looking at.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Center radius of the keyhole in meters.",
                "name": "centerRadius"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Horizontal field of view in degrees.",
                "name": "fieldOfView"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Aspect ratio of the frustum.",
                "name": "aspectRatio"
            },
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                },
                "description": "The projection matrix for the view defined by the frustum.",
                "name": "projection"
            }
        ],
        "longname": "ViewFrustum",
        "scope": "global"
    },
    {
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>The Camera API provides access to the \"camera\" that defines your view in desktop and HMD display modes.",
        "kind": "namespace",
        "name": "Camera",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position of the camera. You can set this value only when the camera is in independent \r    mode.",
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation of the camera. You can set this value only when the camera is in \r    independent mode.",
                "name": "orientation"
            },
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The camera mode.",
                "name": "mode"
            },
            {
                "type": {
                    "names": [
                        "ViewFrustum"
                    ]
                },
                "description": "The camera frustum.",
                "name": "frustum"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "The ID of the entity that is used for the camera position and orientation when the \r    camera is in entity mode.",
                "name": "cameraEntity"
            }
        ],
        "longname": "Camera",
        "scope": "global"
    },
    {
        "description": "Get the current camera mode. You can also get the mode using the <code>Camera.mode</code> property.",
        "kind": "function",
        "name": "getModeString",
        "returns": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The current camera mode."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getModeString",
        "scope": "static"
    },
    {
        "description": "Set the camera mode. You can also set the mode using the <code>Camera.mode</code> property.",
        "kind": "function",
        "name": "setModeString",
        "params": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The mode to set the camera to.",
                "name": "mode"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setModeString",
        "scope": "static"
    },
    {
        "description": "Get the current camera position. You can also get the position using the <code>Camera.position</code> property.",
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The current camera position."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getPosition",
        "scope": "static"
    },
    {
        "description": "Set the camera position. You can also set the position using the <code>Camera.position</code> property. Only works if the\r    camera is in independent mode.",
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The position to set the camera at.",
                "name": "position"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setPosition",
        "scope": "static"
    },
    {
        "description": "Get the current camera orientation. You can also get the orientation using the <code>Camera.orientation</code> property.",
        "kind": "function",
        "name": "getOrientation",
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The current camera orientation."
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.getOrientation",
        "scope": "static"
    },
    {
        "description": "Set the camera orientation. You can also set the orientation using the <code>Camera.orientation</code> property. Only\r    works if the camera is in independent mode.",
        "kind": "function",
        "name": "setOrientation",
        "params": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The orientation to set the camera to.",
                "name": "orientation"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.setOrientation",
        "scope": "static"
    },
    {
        "description": "Compute a {@link PickRay} based on the current camera configuration and the specified <code>x, y</code> position on the \r    screen. The {@link PickRay} can be used in functions such as {@link Entities.findRayIntersection} and \r    {@link Overlays.findRayIntersection}.",
        "kind": "function",
        "name": "computePickRay",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "X-coordinate on screen.",
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Y-coordinate on screen.",
                "name": "y"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "PickRay"
                    ]
                },
                "description": "The computed {@link PickRay}."
            }
        ],
        "examples": [
            "<caption>Use a PickRay to detect mouse clicks on entities.</caption>\rfunction onMousePressEvent(event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Entities.findRayIntersection(pickRay);\r    if (intersection.intersects) {\r        print (\"You clicked on entity \" + intersection.entityID);\r    }\r}\r\rController.mousePressEvent.connect(onMousePressEvent);"
        ],
        "memberof": "Camera",
        "longname": "Camera.computePickRay",
        "scope": "static"
    },
    {
        "description": "Rotate the camera to look at the specified <code>position</code>. Only works if the camera is in independent mode.",
        "kind": "function",
        "name": "lookAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position to look at.",
                "name": "position"
            }
        ],
        "examples": [
            "<caption>Rotate your camera to look at entities as you click on them with your mouse.</caption>\rfunction onMousePressEvent(event) {\r    var pickRay = Camera.computePickRay(event.x, event.y);\r    var intersection = Entities.findRayIntersection(pickRay);\r    if (intersection.intersects) {\r        // Switch to independent mode.\r        Camera.mode = \"independent\";\r        // Look at the entity that was clicked.\r        var properties = Entities.getEntityProperties(intersection.entityID, \"position\");\r        Camera.lookAt(properties.position);\r    }\r}\r\rController.mousePressEvent.connect(onMousePressEvent);"
        ],
        "memberof": "Camera",
        "longname": "Camera.lookAt",
        "scope": "static"
    },
    {
        "description": "Set the camera to continue looking at the specified <code>position</code> even while the camera moves. Only works if the \rcamera is in independent mode.",
        "kind": "function",
        "name": "keepLookingAt",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "Position to keep looking at.",
                "name": "position"
            }
        ],
        "memberof": "Camera",
        "longname": "Camera.keepLookingAt",
        "scope": "static"
    },
    {
        "description": "Stops the camera from continually looking at the position that was set with <code>Camera.keepLookingAt</code>.",
        "kind": "function",
        "name": "stopLookingAt",
        "memberof": "Camera",
        "longname": "Camera.stopLookingAt",
        "scope": "static"
    },
    {
        "description": "Triggered when the camera mode changes.",
        "kind": "function",
        "name": "modeUpdated",
        "params": [
            {
                "type": {
                    "names": [
                        "Camera.Mode"
                    ]
                },
                "description": "The new camera mode.",
                "name": "newMode"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "examples": [
            "<caption>Report camera mode changes.</caption>\rfunction onCameraModeUpdated(newMode) {\r    print(\"The camera mode has changed to \" + newMode);\r}\r\rCamera.modeUpdated.connect(onCameraModeUpdated);\r\n     "
        ],
        "memberof": "Camera",
        "longname": "Camera.modeUpdated",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "toJSON",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.toJSON",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "load",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "map"
            }
        ],
        "memberof": "Render",
        "longname": "Render.load",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isTask",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.isTask",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSubConfigs",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.getSubConfigs",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getNumSubs",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.getNumSubs",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSubConfig",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.getSubConfig",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "load",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "map"
            }
        ],
        "memberof": "Render",
        "longname": "Render.load",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "loaded",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.loaded",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "newStats",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.newStats",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dirtyEnabled",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.dirtyEnabled",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Render",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "cpuRunTime"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "longname": "Render",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "getConfig",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Render",
        "longname": "Render.getConfig",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "refresh",
        "memberof": "Render",
        "longname": "Render.refresh",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "muteToggled",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "FaceTracker",
        "longname": "FaceTracker.muteToggled",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "toggleMute",
        "memberof": "FaceTracker",
        "longname": "FaceTracker.toggleMute",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getMuted",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "FaceTracker",
        "longname": "FaceTracker.getMuted",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "InteractiveWindow",
        "hifiInterface": true,
        "tags": [
            {
                "originalTitle": "hifi-client-en",
                "title": "hifi-client-en",
                "text": ""
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            },
            {
                "type": {
                    "names": [
                        "Desktop.PresentationMode"
                    ]
                },
                "name": "presentationMode"
            }
        ],
        "longname": "InteractiveWindow",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.sendToQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.emitScriptEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.emitWebEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "close",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.close",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "show",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.show",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "raise",
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.raise",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.visibleChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.positionChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sizeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.sizeChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "presentationModeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.presentationModeChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "titleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.titleChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "closed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.closed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.fromQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.scriptEventReceived",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.webEventReceived",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "qmlToScript",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "InteractiveWindow",
        "longname": "InteractiveWindow.qmlToScript",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "OffscreenFlags",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "navigationFocused"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "navigationFocusDisabled"
            }
        ],
        "longname": "OffscreenFlags",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "navigationFocusedChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OffscreenFlags",
        "longname": "OffscreenFlags.navigationFocusedChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "navigationFocusDisabledChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OffscreenFlags",
        "longname": "OffscreenFlags.navigationFocusDisabledChanged",
        "scope": "static"
    },
    {
        "description": "Creates a new button, adds it to this and returns it.",
        "kind": "function",
        "name": "addButton",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "button properties",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy"
                    ]
                }
            }
        ],
        "memberof": "QmlFragmentClass",
        "longname": "QmlFragmentClass#addButton",
        "scope": "instance"
    },
    {
        "kind": "class",
        "name": "OverlayWebWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "properties"
            }
        ],
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "longname": "OverlayWebWindow",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "getURL",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getURL",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setURL",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setScriptURL",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "script"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setScriptURL",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "urlChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.urlChanged",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "Properties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "source"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.Properties",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "OverlayWindow",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "properties"
            }
        ],
        "hifiInterface": true,
        "tags": [
            {
                "originalTitle": "hifi-client-en",
                "title": "hifi-client-en",
                "text": ""
            }
        ],
        "properties": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "longname": "OverlayWindow",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "initQml",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.initQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.isVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.getPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.getSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setTitle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.setTitle",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "raise",
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.raise",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "close",
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.close",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getEventBridge",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.getEventBridge",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.sendToQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearDebugWindow",
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.emitScriptEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.emitWebEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.visibleChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.positionChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sizeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.sizeChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "moved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.moved",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resized",
        "params": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "name": "size"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.resized",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "closed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.closed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.fromQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.scriptEventReceived",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.webEventReceived",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "hasMoved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.hasMoved",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "hasClosed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.hasClosed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "qmlToScript",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWindow",
        "longname": "OverlayWindow.qmlToScript",
        "scope": "static"
    },
    {
        "kind": "namespace",
        "name": "Tablet",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Tablet",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "namespace",
        "name": "tabletInterface",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "deprecated": "This API is deprecated and will be removed. Use {@link Tablet} instead.",
        "longname": "tabletInterface",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "description": "<table>\r  <thead>\r    <tr><th>Value</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td><code>0</code></td><td>Button click.</td></tr>\r    <tr><td><code>1</code></td><td>Button hover.</td></tr>\r    <tr><td><code>2</code></td><td>Tablet open.</td></tr>\r    <tr><td><code>3</code></td><td>Tablet hands in.</td></tr>\r    <tr><td><code>4</code></td><td>Tablet hands out.</td></tr>\r    <tr><td><code>5</code></td><td>Last.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "AudioEvents",
        "type": {
            "names": [
                "number"
            ]
        },
        "memberof": "Tablet",
        "longname": "Tablet.AudioEvents",
        "scope": "static"
    },
    {
        "description": "Creates or returns a new TabletProxy and returns it.",
        "kind": "function",
        "name": "getTablet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Tablet name.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletProxy"
                    ]
                },
                "description": "Tablet instance."
            }
        ],
        "memberof": "Tablet",
        "longname": "Tablet.getTablet",
        "scope": "static"
    },
    {
        "description": "Creates or returns a new TabletProxy and returns it.",
        "kind": "function",
        "name": "getTablet",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Tablet name.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletProxy"
                    ]
                },
                "description": "Tablet instance."
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Tablet.getTablet} instead.",
        "memberof": "tabletInterface",
        "longname": "tabletInterface.getTablet",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "playSound",
        "params": [
            {
                "type": {
                    "names": [
                        "Tablet.AudioEvents"
                    ]
                },
                "name": "sound"
            }
        ],
        "memberof": "Tablet",
        "longname": "Tablet.playSound",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "playSound",
        "params": [
            {
                "type": {
                    "names": [
                        "Tablet.AudioEvents"
                    ]
                },
                "name": "sound"
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Tablet.playSound} instead.",
        "memberof": "tabletInterface",
        "longname": "tabletInterface.playSound",
        "scope": "static"
    },
    {
        "description": "Triggered when a tablet message or dialog is created.",
        "kind": "function",
        "name": "tabletNotification",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Tablet",
        "longname": "Tablet.tabletNotification",
        "scope": "static"
    },
    {
        "description": "Triggered when a tablet message or dialog is created.",
        "kind": "function",
        "name": "tabletNotification",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "deprecated": "This function is deprecated and will be removed. Use {@link Tablet.tabletNotification} instead.",
        "memberof": "tabletInterface",
        "longname": "tabletInterface.tabletNotification",
        "scope": "static"
    },
    {
        "kind": "typedef",
        "name": "ButtonList",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "TabletProxy",
        "longname": "TabletProxy#ButtonList",
        "scope": "instance"
    },
    {
        "kind": "class",
        "name": "TabletProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Name of this tablet. <em>Read-only.</em>",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Used to transition this tablet into and out of toolbar mode.\r    When tablet is in toolbar mode, all its buttons will appear in a floating toolbar.",
                "name": "toolbarMode"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "landscape"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "tabletShown"
            },
            {
                "type": {
                    "names": [
                        "TabletProxy#ButtonList"
                    ]
                },
                "description": "<em>Read-only.</em>",
                "name": "buttons"
            }
        ],
        "longname": "TabletProxy",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "gotoMenuScreen",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "submenu"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#gotoMenuScreen",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "initialScreen",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "url"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#initialScreen",
        "scope": "instance"
    },
    {
        "description": "Transition to the home screen.",
        "kind": "function",
        "name": "gotoHomeScreen",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#gotoHomeScreen",
        "scope": "instance"
    },
    {
        "description": "Show the specified Web url on the tablet.",
        "kind": "function",
        "name": "gotoWebScreen",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of web page.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "URL to an additional JS script to inject into the web page.",
                "name": "injectedJavaScriptUrl"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "loadOtherBase"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#gotoWebScreen",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "loadQMLSource",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "resizable"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadQMLSource",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "pushOntoStack",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#pushOntoStack",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "popFromStack",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#popFromStack",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "loadQMLOnTop",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadQMLOnTop",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "loadWebScreenOnTop",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "injectedJavaScriptURL"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#loadWebScreenOnTop",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "returnToPreviousApp",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#returnToPreviousApp",
        "scope": "instance"
    },
    {
        "description": "Check if the tablet has a message dialog open.",
        "kind": "function",
        "name": "isMessageDialogOpen",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#isMessageDialogOpen",
        "scope": "instance"
    },
    {
        "description": "Close any open dialogs.",
        "kind": "function",
        "name": "closeDialog",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#closeDialog",
        "scope": "instance"
    },
    {
        "description": "Creates a new button, adds it to this and returns it.",
        "kind": "function",
        "name": "addButton",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Button properties.",
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#addButton",
        "scope": "instance"
    },
    {
        "description": "Removes a button from the tablet.",
        "kind": "function",
        "name": "removeButton",
        "params": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy"
                    ]
                },
                "description": "The button to be removed",
                "name": "button"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#removeButton",
        "scope": "instance"
    },
    {
        "description": "Used to send an event to the HTML/JavaScript embedded in the tablet.",
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#emitScriptEvent",
        "scope": "instance"
    },
    {
        "description": "Used to send an event to the QML embedded in the tablet.",
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#sendToQml",
        "scope": "instance"
    },
    {
        "description": "Check if the tablet is on the home screen.",
        "kind": "function",
        "name": "onHomeScreen",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#onHomeScreen",
        "scope": "instance"
    },
    {
        "description": "Set tablet into or out of landscape mode.",
        "kind": "function",
        "name": "setLandscape",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> for landscape, <ode>false</code> for portrait.",
                "name": "landscape"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#setLandscape",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "getLandscape",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#getLandscape",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "isPathLoaded",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "path"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#isPathLoaded",
        "scope": "instance"
    },
    {
        "description": "Signaled when this tablet receives an event from the html/js embedded in the tablet.",
        "kind": "function",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#webEventReceived",
        "scope": "instance"
    },
    {
        "description": "Signaled when this tablet receives an event from the qml embedded in the tablet.",
        "kind": "function",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object",
                        "string"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#fromQml",
        "scope": "instance"
    },
    {
        "description": "Signaled when this tablet screen changes.",
        "kind": "function",
        "name": "screenChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "\"Home\", \"Web\", \"Menu\", \"QML\", \"Closed\".",
                "name": "type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Only valid for Web and QML.",
                "name": "url"
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#screenChanged",
        "scope": "instance"
    },
    {
        "description": "Signaled when the tablet becomes visible or becomes invisible.",
        "kind": "function",
        "name": "isTabletShownChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletProxy",
        "longname": "TabletProxy#isTabletShownChanged",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "toolbarModeChanged",
        "memberof": "TabletProxy",
        "longname": "TabletProxy#toolbarModeChanged",
        "scope": "instance"
    },
    {
        "kind": "class",
        "name": "TabletButtonProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "properties": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "description": "Uniquely identifies this button. <em>Read-only.</em>",
                "name": "uuid"
            },
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                },
                "name": "properties"
            }
        ],
        "longname": "TabletButtonProxy",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "description": "Returns the current value of this button's properties.",
        "kind": "function",
        "name": "getProperties",
        "returns": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                }
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#getProperties",
        "scope": "instance"
    },
    {
        "description": "Replace the values of some of this button's properties.",
        "kind": "function",
        "name": "editProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "TabletButtonProxy.ButtonProperties"
                    ]
                },
                "description": "Set of properties to change.",
                "name": "properties"
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#editProperties",
        "scope": "instance"
    },
    {
        "description": "Triggered when this button has been clicked on by the user.",
        "kind": "function",
        "name": "clicked",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#clicked",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "propertiesChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy#propertiesChanged",
        "scope": "instance"
    },
    {
        "kind": "typedef",
        "name": "ButtonProperties",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL to button icon. (50 x 50)",
                "name": "icon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL to button icon, displayed during mouse hover. (50 x 50)",
                "name": "hoverIcon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL to button icon used when button is active, and during mouse hover. (50 x 50)",
                "name": "activeHoverIcon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL to button icon used when button is active. (50 x 50)",
                "name": "activeIcon"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Button caption.",
                "name": "text"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Button caption when button is not-active but during mouse hover.",
                "name": "hoverText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Button caption when button is active.",
                "name": "activeText"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Button caption when button is active and during mouse hover.",
                "name": "activeHoverText"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "<code>true</code> when button is active.",
                "name": "isActive"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Determines sort order on tablet.  lower numbers will appear before larger numbers. \r    Default is 100.",
                "name": "sortOrder"
            }
        ],
        "memberof": "TabletButtonProxy",
        "longname": "TabletButtonProxy.ButtonProperties",
        "scope": "static"
    },
    {
        "kind": "class",
        "name": "ToolbarButtonProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "ToolbarButtonProxy",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "editProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "ToolbarButtonProxy",
        "longname": "ToolbarButtonProxy#editProperties",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "writeProperty",
        "tags": [
            {
                "originalTitle": "parm",
                "title": "parm",
                "text": "{string} propertyName",
                "value": "{string} propertyName"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "propertyValue"
            }
        ],
        "memberof": "ToolbarButtonProxy",
        "longname": "ToolbarButtonProxy#writeProperty",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "writeProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "ToolbarButtonProxy",
        "longname": "ToolbarButtonProxy#writeProperties",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "readProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "propertyName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "ToolbarButtonProxy",
        "longname": "ToolbarButtonProxy#readProperty",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "readProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "propertyList"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "ToolbarButtonProxy",
        "longname": "ToolbarButtonProxy#readProperties",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "clicked",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ToolbarButtonProxy",
        "longname": "ToolbarButtonProxy#clicked",
        "scope": "instance"
    },
    {
        "kind": "class",
        "name": "ToolbarProxy",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "ToolbarProxy",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "addButton",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "properties"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ToolbarButtonProxy"
                    ]
                }
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#addButton",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "removeButton",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#removeButton",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "writeProperty",
        "tags": [
            {
                "originalTitle": "parm",
                "title": "parm",
                "text": "{string} propertyName",
                "value": "{string} propertyName"
            }
        ],
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "propertyValue"
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#writeProperty",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "writeProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#writeProperties",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "readProperty",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "propertyName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#readProperty",
        "scope": "instance"
    },
    {
        "kind": "function",
        "name": "readProperties",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "propertyList"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "ToolbarProxy",
        "longname": "ToolbarProxy#readProperties",
        "scope": "instance"
    },
    {
        "kind": "namespace",
        "name": "Toolbars",
        "hifiInterface": true,
        "hifiClientEntity": true,
        "longname": "Toolbars",
        "scope": "global",
        "description": "<table><tr><th>Available in:</th><td>Interface Scripts</td><td>Client Entity Scripts</td></tr></table><br>"
    },
    {
        "kind": "function",
        "name": "getToolbar",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "toolbarID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ToolbarProxy"
                    ]
                }
            }
        ],
        "memberof": "Toolbars",
        "longname": "Toolbars.getToolbar",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.OculusTouch</code> object has properties representing Oculus Rift. The property values are \rinteger IDs, uniquely identifying each output. <em>Read-only.</em> These can be mapped to actions or functions or \r<code>Controller.Standard</code> items in a {@link RouteObject} mapping.</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td colspan=\"4\"><strong>Buttons</strong></td></tr>\r    <tr><td><code>A</code></td><td>number</td><td>number</td><td>\"A\" button pressed.</td></tr>\r    <tr><td><code>B</code></td><td>number</td><td>number</td><td>\"B\" button pressed.</td></tr>\r    <tr><td><code>X</code></td><td>number</td><td>number</td><td>\"X\" button pressed.</td></tr>\r    <tr><td><code>Y</code></td><td>number</td><td>number</td><td>\"Y\" button pressed.</td></tr>\r    <tr><td><code>LeftApplicationMenu</code></td><td>number</td><td>number</td><td>Left application menu button pressed.\r      </td></tr>\r    <tr><td><code>RightApplicationMenu</code></td><td>number</td><td>number</td><td>Right application menu button pressed.\r      </td></tr>\r    <tr><td colspan=\"4\"><strong>Sticks</strong></td></tr>\r    <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left stick x-axis scale.</td></tr>\r    <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left stick y-axis scale.</td></tr>\r    <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>\r    <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>\r    <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left stick button pressed.</td></tr>\r    <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right stick button pressed.</td></tr>\r    <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left stick is touched.</td></tr>\r    <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right stick is touched.</td></tr>\r    <tr><td colspan=\"4\"><strong>Triggers</strong></td></tr>\r    <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>\r    <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>\r    <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>\r    <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>\r    <tr><td colspan=\"4\"><strong>Finger Abstractions</strong></td></tr>\r    <tr><td><code>LeftPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>LeftSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Left thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>LeftThumbUp</code></td><td>number</td><td>number</td><td>Left thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>RightPrimaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching primary thumb \r      button.</td></tr>\r    <tr><td><code>RightSecondaryThumbTouch</code></td><td>number</td><td>number</td><td>Right thumb touching secondary thumb \r      button.</td></tr>\r    <tr><td><code>RightThumbUp</code></td><td>number</td><td>number</td><td>Right thumb not touching primary or secondary \r      thumb buttons.</td></tr>\r    <tr><td><code>LeftPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Left index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>LeftIndexPoint</code></td><td>number</td><td>number</td><td>Left index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r    <tr><td><code>RightPrimaryIndexTouch</code></td><td>number</td><td>number</td><td>Right index finger is touching primary \r      index finger control.</td></tr>\r    <tr><td><code>RightIndexPoint</code></td><td>number</td><td>number</td><td>Right index finger is pointing, not touching \r      primary or secondary index finger controls.</td></tr>\r    <tr><td colspan=\"4\"><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>right hand pose.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-OculusTouch",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-OculusTouch",
        "scope": "static"
    },
    {
        "description": "<p>The <code>Controller.Hardware.Vive</code> object has properties representing Vive. The property values are integer IDs,\runiquely identifying each output. <em>Read-only.</em> These can be mapped to actions or functions or \r<code>Controller.Standard</code> items in a {@link RouteObject} mapping.</p>\r<table>\r  <thead>\r    <tr><th>Property</th><th>Type</th><th>Data</th><th>Description</th></tr>\r  </thead>\r  <tbody>\r    <tr><td colspan=\"4\"><strong>Touch Pad (Sticks)</strong></td></tr>\r    <tr><td><code>LX</code></td><td>number</td><td>number</td><td>Left touch pad x-axis scale.</td></tr>\r    <tr><td><code>LY</code></td><td>number</td><td>number</td><td>Left touch pad y-axis scale.</td></tr>\r    <tr><td><code>RX</code></td><td>number</td><td>number</td><td>Right stick x-axis scale.</td></tr>\r    <tr><td><code>RY</code></td><td>number</td><td>number</td><td>Right stick y-axis scale.</td></tr>\r    <tr><td><code>LS</code></td><td>number</td><td>number</td><td>Left touch pad pressed.</td></tr>\r    <tr><td><code>LS_CENTER</code></td><td>number</td><td>number</td><td>Left touch pad center pressed.</td></tr>\r    <tr><td><code>LS_X</code></td><td>number</td><td>number</td><td>Left touch pad pressed x-coordinate.</td></tr>\r    <tr><td><code>LS_Y</code></td><td>number</td><td>number</td><td>Left touch pad pressed y-coordinate.</td></tr>\r    <tr><td><code>RS</code></td><td>number</td><td>number</td><td>Right touch pad pressed.</td></tr>\r    <tr><td><code>RS_CENTER</code></td><td>number</td><td>number</td><td>Right touch pad center pressed.</td></tr>\r    <tr><td><code>RS_X</code></td><td>number</td><td>number</td><td>Right touch pad pressed x-coordinate.</td></tr>\r    <tr><td><code>RS_Y</code></td><td>number</td><td>number</td><td>Right touch pad pressed y-coordinate.</td></tr>\r    <tr><td><code>LSTouch</code></td><td>number</td><td>number</td><td>Left touch pad is touched.</td></tr>\r    <tr><td><code>RSTouch</code></td><td>number</td><td>number</td><td>Right touch pad is touched.</td></tr>\r    <tr><td colspan=\"4\"><strong>Triggers</strong></td></tr>\r    <tr><td><code>LT</code></td><td>number</td><td>number</td><td>Left trigger scale.</td></tr>\r    <tr><td><code>RT</code></td><td>number</td><td>number</td><td>Right trigger scale.</td></tr>\r    <tr><td><code>LTClick</code></td><td>number</td><td>number</td><td>Left trigger click.</td></tr>\r    <tr><td><code>RTClick</code></td><td>number</td><td>number</td><td>Right trigger click.</td></tr>\r    <tr><td><code>LeftGrip</code></td><td>number</td><td>number</td><td>Left grip scale.</td></tr>\r    <tr><td><code>RightGrip</code></td><td>number</td><td>number</td><td>Right grip scale.</td></tr>\r    <tr><td colspan=\"4\"><strong>Avatar Skeleton</strong></td></tr>\r    <tr><td><code>Hips</code></td><td>number</td><td>{@link Pose}</td><td>Hips pose.</td></tr>\r    <tr><td><code>Spine2</code></td><td>number</td><td>{@link Pose}</td><td>Spine2 pose.</td></tr>\r    <tr><td><code>Head</code></td><td>number</td><td>{@link Pose}</td><td>Head pose.</td></tr>\r    <tr><td><code>LeftArm</code></td><td>number</td><td>{@link Pose}</td><td>Left arm pose.</td></tr>\r    <tr><td><code>RightArm</code></td><td>number</td><td>{@link Pose}</td><td>Right arm pose</td></tr>\r    <tr><td><code>LeftHand</code></td><td>number</td><td>{@link Pose}</td><td>Left hand pose.</td></tr>\r    <tr><td><code>RightHand</code></td><td>number</td><td>{@link Pose}</td><td>Right hand pose.</td></tr>\r    <tr><td colspan=\"4\"><strong>Trackers</strong></td></tr>\r    <tr><td><code>TrackedObject00</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 0 pose.</td></tr>\r    <tr><td><code>TrackedObject01</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 1 pose.</td></tr>\r    <tr><td><code>TrackedObject02</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 2 pose.</td></tr>\r    <tr><td><code>TrackedObject03</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 3 pose.</td></tr>\r    <tr><td><code>TrackedObject04</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 4 pose.</td></tr>\r    <tr><td><code>TrackedObject05</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 5 pose.</td></tr>\r    <tr><td><code>TrackedObject06</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 6 pose.</td></tr>\r    <tr><td><code>TrackedObject07</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 7 pose.</td></tr>\r    <tr><td><code>TrackedObject08</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 8 pose.</td></tr>\r    <tr><td><code>TrackedObject09</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 9 pose.</td></tr>\r    <tr><td><code>TrackedObject10</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 10 pose.</td></tr>\r    <tr><td><code>TrackedObject11</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 11 pose.</td></tr>\r    <tr><td><code>TrackedObject12</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 12 pose.</td></tr>\r    <tr><td><code>TrackedObject13</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 13 pose.</td></tr>\r    <tr><td><code>TrackedObject14</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 14 pose.</td></tr>\r    <tr><td><code>TrackedObject15</code></td><td>number</td><td>{@link Pose}</td><td>Tracker 15 pose.</td></tr>\r  </tbody>\r</table>",
        "kind": "typedef",
        "name": "Hardware-Vive",
        "type": {
            "names": [
                "object"
            ]
        },
        "memberof": "Controller",
        "longname": "Controller.Hardware-Vive",
        "scope": "static"
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "D:\\ROLC_High-Fidelity\\01_Reference\\R_Programming\\R_VR\\HF\\tools\\jsdoc\\root.js"
        ]
    },
    {
        "description": "Returns the minimum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMinScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "minimum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getDomainMinScale",
        "scope": "static"
    },
    {
        "description": "Returns the maximum scale allowed for this avatar in the current domain.\rThis value can change as the user changes avatars or when changing domains.",
        "kind": "function",
        "name": "getDomainMaxScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "maximum scale allowed for this avatar in the current domain."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getDomainMaxScale",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the current eye height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getEyeHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Eye height of avatar in meters."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getEyeHeight",
        "scope": "static"
    },
    {
        "description": "Provides read only access to the current height of the avatar.\rThis height is only an estimate and might be incorrect for avatars that are missing standard joints.",
        "kind": "function",
        "name": "getHeight",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "Height of avatar in meters."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getHeight",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setHandState",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "state"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setHandState",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getHandState",
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getHandState",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setRawJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<JointData>"
                    ]
                },
                "name": "data"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setRawJointData",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation and position relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/t-pose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation and position relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointData",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's rotation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent.",
                "name": "rotation"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose with arm rotated\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Rotate the right arm.\rvar newArmRotation = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\rMyAvatar.setJointRotation(\"RightArm\", newArmRotation);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointRotation",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's translation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Set a specific joint's translation relative to its parent.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse \rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints, \rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate \rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set \rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent.",
                "name": "translation"
            }
        ],
        "examples": [
            "<caption>Stretch your avatar's neck. Depending on the avatar you are using, you will either see a gap between \rthe head and body or you will see the neck stretched.<br />\r<img alt=\"Avatar with neck stretched\" src=\"https://docs.highfidelity.com/images/stretched-neck.png\" /></caption>\r// Stretch your avatar's neck.\rMyAvatar.setJointTranslation(\"Neck\", { x: 0, y: 25, z: 0 });\r\r// Restore your avatar's neck after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointTranslation",
        "scope": "static"
    },
    {
        "description": "Clear joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly faster than the function variation that specifies the joint name.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearJointData",
        "scope": "static"
    },
    {
        "description": "Clear joint translations and rotations set by script for a specific joint. This restores all motion from the default \ranimation system including inverse kinematics for that joint.\r<p>Note: This is slightly slower than the function variation that specifies the joint index.</p>",
        "kind": "function",
        "name": "clearJointData",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "examples": [
            "<caption>Offset and restore the position of your avatar's head.</caption>\r// Move your avatar's head up by 25cm from where it should be.\rMyAvatar.setJointTranslation(\"Neck\", { x: 0, y: 0.25, z: 0 });\r\r// Restore your avatar's head to its default position after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointData(\"Neck\");\r}, 5000);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearJointData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.isJointDataValid",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isJointDataValid",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.isJointDataValid",
        "scope": "static"
    },
    {
        "description": "Get the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Get the rotation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointRotation",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "description": "The rotation of the joint relative to its parent."
            }
        ],
        "examples": [
            "<caption>Report the rotation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointRotation",
        "scope": "static"
    },
    {
        "description": "Get the translation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint.",
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent."
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Get the translation of a joint relative to its parent. For information on the joint hierarchy used, see \r<a href=\"https://docs.highfidelity.com/create-and-explore/avatars/avatar-standards\">Avatar Standards</a>.",
        "kind": "function",
        "name": "getJointTranslation",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "description": "The translation of the joint relative to its parent."
            }
        ],
        "examples": [
            "<caption>Report the translation of your avatar's hips joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotation(\"Hips\")));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointTranslation",
        "scope": "static"
    },
    {
        "description": "Get the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.",
        "kind": "function",
        "name": "getJointRotations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations of all joints relative to each's parent. The values are in the same order as the array \rreturned by {@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}."
            }
        ],
        "examples": [
            "<caption>Report the rotations of all your avatar's joints.</caption>\rprint(JSON.stringify(MyAvatar.getJointRotations()));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointRotations",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getJointTranslations",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointTranslations",
        "scope": "static"
    },
    {
        "description": "Set the rotations of all joints in the current avatar. Each joint's rotation is relative to its parent joint.\r<p>Setting joint data completely overrides/replaces all motion from the default animation system including inverse\rkinematics, but just for the specified joint. So for example, if you were to procedurally manipulate the finger joints,\rthe avatar's hand and head would still do inverse kinematics properly. However, as soon as you start to manipulate\rjoints in the inverse kinematics chain, the inverse kinematics might not function as you expect. For example, if you set\rthe rotation of the elbow, the hand inverse kinematics position won't end up in the right place.</p>",
        "kind": "function",
        "name": "setJointRotations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Quat>"
                    ]
                },
                "description": "The rotations for all joints in the avatar. The values are in the same order as the \rarray returned by {@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}.",
                "name": "jointRotations"
            }
        ],
        "examples": [
            "<caption>Set your avatar to its default T-pose then rotate its right arm.<br />\r<img alt=\"Avatar in T-pose\" src=\"https://docs.highfidelity.com/images/armpose.png\" /></caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Get all join rotations.\rvar jointRotations = MyAvatar.getJointRotations(); \r\r// Update the rotation of the right arm in the array.\rjointRotations[MyAvatar.getJointIndex(\"RightArm\")] = { x: 0.47, y: 0.22, z: -0.02, w: 0.87 };\r\r// Update all joint rotations.\rMyAvatar.setJointRotations(jointRotations);\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointRotations",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setJointTranslations",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<Vec3>"
                    ]
                },
                "name": "translations"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setJointTranslations",
        "scope": "static"
    },
    {
        "description": "Clear all joint translations and rotations that have been set by script. This restores all motion from the default \ranimation system including inverse kinematics for all joints.",
        "kind": "function",
        "name": "clearJointsData",
        "examples": [
            "<caption>Set your avatar to it's default T-pose for a while.</caption>\r// Set all joint translations and rotations to defaults.\rvar i, length, rotation, translation;\rfor (i = 0, length = MyAvatar.getJointNames().length; i < length; i++) {\r    rotation = MyAvatar.getDefaultJointRotation(i);\r    translation = MyAvatar.getDefaultJointTranslation(i);\r    MyAvatar.setJointData(i, rotation, translation);\r}\r\r// Restore your avatar's motion after 5s.\rScript.setTimeout(function () {\r    MyAvatar.clearJointsData();\r}, 5000);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearJointsData",
        "scope": "static"
    },
    {
        "description": "Get the joint index for a named joint. The joint index value is the position of the joint in the array returned by \r{@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}.",
        "kind": "function",
        "name": "getJointIndex",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the joint.",
                "name": "name"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The index of the joint."
            }
        ],
        "examples": [
            "<caption>Report the index of your avatar's left arm joint.</caption>\rprint(JSON.stringify(MyAvatar.getJointIndex(\"LeftArm\"));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointIndex",
        "scope": "static"
    },
    {
        "description": "Get the names of all the joints in the current avatar.",
        "kind": "function",
        "name": "getJointNames",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "The joint names."
            }
        ],
        "examples": [
            "<caption>Report the names of all the joints in your current avatar.</caption>\rprint(JSON.stringify(MyAvatar.getJointNames()));"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getJointNames",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setBlendshape",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "name"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "value"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setBlendshape",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAttachmentsVariant",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAttachmentsVariant",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAttachmentsVariant",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "variant"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAttachmentsVariant",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "entityData"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.updateAvatarEntity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearAvatarEntity",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "entityID"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.clearAvatarEntity",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setForceFaceTrackerConnected",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "connected"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setForceFaceTrackerConnected",
        "scope": "static"
    },
    {
        "description": "Get information about all models currently attached to your avatar.",
        "kind": "function",
        "name": "getAttachmentData",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "Information about all models attached to your avatar."
            }
        ],
        "examples": [
            "<caption>Report the URLs of all current attachments.</caption>\rvar attachments = MyAvatar.getaAttachmentData();\rfor (var i = 0; i < attachments.length; i++) {\r    print (attachments[i].modelURL);\r}"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAttachmentData",
        "scope": "static"
    },
    {
        "description": "Set all models currently attached to your avatar. For example, if you retrieve attachment data using \r{@link MyAvatar.getAttachmentData} or {@link Avatar.getAttachmentData}, make changes to it, and then want to update your avatar's attachments per the \rchanged data. You can also remove all attachments by using setting <code>attachmentData</code> to <code>null</code>.",
        "kind": "function",
        "name": "setAttachmentData",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<AttachmentData>"
                    ]
                },
                "description": "The attachment data defining the models to have attached to your avatar. Use \r    <code>null</code> to remove all attachments.",
                "name": "attachmentData"
            }
        ],
        "examples": [
            "<caption>Remove a hat attachment if your avatar is wearing it.</caption>\rvar hatURL = \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\";\rvar attachments = MyAvatar.getAttachmentData();\r\rfor (var i = 0; i < attachments.length; i++) {\r    if (attachments[i].modelURL === hatURL) {\r        attachments.splice(i, 1);\r        MyAvatar.setAttachmentData(attachments);\r        break;\r    }\r }"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAttachmentData",
        "scope": "static"
    },
    {
        "description": "Attach a model to your avatar. For example, you can give your avatar a hat to wear, a guitar to hold, or a surfboard to \rstand on.\r<p>Note: Attached models are models only; they are not entities and can not be manipulated using the {@link Entities} API. \rNor can you use this function to attach an entity (such as a sphere or a box) to your avatar.</p>",
        "kind": "function",
        "name": "attach",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to attach. Models can be .FBX or .OBJ format.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the avatar joint (see {@link MyAvatar.getJointNames} or {@link Avatar.getJointNames}) to attach the model \r    to.",
                "name": "jointName"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "optional": true,
                "defaultvalue": "Vec3.ZERO",
                "description": "The offset to apply to the model relative to the joint position.",
                "name": "translation"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "optional": true,
                "defaultvalue": "Quat.IDENTITY",
                "description": "The rotation to apply to the model relative to the joint orientation.",
                "name": "rotation"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "optional": true,
                "defaultvalue": "1.0",
                "description": "The scale to apply to the model.",
                "name": "scale"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "If the model has a skeleton, set this to <code>true</code> so that the bones of the \r    attached model's skeleton are be rotated to fit the avatar's current pose. <code>isSoft</code> is used, for example, \r    to have clothing that moves with the avatar.<br />\r    If <code>true</code>, the <code>translation</code>, <code>rotation</code>, and <code>scale</code> parameters are \r    ignored.",
                "name": "isSoft"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "allowDuplicates"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": true,
                "name": "useSaved"
            }
        ],
        "examples": [
            "<caption>Attach a cowboy hat to your avatar's head.</caption>\rvar attachment = {\r    modelURL: \"https://s3.amazonaws.com/hifi-public/tony/cowboy-hat.fbx\",\r    jointName: \"Head\",\r    translation: {\"x\": 0, \"y\": 0.25, \"z\": 0},\r    rotation: {\"x\": 0, \"y\": 0, \"z\": 0, \"w\": 1},\r    scale: 1,\r    isSoft: false\r};\r\r MyAvatar.attach(attachment.modelURL,\r                 attachment.jointName,\r                 attachment.translation,\r                 attachment.rotation,\r                 attachment.scale,\r                 attachment.isSoft);"
        ],
        "memberof": "Avatar",
        "longname": "Avatar.attach",
        "scope": "static"
    },
    {
        "description": "Detach the most recently attached instance of a particular model from either a specific joint or any joint.",
        "kind": "function",
        "name": "detachOne",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the most \r    recently attached model is removed from which ever joint it was attached to.",
                "name": "jointName"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.detachOne",
        "scope": "static"
    },
    {
        "description": "Detach all instances of a particular model from either a specific joint or all joints.",
        "kind": "function",
        "name": "detachAll",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The URL of the model to detach.",
                "name": "modelURL"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "description": "The name of the joint to detach the model from. If <code>\"\"</code>, then the model is \r    detached from all joints.",
                "name": "jointName"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.detachAll",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarEntityData",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAvatarEntityData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAvatarEntityData",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "avatarEntityData"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAvatarEntityData",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSensorToWorldMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getSensorToWorldMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSensorToWorldScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getSensorToWorldScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getControllerLeftHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getControllerLeftHandMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getControllerRightHandMatrix",
        "returns": [
            {
                "type": {
                    "names": [
                        "Mat4"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getControllerRightHandMatrix",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getDataRate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getDataRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getUpdateRate",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "defaultvalue": "\"\"",
                "name": "rateName"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getUpdateRate",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "displayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.displayNameChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionDisplayNameChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.sessionDisplayNameChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "skeletonModelURLChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.skeletonModelURLChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "lookAtSnappingChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "enabled"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.lookAtSnappingChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionUUIDChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendAvatarDataPacket",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "name": "sendAll"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.sendAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendIdentityPacket",
        "memberof": "Avatar",
        "longname": "Avatar.sendIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setJointMappingsFromNetworkReply",
        "memberof": "Avatar",
        "longname": "Avatar.setJointMappingsFromNetworkReply",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSessionUUID",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setSessionUUID",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAbsoluteJointRotationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Quat"
                    ]
                },
                "name": "rotation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAbsoluteJointRotationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setAbsoluteJointTranslationInObjectFrame",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "index"
            },
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "translation"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.setAbsoluteJointTranslationInObjectFrame",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getTargetScale",
        "returns": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                }
            }
        ],
        "memberof": "Avatar",
        "longname": "Avatar.getTargetScale",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resetLastSent",
        "memberof": "Avatar",
        "longname": "Avatar.resetLastSent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarIdentifiers",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarIdentifiers",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getAvatarsInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec3"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<Uuid>"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.getAvatarsInRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "avatarAddedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.avatarAddedEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "avatarRemovedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.avatarRemovedEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "avatarSessionChangedEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "oldSessionUUID"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.avatarSessionChangedEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isAvatarInRange",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "position"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "range"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.isAvatarInRange",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sessionUUIDChanged",
        "params": [
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "sessionUUID"
            },
            {
                "type": {
                    "names": [
                        "Uuid"
                    ]
                },
                "name": "oldSessionUUID"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.sessionUUIDChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarDataPacket",
        "params": [
            {
                "name": "message"
            },
            {
                "name": "sendingNode"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processAvatarDataPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processAvatarIdentityPacket",
        "params": [
            {
                "name": "message"
            },
            {
                "name": "sendingNode"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processAvatarIdentityPacket",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "processKillAvatar",
        "params": [
            {
                "name": "message"
            },
            {
                "name": "sendingNode"
            }
        ],
        "memberof": "AvatarManager",
        "longname": "AvatarManager.processKillAvatar",
        "scope": "static"
    },
    {
        "description": "Get the list of all resource URLs.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "deltaSize"
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the resource to prefetch.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "extra"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                }
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "AnimationCache",
        "longname": "AnimationCache.dirty",
        "scope": "static"
    },
    {
        "description": "Get the list of all resource URLs.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "deltaSize"
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the resource to prefetch.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "extra"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                }
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "SoundCache",
        "longname": "SoundCache.dirty",
        "scope": "static"
    },
    {
        "description": "Get the list of all resource URLs.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "deltaSize"
            }
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the resource to prefetch.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "extra"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                }
            }
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "ModelCache",
        "longname": "ModelCache.dirty",
        "scope": "static"
    },
    {
        "description": "Get the list of all resource URLs.",
        "kind": "function",
        "name": "getResourceList",
        "returns": [
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.getResourceList",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "updateTotalSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "deltaSize"
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.updateTotalSize",
        "scope": "static"
    },
    {
        "description": "Prefetches a resource.",
        "kind": "function",
        "name": "prefetch",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "URL of the resource to prefetch.",
                "name": "url"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "optional": true,
                "defaultvalue": null,
                "name": "extra"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "ResourceObject"
                    ]
                }
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.prefetch",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "dirty",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "TextureCache",
        "longname": "TextureCache.dirty",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "initQml",
        "params": [
            {
                "type": {
                    "names": [
                        "OverlayWindow.Properties"
                    ]
                },
                "name": "properties"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.initQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "isVisible",
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.isVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setVisible",
        "params": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "name": "visible"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setVisible",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getPosition",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setPosition",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "x"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "y"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setPosition",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getSize",
        "returns": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "size"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setSize",
        "params": [
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "width"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "name": "height"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setSize",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "setTitle",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "title"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.setTitle",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "raise",
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.raise",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "close",
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.close",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "getEventBridge",
        "returns": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.getEventBridge",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sendToQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.sendToQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "clearDebugWindow",
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.clearDebugWindow",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitScriptEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.emitScriptEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "emitWebEvent",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.emitWebEvent",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "visibleChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.visibleChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "positionChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.positionChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "sizeChanged",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.sizeChanged",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "moved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.moved",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "resized",
        "params": [
            {
                "type": {
                    "names": [
                        "Size"
                    ]
                },
                "name": "size"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.resized",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "closed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.closed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "fromQml",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.fromQml",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "scriptEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.scriptEventReceived",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "webEventReceived",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.webEventReceived",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "hasMoved",
        "params": [
            {
                "type": {
                    "names": [
                        "Vec2"
                    ]
                },
                "name": "position"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.hasMoved",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "hasClosed",
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.hasClosed",
        "scope": "static"
    },
    {
        "kind": "function",
        "name": "qmlToScript",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "name": "message"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Signal"
                    ]
                }
            }
        ],
        "memberof": "OverlayWebWindow",
        "longname": "OverlayWebWindow.qmlToScript",
        "scope": "static"
    }
]